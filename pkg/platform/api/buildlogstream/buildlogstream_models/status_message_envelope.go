// Code generated by go-swagger; DO NOT EDIT.

package buildlogstream_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatusMessageEnvelope Status Message Envelope
//
// A message that contains one status message plus an indicator of that message's type.
//
// swagger:model statusMessageEnvelope
type StatusMessageEnvelope struct {

	// The actual message.
	Body interface{} `json:"body,omitempty"`

	// build request id
	// Required: true
	// Format: uuid
	BuildRequestID *strfmt.UUID `json:"build_request_id"`

	// The timestamp for the message.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// Indicates the type of the contained message.
	// Required: true
	// Enum: [build_completed build_failed build_started heartbeat log_general pkg_build_completed pkg_build_failed pkg_build_skipped pkg_build_started task_completed task_failed task_scheduled task_skipped task_started]
	Type *string `json:"type"`
}

// Validate validates this status message envelope
func (m *StatusMessageEnvelope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusMessageEnvelope) validateBuildRequestID(formats strfmt.Registry) error {

	if err := validate.Required("build_request_id", "body", m.BuildRequestID); err != nil {
		return err
	}

	if err := validate.FormatOf("build_request_id", "body", "uuid", m.BuildRequestID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StatusMessageEnvelope) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var statusMessageEnvelopeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build_completed","build_failed","build_started","heartbeat","log_general","pkg_build_completed","pkg_build_failed","pkg_build_skipped","pkg_build_started","task_completed","task_failed","task_scheduled","task_skipped","task_started"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusMessageEnvelopeTypeTypePropEnum = append(statusMessageEnvelopeTypeTypePropEnum, v)
	}
}

const (

	// StatusMessageEnvelopeTypeBuildCompleted captures enum value "build_completed"
	StatusMessageEnvelopeTypeBuildCompleted string = "build_completed"

	// StatusMessageEnvelopeTypeBuildFailed captures enum value "build_failed"
	StatusMessageEnvelopeTypeBuildFailed string = "build_failed"

	// StatusMessageEnvelopeTypeBuildStarted captures enum value "build_started"
	StatusMessageEnvelopeTypeBuildStarted string = "build_started"

	// StatusMessageEnvelopeTypeHeartbeat captures enum value "heartbeat"
	StatusMessageEnvelopeTypeHeartbeat string = "heartbeat"

	// StatusMessageEnvelopeTypeLogGeneral captures enum value "log_general"
	StatusMessageEnvelopeTypeLogGeneral string = "log_general"

	// StatusMessageEnvelopeTypePkgBuildCompleted captures enum value "pkg_build_completed"
	StatusMessageEnvelopeTypePkgBuildCompleted string = "pkg_build_completed"

	// StatusMessageEnvelopeTypePkgBuildFailed captures enum value "pkg_build_failed"
	StatusMessageEnvelopeTypePkgBuildFailed string = "pkg_build_failed"

	// StatusMessageEnvelopeTypePkgBuildSkipped captures enum value "pkg_build_skipped"
	StatusMessageEnvelopeTypePkgBuildSkipped string = "pkg_build_skipped"

	// StatusMessageEnvelopeTypePkgBuildStarted captures enum value "pkg_build_started"
	StatusMessageEnvelopeTypePkgBuildStarted string = "pkg_build_started"

	// StatusMessageEnvelopeTypeTaskCompleted captures enum value "task_completed"
	StatusMessageEnvelopeTypeTaskCompleted string = "task_completed"

	// StatusMessageEnvelopeTypeTaskFailed captures enum value "task_failed"
	StatusMessageEnvelopeTypeTaskFailed string = "task_failed"

	// StatusMessageEnvelopeTypeTaskScheduled captures enum value "task_scheduled"
	StatusMessageEnvelopeTypeTaskScheduled string = "task_scheduled"

	// StatusMessageEnvelopeTypeTaskSkipped captures enum value "task_skipped"
	StatusMessageEnvelopeTypeTaskSkipped string = "task_skipped"

	// StatusMessageEnvelopeTypeTaskStarted captures enum value "task_started"
	StatusMessageEnvelopeTypeTaskStarted string = "task_started"
)

// prop value enum
func (m *StatusMessageEnvelope) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statusMessageEnvelopeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusMessageEnvelope) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusMessageEnvelope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusMessageEnvelope) UnmarshalBinary(b []byte) error {
	var res StatusMessageEnvelope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
