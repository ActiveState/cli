// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewAddIngredientVersionRevisionParams creates a new AddIngredientVersionRevisionParams object
// with the default values initialized.
func NewAddIngredientVersionRevisionParams() *AddIngredientVersionRevisionParams {
	var ()
	return &AddIngredientVersionRevisionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddIngredientVersionRevisionParamsWithTimeout creates a new AddIngredientVersionRevisionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddIngredientVersionRevisionParamsWithTimeout(timeout time.Duration) *AddIngredientVersionRevisionParams {
	var ()
	return &AddIngredientVersionRevisionParams{

		timeout: timeout,
	}
}

// NewAddIngredientVersionRevisionParamsWithContext creates a new AddIngredientVersionRevisionParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddIngredientVersionRevisionParamsWithContext(ctx context.Context) *AddIngredientVersionRevisionParams {
	var ()
	return &AddIngredientVersionRevisionParams{

		Context: ctx,
	}
}

// NewAddIngredientVersionRevisionParamsWithHTTPClient creates a new AddIngredientVersionRevisionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddIngredientVersionRevisionParamsWithHTTPClient(client *http.Client) *AddIngredientVersionRevisionParams {
	var ()
	return &AddIngredientVersionRevisionParams{
		HTTPClient: client,
	}
}

/*AddIngredientVersionRevisionParams contains all the parameters to send to the API endpoint
for the add ingredient version revision operation typically these are written to a http.Request
*/
type AddIngredientVersionRevisionParams struct {

	/*IngredientID*/
	IngredientID strfmt.UUID
	/*IngredientVersionID*/
	IngredientVersionID strfmt.UUID
	/*IngredientVersionRevision*/
	IngredientVersionRevision *inventory_models.IngredientVersionRevisionCreate

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithTimeout(timeout time.Duration) *AddIngredientVersionRevisionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithContext(ctx context.Context) *AddIngredientVersionRevisionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithHTTPClient(client *http.Client) *AddIngredientVersionRevisionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithIngredientID(ingredientID strfmt.UUID) *AddIngredientVersionRevisionParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetIngredientID(ingredientID strfmt.UUID) {
	o.IngredientID = ingredientID
}

// WithIngredientVersionID adds the ingredientVersionID to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithIngredientVersionID(ingredientVersionID strfmt.UUID) *AddIngredientVersionRevisionParams {
	o.SetIngredientVersionID(ingredientVersionID)
	return o
}

// SetIngredientVersionID adds the ingredientVersionId to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetIngredientVersionID(ingredientVersionID strfmt.UUID) {
	o.IngredientVersionID = ingredientVersionID
}

// WithIngredientVersionRevision adds the ingredientVersionRevision to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) WithIngredientVersionRevision(ingredientVersionRevision *inventory_models.IngredientVersionRevisionCreate) *AddIngredientVersionRevisionParams {
	o.SetIngredientVersionRevision(ingredientVersionRevision)
	return o
}

// SetIngredientVersionRevision adds the ingredientVersionRevision to the add ingredient version revision params
func (o *AddIngredientVersionRevisionParams) SetIngredientVersionRevision(ingredientVersionRevision *inventory_models.IngredientVersionRevisionCreate) {
	o.IngredientVersionRevision = ingredientVersionRevision
}

// WriteToRequest writes these params to a swagger request
func (o *AddIngredientVersionRevisionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient_id
	if err := r.SetPathParam("ingredient_id", o.IngredientID.String()); err != nil {
		return err
	}

	// path param ingredient_version_id
	if err := r.SetPathParam("ingredient_version_id", o.IngredientVersionID.String()); err != nil {
		return err
	}

	if o.IngredientVersionRevision != nil {
		if err := r.SetBodyParam(o.IngredientVersionRevision); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
