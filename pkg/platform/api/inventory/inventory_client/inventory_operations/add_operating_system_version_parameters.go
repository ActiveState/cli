// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewAddOperatingSystemVersionParams creates a new AddOperatingSystemVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddOperatingSystemVersionParams() *AddOperatingSystemVersionParams {
	return &AddOperatingSystemVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddOperatingSystemVersionParamsWithTimeout creates a new AddOperatingSystemVersionParams object
// with the ability to set a timeout on a request.
func NewAddOperatingSystemVersionParamsWithTimeout(timeout time.Duration) *AddOperatingSystemVersionParams {
	return &AddOperatingSystemVersionParams{
		timeout: timeout,
	}
}

// NewAddOperatingSystemVersionParamsWithContext creates a new AddOperatingSystemVersionParams object
// with the ability to set a context for a request.
func NewAddOperatingSystemVersionParamsWithContext(ctx context.Context) *AddOperatingSystemVersionParams {
	return &AddOperatingSystemVersionParams{
		Context: ctx,
	}
}

// NewAddOperatingSystemVersionParamsWithHTTPClient creates a new AddOperatingSystemVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddOperatingSystemVersionParamsWithHTTPClient(client *http.Client) *AddOperatingSystemVersionParams {
	return &AddOperatingSystemVersionParams{
		HTTPClient: client,
	}
}

/* AddOperatingSystemVersionParams contains all the parameters to send to the API endpoint
   for the add operating system version operation.

   Typically these are written to a http.Request.
*/
type AddOperatingSystemVersionParams struct {

	// OperatingSystemID.
	//
	// Format: uuid
	OperatingSystemID strfmt.UUID

	// OperatingSystemVersion.
	OperatingSystemVersion *inventory_models.OperatingSystemVersionCore

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add operating system version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddOperatingSystemVersionParams) WithDefaults() *AddOperatingSystemVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add operating system version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddOperatingSystemVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add operating system version params
func (o *AddOperatingSystemVersionParams) WithTimeout(timeout time.Duration) *AddOperatingSystemVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add operating system version params
func (o *AddOperatingSystemVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add operating system version params
func (o *AddOperatingSystemVersionParams) WithContext(ctx context.Context) *AddOperatingSystemVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add operating system version params
func (o *AddOperatingSystemVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add operating system version params
func (o *AddOperatingSystemVersionParams) WithHTTPClient(client *http.Client) *AddOperatingSystemVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add operating system version params
func (o *AddOperatingSystemVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOperatingSystemID adds the operatingSystemID to the add operating system version params
func (o *AddOperatingSystemVersionParams) WithOperatingSystemID(operatingSystemID strfmt.UUID) *AddOperatingSystemVersionParams {
	o.SetOperatingSystemID(operatingSystemID)
	return o
}

// SetOperatingSystemID adds the operatingSystemId to the add operating system version params
func (o *AddOperatingSystemVersionParams) SetOperatingSystemID(operatingSystemID strfmt.UUID) {
	o.OperatingSystemID = operatingSystemID
}

// WithOperatingSystemVersion adds the operatingSystemVersion to the add operating system version params
func (o *AddOperatingSystemVersionParams) WithOperatingSystemVersion(operatingSystemVersion *inventory_models.OperatingSystemVersionCore) *AddOperatingSystemVersionParams {
	o.SetOperatingSystemVersion(operatingSystemVersion)
	return o
}

// SetOperatingSystemVersion adds the operatingSystemVersion to the add operating system version params
func (o *AddOperatingSystemVersionParams) SetOperatingSystemVersion(operatingSystemVersion *inventory_models.OperatingSystemVersionCore) {
	o.OperatingSystemVersion = operatingSystemVersion
}

// WriteToRequest writes these params to a swagger request
func (o *AddOperatingSystemVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param operating_system_id
	if err := r.SetPathParam("operating_system_id", o.OperatingSystemID.String()); err != nil {
		return err
	}
	if o.OperatingSystemVersion != nil {
		if err := r.SetBodyParam(o.OperatingSystemVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
