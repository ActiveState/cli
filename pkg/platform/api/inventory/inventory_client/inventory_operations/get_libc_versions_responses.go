// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// GetLibcVersionsReader is a Reader for the GetLibcVersions structure.
type GetLibcVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLibcVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLibcVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetLibcVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLibcVersionsOK creates a GetLibcVersionsOK with default headers values
func NewGetLibcVersionsOK() *GetLibcVersionsOK {
	return &GetLibcVersionsOK{}
}

/* GetLibcVersionsOK describes a response with status code 200, with default header values.

A paginated list of libc versions
*/
type GetLibcVersionsOK struct {
	Payload *inventory_models.LibcVersionPagedList
}

func (o *GetLibcVersionsOK) Error() string {
	return fmt.Sprintf("[GET /v1/libcs/{libc_id}/versions][%d] getLibcVersionsOK  %+v", 200, o.Payload)
}
func (o *GetLibcVersionsOK) GetPayload() *inventory_models.LibcVersionPagedList {
	return o.Payload
}

func (o *GetLibcVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.LibcVersionPagedList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLibcVersionsDefault creates a GetLibcVersionsDefault with default headers values
func NewGetLibcVersionsDefault(code int) *GetLibcVersionsDefault {
	return &GetLibcVersionsDefault{
		_statusCode: code,
	}
}

/* GetLibcVersionsDefault describes a response with status code -1, with default header values.

generic error response
*/
type GetLibcVersionsDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the get libc versions default response
func (o *GetLibcVersionsDefault) Code() int {
	return o._statusCode
}

func (o *GetLibcVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/libcs/{libc_id}/versions][%d] getLibcVersions default  %+v", o._statusCode, o.Payload)
}
func (o *GetLibcVersionsDefault) GetPayload() *inventory_models.RestAPIError {
	return o.Payload
}

func (o *GetLibcVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
