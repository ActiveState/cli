// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIngredientOptionSetsParams creates a new GetIngredientOptionSetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIngredientOptionSetsParams() *GetIngredientOptionSetsParams {
	return &GetIngredientOptionSetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIngredientOptionSetsParamsWithTimeout creates a new GetIngredientOptionSetsParams object
// with the ability to set a timeout on a request.
func NewGetIngredientOptionSetsParamsWithTimeout(timeout time.Duration) *GetIngredientOptionSetsParams {
	return &GetIngredientOptionSetsParams{
		timeout: timeout,
	}
}

// NewGetIngredientOptionSetsParamsWithContext creates a new GetIngredientOptionSetsParams object
// with the ability to set a context for a request.
func NewGetIngredientOptionSetsParamsWithContext(ctx context.Context) *GetIngredientOptionSetsParams {
	return &GetIngredientOptionSetsParams{
		Context: ctx,
	}
}

// NewGetIngredientOptionSetsParamsWithHTTPClient creates a new GetIngredientOptionSetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIngredientOptionSetsParamsWithHTTPClient(client *http.Client) *GetIngredientOptionSetsParams {
	return &GetIngredientOptionSetsParams{
		HTTPClient: client,
	}
}

/* GetIngredientOptionSetsParams contains all the parameters to send to the API endpoint
   for the get ingredient option sets operation.

   Typically these are written to a http.Request.
*/
type GetIngredientOptionSetsParams struct {

	/* AllowUnstable.

	   Whether to show an unstable revision of a resource if there is an available unstable version newer than the newest available stable version
	*/
	AllowUnstable *bool

	/* Group.

	   Return only ingredient option sets in the named group (exact match only)
	*/
	Group *string

	/* Limit.

	   The maximum number of items returned per page

	   Default: 50
	*/
	Limit *int64

	/* Page.

	   The page number returned

	   Default: 1
	*/
	Page *int64

	/* StateAt.

	   Show the state of a resource as it was at the specified timestamp. If omitted, shows the current state of the resource.

	   Format: date-time
	*/
	StateAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ingredient option sets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientOptionSetsParams) WithDefaults() *GetIngredientOptionSetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ingredient option sets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientOptionSetsParams) SetDefaults() {
	var (
		allowUnstableDefault = bool(false)

		limitDefault = int64(50)

		pageDefault = int64(1)
	)

	val := GetIngredientOptionSetsParams{
		AllowUnstable: &allowUnstableDefault,
		Limit:         &limitDefault,
		Page:          &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithTimeout(timeout time.Duration) *GetIngredientOptionSetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithContext(ctx context.Context) *GetIngredientOptionSetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithHTTPClient(client *http.Client) *GetIngredientOptionSetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowUnstable adds the allowUnstable to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithAllowUnstable(allowUnstable *bool) *GetIngredientOptionSetsParams {
	o.SetAllowUnstable(allowUnstable)
	return o
}

// SetAllowUnstable adds the allowUnstable to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetAllowUnstable(allowUnstable *bool) {
	o.AllowUnstable = allowUnstable
}

// WithGroup adds the group to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithGroup(group *string) *GetIngredientOptionSetsParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetGroup(group *string) {
	o.Group = group
}

// WithLimit adds the limit to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithLimit(limit *int64) *GetIngredientOptionSetsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPage adds the page to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithPage(page *int64) *GetIngredientOptionSetsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetPage(page *int64) {
	o.Page = page
}

// WithStateAt adds the stateAt to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) WithStateAt(stateAt *strfmt.DateTime) *GetIngredientOptionSetsParams {
	o.SetStateAt(stateAt)
	return o
}

// SetStateAt adds the stateAt to the get ingredient option sets params
func (o *GetIngredientOptionSetsParams) SetStateAt(stateAt *strfmt.DateTime) {
	o.StateAt = stateAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetIngredientOptionSetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowUnstable != nil {

		// query param allow_unstable
		var qrAllowUnstable bool

		if o.AllowUnstable != nil {
			qrAllowUnstable = *o.AllowUnstable
		}
		qAllowUnstable := swag.FormatBool(qrAllowUnstable)
		if qAllowUnstable != "" {

			if err := r.SetQueryParam("allow_unstable", qAllowUnstable); err != nil {
				return err
			}
		}
	}

	if o.Group != nil {

		// query param group
		var qrGroup string

		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {

			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.StateAt != nil {

		// query param state_at
		var qrStateAt strfmt.DateTime

		if o.StateAt != nil {
			qrStateAt = *o.StateAt
		}
		qStateAt := qrStateAt.String()
		if qStateAt != "" {

			if err := r.SetQueryParam("state_at", qStateAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
