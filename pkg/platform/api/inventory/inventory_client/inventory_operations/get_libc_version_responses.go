// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// GetLibcVersionReader is a Reader for the GetLibcVersion structure.
type GetLibcVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLibcVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLibcVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetLibcVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLibcVersionOK creates a GetLibcVersionOK with default headers values
func NewGetLibcVersionOK() *GetLibcVersionOK {
	return &GetLibcVersionOK{}
}

/* GetLibcVersionOK describes a response with status code 200, with default header values.

The retrieved libc version
*/
type GetLibcVersionOK struct {
	Payload *inventory_models.LibcVersion
}

func (o *GetLibcVersionOK) Error() string {
	return fmt.Sprintf("[GET /v1/libcs/{libc_id}/versions/{libc_version_id}][%d] getLibcVersionOK  %+v", 200, o.Payload)
}
func (o *GetLibcVersionOK) GetPayload() *inventory_models.LibcVersion {
	return o.Payload
}

func (o *GetLibcVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.LibcVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLibcVersionDefault creates a GetLibcVersionDefault with default headers values
func NewGetLibcVersionDefault(code int) *GetLibcVersionDefault {
	return &GetLibcVersionDefault{
		_statusCode: code,
	}
}

/* GetLibcVersionDefault describes a response with status code -1, with default header values.

generic error response
*/
type GetLibcVersionDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the get libc version default response
func (o *GetLibcVersionDefault) Code() int {
	return o._statusCode
}

func (o *GetLibcVersionDefault) Error() string {
	return fmt.Sprintf("[GET /v1/libcs/{libc_id}/versions/{libc_version_id}][%d] getLibcVersion default  %+v", o._statusCode, o.Payload)
}
func (o *GetLibcVersionDefault) GetPayload() *inventory_models.RestAPIError {
	return o.Payload
}

func (o *GetLibcVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
