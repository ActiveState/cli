// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNamespaceIngredientVersionParams creates a new GetNamespaceIngredientVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNamespaceIngredientVersionParams() *GetNamespaceIngredientVersionParams {
	return &GetNamespaceIngredientVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNamespaceIngredientVersionParamsWithTimeout creates a new GetNamespaceIngredientVersionParams object
// with the ability to set a timeout on a request.
func NewGetNamespaceIngredientVersionParamsWithTimeout(timeout time.Duration) *GetNamespaceIngredientVersionParams {
	return &GetNamespaceIngredientVersionParams{
		timeout: timeout,
	}
}

// NewGetNamespaceIngredientVersionParamsWithContext creates a new GetNamespaceIngredientVersionParams object
// with the ability to set a context for a request.
func NewGetNamespaceIngredientVersionParamsWithContext(ctx context.Context) *GetNamespaceIngredientVersionParams {
	return &GetNamespaceIngredientVersionParams{
		Context: ctx,
	}
}

// NewGetNamespaceIngredientVersionParamsWithHTTPClient creates a new GetNamespaceIngredientVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNamespaceIngredientVersionParamsWithHTTPClient(client *http.Client) *GetNamespaceIngredientVersionParams {
	return &GetNamespaceIngredientVersionParams{
		HTTPClient: client,
	}
}

/* GetNamespaceIngredientVersionParams contains all the parameters to send to the API endpoint
   for the get namespace ingredient version operation.

   Typically these are written to a http.Request.
*/
type GetNamespaceIngredientVersionParams struct {

	/* AllowUnstable.

	   Whether to show an unstable revision of a resource if there is an available unstable version newer than the newest available stable version
	*/
	AllowUnstable *bool

	// Name.
	Name string

	// Namespace.
	Namespace string

	/* StateAt.

	   Show the state of a resource as it was at the specified timestamp. If omitted, shows the current state of the resource.

	   Format: date-time
	*/
	StateAt *strfmt.DateTime

	// Version.
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get namespace ingredient version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNamespaceIngredientVersionParams) WithDefaults() *GetNamespaceIngredientVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get namespace ingredient version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNamespaceIngredientVersionParams) SetDefaults() {
	var (
		allowUnstableDefault = bool(false)
	)

	val := GetNamespaceIngredientVersionParams{
		AllowUnstable: &allowUnstableDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithTimeout(timeout time.Duration) *GetNamespaceIngredientVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithContext(ctx context.Context) *GetNamespaceIngredientVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithHTTPClient(client *http.Client) *GetNamespaceIngredientVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowUnstable adds the allowUnstable to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithAllowUnstable(allowUnstable *bool) *GetNamespaceIngredientVersionParams {
	o.SetAllowUnstable(allowUnstable)
	return o
}

// SetAllowUnstable adds the allowUnstable to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetAllowUnstable(allowUnstable *bool) {
	o.AllowUnstable = allowUnstable
}

// WithName adds the name to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithName(name string) *GetNamespaceIngredientVersionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithNamespace(namespace string) *GetNamespaceIngredientVersionParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithStateAt adds the stateAt to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithStateAt(stateAt *strfmt.DateTime) *GetNamespaceIngredientVersionParams {
	o.SetStateAt(stateAt)
	return o
}

// SetStateAt adds the stateAt to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetStateAt(stateAt *strfmt.DateTime) {
	o.StateAt = stateAt
}

// WithVersion adds the version to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) WithVersion(version string) *GetNamespaceIngredientVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get namespace ingredient version params
func (o *GetNamespaceIngredientVersionParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetNamespaceIngredientVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowUnstable != nil {

		// query param allow_unstable
		var qrAllowUnstable bool

		if o.AllowUnstable != nil {
			qrAllowUnstable = *o.AllowUnstable
		}
		qAllowUnstable := swag.FormatBool(qrAllowUnstable)
		if qAllowUnstable != "" {

			if err := r.SetQueryParam("allow_unstable", qAllowUnstable); err != nil {
				return err
			}
		}
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {

		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	// query param namespace
	qrNamespace := o.Namespace
	qNamespace := qrNamespace
	if qNamespace != "" {

		if err := r.SetQueryParam("namespace", qNamespace); err != nil {
			return err
		}
	}

	if o.StateAt != nil {

		// query param state_at
		var qrStateAt strfmt.DateTime

		if o.StateAt != nil {
			qrStateAt = *o.StateAt
		}
		qStateAt := qrStateAt.String()
		if qStateAt != "" {

			if err := r.SetQueryParam("state_at", qStateAt); err != nil {
				return err
			}
		}
	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {

		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
