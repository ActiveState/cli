// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewUpdateBuildScriptParams creates a new UpdateBuildScriptParams object
// with the default values initialized.
func NewUpdateBuildScriptParams() *UpdateBuildScriptParams {
	var ()
	return &UpdateBuildScriptParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateBuildScriptParamsWithTimeout creates a new UpdateBuildScriptParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateBuildScriptParamsWithTimeout(timeout time.Duration) *UpdateBuildScriptParams {
	var ()
	return &UpdateBuildScriptParams{

		timeout: timeout,
	}
}

// NewUpdateBuildScriptParamsWithContext creates a new UpdateBuildScriptParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateBuildScriptParamsWithContext(ctx context.Context) *UpdateBuildScriptParams {
	var ()
	return &UpdateBuildScriptParams{

		Context: ctx,
	}
}

// NewUpdateBuildScriptParamsWithHTTPClient creates a new UpdateBuildScriptParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateBuildScriptParamsWithHTTPClient(client *http.Client) *UpdateBuildScriptParams {
	var ()
	return &UpdateBuildScriptParams{
		HTTPClient: client,
	}
}

/*UpdateBuildScriptParams contains all the parameters to send to the API endpoint
for the update build script operation typically these are written to a http.Request
*/
type UpdateBuildScriptParams struct {

	/*BuildScript*/
	BuildScript *inventory_models.V1BuildScriptCore
	/*BuildScriptID*/
	BuildScriptID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update build script params
func (o *UpdateBuildScriptParams) WithTimeout(timeout time.Duration) *UpdateBuildScriptParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update build script params
func (o *UpdateBuildScriptParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update build script params
func (o *UpdateBuildScriptParams) WithContext(ctx context.Context) *UpdateBuildScriptParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update build script params
func (o *UpdateBuildScriptParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update build script params
func (o *UpdateBuildScriptParams) WithHTTPClient(client *http.Client) *UpdateBuildScriptParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update build script params
func (o *UpdateBuildScriptParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuildScript adds the buildScript to the update build script params
func (o *UpdateBuildScriptParams) WithBuildScript(buildScript *inventory_models.V1BuildScriptCore) *UpdateBuildScriptParams {
	o.SetBuildScript(buildScript)
	return o
}

// SetBuildScript adds the buildScript to the update build script params
func (o *UpdateBuildScriptParams) SetBuildScript(buildScript *inventory_models.V1BuildScriptCore) {
	o.BuildScript = buildScript
}

// WithBuildScriptID adds the buildScriptID to the update build script params
func (o *UpdateBuildScriptParams) WithBuildScriptID(buildScriptID strfmt.UUID) *UpdateBuildScriptParams {
	o.SetBuildScriptID(buildScriptID)
	return o
}

// SetBuildScriptID adds the buildScriptId to the update build script params
func (o *UpdateBuildScriptParams) SetBuildScriptID(buildScriptID strfmt.UUID) {
	o.BuildScriptID = buildScriptID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateBuildScriptParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BuildScript != nil {
		if err := r.SetBodyParam(o.BuildScript); err != nil {
			return err
		}
	}

	// path param build_script_id
	if err := r.SetPathParam("build_script_id", o.BuildScriptID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
