// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// ValidateRecipeReader is a Reader for the ValidateRecipe structure.
type ValidateRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateRecipeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateRecipeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewValidateRecipeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValidateRecipeOK creates a ValidateRecipeOK with default headers values
func NewValidateRecipeOK() *ValidateRecipeOK {
	return &ValidateRecipeOK{}
}

/* ValidateRecipeOK describes a response with status code 200, with default header values.

If there are no errors, then there is no body in the response.
*/
type ValidateRecipeOK struct {
}

func (o *ValidateRecipeOK) Error() string {
	return fmt.Sprintf("[POST /v1/recipes/validation][%d] validateRecipeOK ", 200)
}

func (o *ValidateRecipeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateRecipeBadRequest creates a ValidateRecipeBadRequest with default headers values
func NewValidateRecipeBadRequest() *ValidateRecipeBadRequest {
	return &ValidateRecipeBadRequest{}
}

/* ValidateRecipeBadRequest describes a response with status code 400, with default header values.

If the recipe is invalid, this contains information about its errors.
*/
type ValidateRecipeBadRequest struct {
	Payload *inventory_models.RecipeValidationError
}

func (o *ValidateRecipeBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/recipes/validation][%d] validateRecipeBadRequest  %+v", 400, o.Payload)
}
func (o *ValidateRecipeBadRequest) GetPayload() *inventory_models.RecipeValidationError {
	return o.Payload
}

func (o *ValidateRecipeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RecipeValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateRecipeDefault creates a ValidateRecipeDefault with default headers values
func NewValidateRecipeDefault(code int) *ValidateRecipeDefault {
	return &ValidateRecipeDefault{
		_statusCode: code,
	}
}

/* ValidateRecipeDefault describes a response with status code -1, with default header values.

If there is an error processing the order
*/
type ValidateRecipeDefault struct {
	_statusCode int

	Payload *inventory_models.SolverError
}

// Code gets the status code for the validate recipe default response
func (o *ValidateRecipeDefault) Code() int {
	return o._statusCode
}

func (o *ValidateRecipeDefault) Error() string {
	return fmt.Sprintf("[POST /v1/recipes/validation][%d] validateRecipe default  %+v", o._statusCode, o.Payload)
}
func (o *ValidateRecipeDefault) GetPayload() *inventory_models.SolverError {
	return o.Payload
}

func (o *ValidateRecipeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.SolverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
