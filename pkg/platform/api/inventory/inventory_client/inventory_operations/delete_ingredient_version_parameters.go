// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteIngredientVersionParams creates a new DeleteIngredientVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteIngredientVersionParams() *DeleteIngredientVersionParams {
	return &DeleteIngredientVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteIngredientVersionParamsWithTimeout creates a new DeleteIngredientVersionParams object
// with the ability to set a timeout on a request.
func NewDeleteIngredientVersionParamsWithTimeout(timeout time.Duration) *DeleteIngredientVersionParams {
	return &DeleteIngredientVersionParams{
		timeout: timeout,
	}
}

// NewDeleteIngredientVersionParamsWithContext creates a new DeleteIngredientVersionParams object
// with the ability to set a context for a request.
func NewDeleteIngredientVersionParamsWithContext(ctx context.Context) *DeleteIngredientVersionParams {
	return &DeleteIngredientVersionParams{
		Context: ctx,
	}
}

// NewDeleteIngredientVersionParamsWithHTTPClient creates a new DeleteIngredientVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteIngredientVersionParamsWithHTTPClient(client *http.Client) *DeleteIngredientVersionParams {
	return &DeleteIngredientVersionParams{
		HTTPClient: client,
	}
}

/* DeleteIngredientVersionParams contains all the parameters to send to the API endpoint
   for the delete ingredient version operation.

   Typically these are written to a http.Request.
*/
type DeleteIngredientVersionParams struct {

	// Comment.
	Comment string

	// IngredientID.
	//
	// Format: uuid
	IngredientID strfmt.UUID

	// IngredientVersionID.
	//
	// Format: uuid
	IngredientVersionID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete ingredient version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIngredientVersionParams) WithDefaults() *DeleteIngredientVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete ingredient version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIngredientVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithTimeout(timeout time.Duration) *DeleteIngredientVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithContext(ctx context.Context) *DeleteIngredientVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithHTTPClient(client *http.Client) *DeleteIngredientVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithComment(comment string) *DeleteIngredientVersionParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetComment(comment string) {
	o.Comment = comment
}

// WithIngredientID adds the ingredientID to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithIngredientID(ingredientID strfmt.UUID) *DeleteIngredientVersionParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetIngredientID(ingredientID strfmt.UUID) {
	o.IngredientID = ingredientID
}

// WithIngredientVersionID adds the ingredientVersionID to the delete ingredient version params
func (o *DeleteIngredientVersionParams) WithIngredientVersionID(ingredientVersionID strfmt.UUID) *DeleteIngredientVersionParams {
	o.SetIngredientVersionID(ingredientVersionID)
	return o
}

// SetIngredientVersionID adds the ingredientVersionId to the delete ingredient version params
func (o *DeleteIngredientVersionParams) SetIngredientVersionID(ingredientVersionID strfmt.UUID) {
	o.IngredientVersionID = ingredientVersionID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteIngredientVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param comment
	qrComment := o.Comment
	qComment := qrComment
	if qComment != "" {

		if err := r.SetQueryParam("comment", qComment); err != nil {
			return err
		}
	}

	// path param ingredient_id
	if err := r.SetPathParam("ingredient_id", o.IngredientID.String()); err != nil {
		return err
	}

	// path param ingredient_version_id
	if err := r.SetPathParam("ingredient_version_id", o.IngredientVersionID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
