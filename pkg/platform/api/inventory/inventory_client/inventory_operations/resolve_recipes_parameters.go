// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewResolveRecipesParams creates a new ResolveRecipesParams object
// with the default values initialized.
func NewResolveRecipesParams() *ResolveRecipesParams {
	var (
		returnDevelopmentSolverRecipesDefault = bool(false)
		useRecipeStoreDefault                 = bool(true)
	)
	return &ResolveRecipesParams{
		ReturnDevelopmentSolverRecipes: &returnDevelopmentSolverRecipesDefault,
		UseRecipeStore:                 &useRecipeStoreDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewResolveRecipesParamsWithTimeout creates a new ResolveRecipesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResolveRecipesParamsWithTimeout(timeout time.Duration) *ResolveRecipesParams {
	var (
		returnDevelopmentSolverRecipesDefault = bool(false)
		useRecipeStoreDefault                 = bool(true)
	)
	return &ResolveRecipesParams{
		ReturnDevelopmentSolverRecipes: &returnDevelopmentSolverRecipesDefault,
		UseRecipeStore:                 &useRecipeStoreDefault,

		timeout: timeout,
	}
}

// NewResolveRecipesParamsWithContext creates a new ResolveRecipesParams object
// with the default values initialized, and the ability to set a context for a request
func NewResolveRecipesParamsWithContext(ctx context.Context) *ResolveRecipesParams {
	var (
		returnDevelopmentSolverRecipesDefault = bool(false)
		useRecipeStoreDefault                 = bool(true)
	)
	return &ResolveRecipesParams{
		ReturnDevelopmentSolverRecipes: &returnDevelopmentSolverRecipesDefault,
		UseRecipeStore:                 &useRecipeStoreDefault,

		Context: ctx,
	}
}

// NewResolveRecipesParamsWithHTTPClient creates a new ResolveRecipesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResolveRecipesParamsWithHTTPClient(client *http.Client) *ResolveRecipesParams {
	var (
		returnDevelopmentSolverRecipesDefault = bool(false)
		useRecipeStoreDefault                 = bool(true)
	)
	return &ResolveRecipesParams{
		ReturnDevelopmentSolverRecipes: &returnDevelopmentSolverRecipesDefault,
		UseRecipeStore:                 &useRecipeStoreDefault,
		HTTPClient:                     client,
	}
}

/*ResolveRecipesParams contains all the parameters to send to the API endpoint
for the resolve recipes operation typically these are written to a http.Request
*/
type ResolveRecipesParams struct {

	/*Order*/
	Order *inventory_models.V1Order
	/*OrganizationID
	  Include ingredient information for private ingredients belong to this organization. The requesting user must be a member of the relevant organization.

	*/
	OrganizationID *string
	/*ReturnDevelopmentSolverRecipes
	  This can be used to request that the results be based on the development version of the solver, rather than the default solver. This is just present for debugging new solvers, and you should not write production code that relies on this parameter continuing to exist.

	*/
	ReturnDevelopmentSolverRecipes *bool
	/*UseRecipeStore
	  Whether to check if this order has already been solved and retrieve the result from the recipe store or, if false, to force the order to be solved anew

	*/
	UseRecipeStore *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resolve recipes params
func (o *ResolveRecipesParams) WithTimeout(timeout time.Duration) *ResolveRecipesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve recipes params
func (o *ResolveRecipesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve recipes params
func (o *ResolveRecipesParams) WithContext(ctx context.Context) *ResolveRecipesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve recipes params
func (o *ResolveRecipesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve recipes params
func (o *ResolveRecipesParams) WithHTTPClient(client *http.Client) *ResolveRecipesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve recipes params
func (o *ResolveRecipesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrder adds the order to the resolve recipes params
func (o *ResolveRecipesParams) WithOrder(order *inventory_models.V1Order) *ResolveRecipesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the resolve recipes params
func (o *ResolveRecipesParams) SetOrder(order *inventory_models.V1Order) {
	o.Order = order
}

// WithOrganizationID adds the organizationID to the resolve recipes params
func (o *ResolveRecipesParams) WithOrganizationID(organizationID *string) *ResolveRecipesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the resolve recipes params
func (o *ResolveRecipesParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithReturnDevelopmentSolverRecipes adds the returnDevelopmentSolverRecipes to the resolve recipes params
func (o *ResolveRecipesParams) WithReturnDevelopmentSolverRecipes(returnDevelopmentSolverRecipes *bool) *ResolveRecipesParams {
	o.SetReturnDevelopmentSolverRecipes(returnDevelopmentSolverRecipes)
	return o
}

// SetReturnDevelopmentSolverRecipes adds the returnDevelopmentSolverRecipes to the resolve recipes params
func (o *ResolveRecipesParams) SetReturnDevelopmentSolverRecipes(returnDevelopmentSolverRecipes *bool) {
	o.ReturnDevelopmentSolverRecipes = returnDevelopmentSolverRecipes
}

// WithUseRecipeStore adds the useRecipeStore to the resolve recipes params
func (o *ResolveRecipesParams) WithUseRecipeStore(useRecipeStore *bool) *ResolveRecipesParams {
	o.SetUseRecipeStore(useRecipeStore)
	return o
}

// SetUseRecipeStore adds the useRecipeStore to the resolve recipes params
func (o *ResolveRecipesParams) SetUseRecipeStore(useRecipeStore *bool) {
	o.UseRecipeStore = useRecipeStore
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveRecipesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Order != nil {
		if err := r.SetBodyParam(o.Order); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.ReturnDevelopmentSolverRecipes != nil {

		// query param return_development_solver_recipes
		var qrReturnDevelopmentSolverRecipes bool
		if o.ReturnDevelopmentSolverRecipes != nil {
			qrReturnDevelopmentSolverRecipes = *o.ReturnDevelopmentSolverRecipes
		}
		qReturnDevelopmentSolverRecipes := swag.FormatBool(qrReturnDevelopmentSolverRecipes)
		if qReturnDevelopmentSolverRecipes != "" {
			if err := r.SetQueryParam("return_development_solver_recipes", qReturnDevelopmentSolverRecipes); err != nil {
				return err
			}
		}

	}

	if o.UseRecipeStore != nil {

		// query param use_recipe_store
		var qrUseRecipeStore bool
		if o.UseRecipeStore != nil {
			qrUseRecipeStore = *o.UseRecipeStore
		}
		qUseRecipeStore := swag.FormatBool(qrUseRecipeStore)
		if qUseRecipeStore != "" {
			if err := r.SetQueryParam("use_recipe_store", qUseRecipeStore); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
