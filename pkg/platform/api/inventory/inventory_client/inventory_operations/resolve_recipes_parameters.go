// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewResolveRecipesParams creates a new ResolveRecipesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewResolveRecipesParams() *ResolveRecipesParams {
	return &ResolveRecipesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewResolveRecipesParamsWithTimeout creates a new ResolveRecipesParams object
// with the ability to set a timeout on a request.
func NewResolveRecipesParamsWithTimeout(timeout time.Duration) *ResolveRecipesParams {
	return &ResolveRecipesParams{
		timeout: timeout,
	}
}

// NewResolveRecipesParamsWithContext creates a new ResolveRecipesParams object
// with the ability to set a context for a request.
func NewResolveRecipesParamsWithContext(ctx context.Context) *ResolveRecipesParams {
	return &ResolveRecipesParams{
		Context: ctx,
	}
}

// NewResolveRecipesParamsWithHTTPClient creates a new ResolveRecipesParams object
// with the ability to set a custom HTTPClient for a request.
func NewResolveRecipesParamsWithHTTPClient(client *http.Client) *ResolveRecipesParams {
	return &ResolveRecipesParams{
		HTTPClient: client,
	}
}

/* ResolveRecipesParams contains all the parameters to send to the API endpoint
   for the resolve recipes operation.

   Typically these are written to a http.Request.
*/
type ResolveRecipesParams struct {

	// Order.
	Order *inventory_models.Order

	/* UseRecipeStore.

	   Whether to check if this order has already been solved and retrieve the result from the recipe store or, if false, to force the order to be solved anew

	   Default: true
	*/
	UseRecipeStore *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the resolve recipes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResolveRecipesParams) WithDefaults() *ResolveRecipesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the resolve recipes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResolveRecipesParams) SetDefaults() {
	var (
		useRecipeStoreDefault = bool(true)
	)

	val := ResolveRecipesParams{
		UseRecipeStore: &useRecipeStoreDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the resolve recipes params
func (o *ResolveRecipesParams) WithTimeout(timeout time.Duration) *ResolveRecipesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve recipes params
func (o *ResolveRecipesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve recipes params
func (o *ResolveRecipesParams) WithContext(ctx context.Context) *ResolveRecipesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve recipes params
func (o *ResolveRecipesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve recipes params
func (o *ResolveRecipesParams) WithHTTPClient(client *http.Client) *ResolveRecipesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve recipes params
func (o *ResolveRecipesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrder adds the order to the resolve recipes params
func (o *ResolveRecipesParams) WithOrder(order *inventory_models.Order) *ResolveRecipesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the resolve recipes params
func (o *ResolveRecipesParams) SetOrder(order *inventory_models.Order) {
	o.Order = order
}

// WithUseRecipeStore adds the useRecipeStore to the resolve recipes params
func (o *ResolveRecipesParams) WithUseRecipeStore(useRecipeStore *bool) *ResolveRecipesParams {
	o.SetUseRecipeStore(useRecipeStore)
	return o
}

// SetUseRecipeStore adds the useRecipeStore to the resolve recipes params
func (o *ResolveRecipesParams) SetUseRecipeStore(useRecipeStore *bool) {
	o.UseRecipeStore = useRecipeStore
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveRecipesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Order != nil {
		if err := r.SetBodyParam(o.Order); err != nil {
			return err
		}
	}

	if o.UseRecipeStore != nil {

		// query param use_recipe_store
		var qrUseRecipeStore bool

		if o.UseRecipeStore != nil {
			qrUseRecipeStore = *o.UseRecipeStore
		}
		qUseRecipeStore := swag.FormatBool(qrUseRecipeStore)
		if qUseRecipeStore != "" {

			if err := r.SetQueryParam("use_recipe_store", qUseRecipeStore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
