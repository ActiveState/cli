// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIngredientVersionAuthorsParams creates a new GetIngredientVersionAuthorsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIngredientVersionAuthorsParams() *GetIngredientVersionAuthorsParams {
	return &GetIngredientVersionAuthorsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIngredientVersionAuthorsParamsWithTimeout creates a new GetIngredientVersionAuthorsParams object
// with the ability to set a timeout on a request.
func NewGetIngredientVersionAuthorsParamsWithTimeout(timeout time.Duration) *GetIngredientVersionAuthorsParams {
	return &GetIngredientVersionAuthorsParams{
		timeout: timeout,
	}
}

// NewGetIngredientVersionAuthorsParamsWithContext creates a new GetIngredientVersionAuthorsParams object
// with the ability to set a context for a request.
func NewGetIngredientVersionAuthorsParamsWithContext(ctx context.Context) *GetIngredientVersionAuthorsParams {
	return &GetIngredientVersionAuthorsParams{
		Context: ctx,
	}
}

// NewGetIngredientVersionAuthorsParamsWithHTTPClient creates a new GetIngredientVersionAuthorsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIngredientVersionAuthorsParamsWithHTTPClient(client *http.Client) *GetIngredientVersionAuthorsParams {
	return &GetIngredientVersionAuthorsParams{
		HTTPClient: client,
	}
}

/* GetIngredientVersionAuthorsParams contains all the parameters to send to the API endpoint
   for the get ingredient version authors operation.

   Typically these are written to a http.Request.
*/
type GetIngredientVersionAuthorsParams struct {

	// IngredientID.
	//
	// Format: uuid
	IngredientID strfmt.UUID

	// IngredientVersionID.
	//
	// Format: uuid
	IngredientVersionID strfmt.UUID

	/* Limit.

	   The maximum number of items returned per page

	   Default: 50
	*/
	Limit *int64

	/* Page.

	   The page number returned

	   Default: 1
	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ingredient version authors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientVersionAuthorsParams) WithDefaults() *GetIngredientVersionAuthorsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ingredient version authors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientVersionAuthorsParams) SetDefaults() {
	var (
		limitDefault = int64(50)

		pageDefault = int64(1)
	)

	val := GetIngredientVersionAuthorsParams{
		Limit: &limitDefault,
		Page:  &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithTimeout(timeout time.Duration) *GetIngredientVersionAuthorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithContext(ctx context.Context) *GetIngredientVersionAuthorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithHTTPClient(client *http.Client) *GetIngredientVersionAuthorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithIngredientID(ingredientID strfmt.UUID) *GetIngredientVersionAuthorsParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetIngredientID(ingredientID strfmt.UUID) {
	o.IngredientID = ingredientID
}

// WithIngredientVersionID adds the ingredientVersionID to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithIngredientVersionID(ingredientVersionID strfmt.UUID) *GetIngredientVersionAuthorsParams {
	o.SetIngredientVersionID(ingredientVersionID)
	return o
}

// SetIngredientVersionID adds the ingredientVersionId to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetIngredientVersionID(ingredientVersionID strfmt.UUID) {
	o.IngredientVersionID = ingredientVersionID
}

// WithLimit adds the limit to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithLimit(limit *int64) *GetIngredientVersionAuthorsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPage adds the page to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) WithPage(page *int64) *GetIngredientVersionAuthorsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get ingredient version authors params
func (o *GetIngredientVersionAuthorsParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetIngredientVersionAuthorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient_id
	if err := r.SetPathParam("ingredient_id", o.IngredientID.String()); err != nil {
		return err
	}

	// path param ingredient_version_id
	if err := r.SetPathParam("ingredient_version_id", o.IngredientVersionID.String()); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
