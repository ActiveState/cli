// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// AddLibcReader is a Reader for the AddLibc structure.
type AddLibcReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddLibcReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddLibcCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddLibcBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAddLibcDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddLibcCreated creates a AddLibcCreated with default headers values
func NewAddLibcCreated() *AddLibcCreated {
	return &AddLibcCreated{}
}

/* AddLibcCreated describes a response with status code 201, with default header values.

The added libc
*/
type AddLibcCreated struct {
	Payload *inventory_models.Libc
}

func (o *AddLibcCreated) Error() string {
	return fmt.Sprintf("[POST /v1/libcs][%d] addLibcCreated  %+v", 201, o.Payload)
}
func (o *AddLibcCreated) GetPayload() *inventory_models.Libc {
	return o.Payload
}

func (o *AddLibcCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.Libc)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddLibcBadRequest creates a AddLibcBadRequest with default headers values
func NewAddLibcBadRequest() *AddLibcBadRequest {
	return &AddLibcBadRequest{}
}

/* AddLibcBadRequest describes a response with status code 400, with default header values.

If the libc is invalid
*/
type AddLibcBadRequest struct {
	Payload *inventory_models.RestAPIValidationError
}

func (o *AddLibcBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/libcs][%d] addLibcBadRequest  %+v", 400, o.Payload)
}
func (o *AddLibcBadRequest) GetPayload() *inventory_models.RestAPIValidationError {
	return o.Payload
}

func (o *AddLibcBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddLibcDefault creates a AddLibcDefault with default headers values
func NewAddLibcDefault(code int) *AddLibcDefault {
	return &AddLibcDefault{
		_statusCode: code,
	}
}

/* AddLibcDefault describes a response with status code -1, with default header values.

If there is an error processing the request
*/
type AddLibcDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the add libc default response
func (o *AddLibcDefault) Code() int {
	return o._statusCode
}

func (o *AddLibcDefault) Error() string {
	return fmt.Sprintf("[POST /v1/libcs][%d] addLibc default  %+v", o._statusCode, o.Payload)
}
func (o *AddLibcDefault) GetPayload() *inventory_models.RestAPIError {
	return o.Payload
}

func (o *AddLibcDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
