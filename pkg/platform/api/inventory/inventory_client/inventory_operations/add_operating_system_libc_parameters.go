// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewAddOperatingSystemLibcParams creates a new AddOperatingSystemLibcParams object
// with the default values initialized.
func NewAddOperatingSystemLibcParams() *AddOperatingSystemLibcParams {
	var ()
	return &AddOperatingSystemLibcParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddOperatingSystemLibcParamsWithTimeout creates a new AddOperatingSystemLibcParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddOperatingSystemLibcParamsWithTimeout(timeout time.Duration) *AddOperatingSystemLibcParams {
	var ()
	return &AddOperatingSystemLibcParams{

		timeout: timeout,
	}
}

// NewAddOperatingSystemLibcParamsWithContext creates a new AddOperatingSystemLibcParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddOperatingSystemLibcParamsWithContext(ctx context.Context) *AddOperatingSystemLibcParams {
	var ()
	return &AddOperatingSystemLibcParams{

		Context: ctx,
	}
}

// NewAddOperatingSystemLibcParamsWithHTTPClient creates a new AddOperatingSystemLibcParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddOperatingSystemLibcParamsWithHTTPClient(client *http.Client) *AddOperatingSystemLibcParams {
	var ()
	return &AddOperatingSystemLibcParams{
		HTTPClient: client,
	}
}

/*AddOperatingSystemLibcParams contains all the parameters to send to the API endpoint
for the add operating system libc operation typically these are written to a http.Request
*/
type AddOperatingSystemLibcParams struct {

	/*LibcID*/
	LibcID *inventory_models.AddOperatingSystemLibcParamsBody
	/*OperatingSystemID*/
	OperatingSystemID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add operating system libc params
func (o *AddOperatingSystemLibcParams) WithTimeout(timeout time.Duration) *AddOperatingSystemLibcParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add operating system libc params
func (o *AddOperatingSystemLibcParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add operating system libc params
func (o *AddOperatingSystemLibcParams) WithContext(ctx context.Context) *AddOperatingSystemLibcParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add operating system libc params
func (o *AddOperatingSystemLibcParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add operating system libc params
func (o *AddOperatingSystemLibcParams) WithHTTPClient(client *http.Client) *AddOperatingSystemLibcParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add operating system libc params
func (o *AddOperatingSystemLibcParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLibcID adds the libcID to the add operating system libc params
func (o *AddOperatingSystemLibcParams) WithLibcID(libcID *inventory_models.AddOperatingSystemLibcParamsBody) *AddOperatingSystemLibcParams {
	o.SetLibcID(libcID)
	return o
}

// SetLibcID adds the libcId to the add operating system libc params
func (o *AddOperatingSystemLibcParams) SetLibcID(libcID *inventory_models.AddOperatingSystemLibcParamsBody) {
	o.LibcID = libcID
}

// WithOperatingSystemID adds the operatingSystemID to the add operating system libc params
func (o *AddOperatingSystemLibcParams) WithOperatingSystemID(operatingSystemID strfmt.UUID) *AddOperatingSystemLibcParams {
	o.SetOperatingSystemID(operatingSystemID)
	return o
}

// SetOperatingSystemID adds the operatingSystemId to the add operating system libc params
func (o *AddOperatingSystemLibcParams) SetOperatingSystemID(operatingSystemID strfmt.UUID) {
	o.OperatingSystemID = operatingSystemID
}

// WriteToRequest writes these params to a swagger request
func (o *AddOperatingSystemLibcParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LibcID != nil {
		if err := r.SetBodyParam(o.LibcID); err != nil {
			return err
		}
	}

	// path param operating_system_id
	if err := r.SetPathParam("operating_system_id", o.OperatingSystemID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
