// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// UpdateAuthorReader is a Reader for the UpdateAuthor structure.
type UpdateAuthorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAuthorDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAuthorOK creates a UpdateAuthorOK with default headers values
func NewUpdateAuthorOK() *UpdateAuthorOK {
	return &UpdateAuthorOK{}
}

/* UpdateAuthorOK describes a response with status code 200, with default header values.

Author updated
*/
type UpdateAuthorOK struct {
	Payload *inventory_models.Author
}

func (o *UpdateAuthorOK) Error() string {
	return fmt.Sprintf("[PUT /v1/authors/{author_id_or_email}][%d] updateAuthorOK  %+v", 200, o.Payload)
}
func (o *UpdateAuthorOK) GetPayload() *inventory_models.Author {
	return o.Payload
}

func (o *UpdateAuthorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.Author)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorBadRequest creates a UpdateAuthorBadRequest with default headers values
func NewUpdateAuthorBadRequest() *UpdateAuthorBadRequest {
	return &UpdateAuthorBadRequest{}
}

/* UpdateAuthorBadRequest describes a response with status code 400, with default header values.

If the author is invalid
*/
type UpdateAuthorBadRequest struct {
	Payload *inventory_models.RestAPIValidationError
}

func (o *UpdateAuthorBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/authors/{author_id_or_email}][%d] updateAuthorBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateAuthorBadRequest) GetPayload() *inventory_models.RestAPIValidationError {
	return o.Payload
}

func (o *UpdateAuthorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorDefault creates a UpdateAuthorDefault with default headers values
func NewUpdateAuthorDefault(code int) *UpdateAuthorDefault {
	return &UpdateAuthorDefault{
		_statusCode: code,
	}
}

/* UpdateAuthorDefault describes a response with status code -1, with default header values.

If there is an error processing the author
*/
type UpdateAuthorDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the update author default response
func (o *UpdateAuthorDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAuthorDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/authors/{author_id_or_email}][%d] updateAuthor default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateAuthorDefault) GetPayload() *inventory_models.RestAPIError {
	return o.Payload
}

func (o *UpdateAuthorDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
