// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIngredientVersionRevisionParams creates a new GetIngredientVersionRevisionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIngredientVersionRevisionParams() *GetIngredientVersionRevisionParams {
	return &GetIngredientVersionRevisionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIngredientVersionRevisionParamsWithTimeout creates a new GetIngredientVersionRevisionParams object
// with the ability to set a timeout on a request.
func NewGetIngredientVersionRevisionParamsWithTimeout(timeout time.Duration) *GetIngredientVersionRevisionParams {
	return &GetIngredientVersionRevisionParams{
		timeout: timeout,
	}
}

// NewGetIngredientVersionRevisionParamsWithContext creates a new GetIngredientVersionRevisionParams object
// with the ability to set a context for a request.
func NewGetIngredientVersionRevisionParamsWithContext(ctx context.Context) *GetIngredientVersionRevisionParams {
	return &GetIngredientVersionRevisionParams{
		Context: ctx,
	}
}

// NewGetIngredientVersionRevisionParamsWithHTTPClient creates a new GetIngredientVersionRevisionParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIngredientVersionRevisionParamsWithHTTPClient(client *http.Client) *GetIngredientVersionRevisionParams {
	return &GetIngredientVersionRevisionParams{
		HTTPClient: client,
	}
}

/* GetIngredientVersionRevisionParams contains all the parameters to send to the API endpoint
   for the get ingredient version revision operation.

   Typically these are written to a http.Request.
*/
type GetIngredientVersionRevisionParams struct {

	// IngredientID.
	//
	// Format: uuid
	IngredientID strfmt.UUID

	// IngredientVersionID.
	//
	// Format: uuid
	IngredientVersionID strfmt.UUID

	// Revision.
	Revision int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ingredient version revision params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientVersionRevisionParams) WithDefaults() *GetIngredientVersionRevisionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ingredient version revision params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIngredientVersionRevisionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithTimeout(timeout time.Duration) *GetIngredientVersionRevisionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithContext(ctx context.Context) *GetIngredientVersionRevisionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithHTTPClient(client *http.Client) *GetIngredientVersionRevisionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithIngredientID(ingredientID strfmt.UUID) *GetIngredientVersionRevisionParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetIngredientID(ingredientID strfmt.UUID) {
	o.IngredientID = ingredientID
}

// WithIngredientVersionID adds the ingredientVersionID to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithIngredientVersionID(ingredientVersionID strfmt.UUID) *GetIngredientVersionRevisionParams {
	o.SetIngredientVersionID(ingredientVersionID)
	return o
}

// SetIngredientVersionID adds the ingredientVersionId to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetIngredientVersionID(ingredientVersionID strfmt.UUID) {
	o.IngredientVersionID = ingredientVersionID
}

// WithRevision adds the revision to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) WithRevision(revision int64) *GetIngredientVersionRevisionParams {
	o.SetRevision(revision)
	return o
}

// SetRevision adds the revision to the get ingredient version revision params
func (o *GetIngredientVersionRevisionParams) SetRevision(revision int64) {
	o.Revision = revision
}

// WriteToRequest writes these params to a swagger request
func (o *GetIngredientVersionRevisionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient_id
	if err := r.SetPathParam("ingredient_id", o.IngredientID.String()); err != nil {
		return err
	}

	// path param ingredient_version_id
	if err := r.SetPathParam("ingredient_version_id", o.IngredientVersionID.String()); err != nil {
		return err
	}

	// path param revision
	if err := r.SetPathParam("revision", swag.FormatInt64(o.Revision)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
