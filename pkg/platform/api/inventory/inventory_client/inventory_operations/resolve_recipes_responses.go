// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// ResolveRecipesReader is a Reader for the ResolveRecipes structure.
type ResolveRecipesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResolveRecipesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewResolveRecipesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewResolveRecipesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewResolveRecipesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewResolveRecipesOK creates a ResolveRecipesOK with default headers values
func NewResolveRecipesOK() *ResolveRecipesOK {
	return &ResolveRecipesOK{}
}

/*ResolveRecipesOK handles this case with default header values.

Returns one or more recipes that fulfill the requirements of the order
*/
type ResolveRecipesOK struct {
	Payload *inventory_models.V1RecipeResponse
}

func (o *ResolveRecipesOK) Error() string {
	return fmt.Sprintf("[POST /v1/recipes][%d] resolveRecipesOK  %+v", 200, o.Payload)
}

func (o *ResolveRecipesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.V1RecipeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveRecipesBadRequest creates a ResolveRecipesBadRequest with default headers values
func NewResolveRecipesBadRequest() *ResolveRecipesBadRequest {
	return &ResolveRecipesBadRequest{}
}

/*ResolveRecipesBadRequest handles this case with default header values.

If the order is invalid
*/
type ResolveRecipesBadRequest struct {
	Payload *inventory_models.V1SolverValidationError
}

func (o *ResolveRecipesBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/recipes][%d] resolveRecipesBadRequest  %+v", 400, o.Payload)
}

func (o *ResolveRecipesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.V1SolverValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveRecipesDefault creates a ResolveRecipesDefault with default headers values
func NewResolveRecipesDefault(code int) *ResolveRecipesDefault {
	return &ResolveRecipesDefault{
		_statusCode: code,
	}
}

/*ResolveRecipesDefault handles this case with default header values.

If there is an error processing the order
*/
type ResolveRecipesDefault struct {
	_statusCode int

	Payload *inventory_models.V1SolverError
}

// Code gets the status code for the resolve recipes default response
func (o *ResolveRecipesDefault) Code() int {
	return o._statusCode
}

func (o *ResolveRecipesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/recipes][%d] resolveRecipes default  %+v", o._statusCode, o.Payload)
}

func (o *ResolveRecipesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.V1SolverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
