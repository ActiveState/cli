// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// UpdatePatchReader is a Reader for the UpdatePatch structure.
type UpdatePatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdatePatchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePatchOK creates a UpdatePatchOK with default headers values
func NewUpdatePatchOK() *UpdatePatchOK {
	return &UpdatePatchOK{}
}

/* UpdatePatchOK describes a response with status code 200, with default header values.

The updated patch
*/
type UpdatePatchOK struct {
	Payload *inventory_models.Patch
}

func (o *UpdatePatchOK) Error() string {
	return fmt.Sprintf("[PUT /v1/patches/{patch_id}][%d] updatePatchOK  %+v", 200, o.Payload)
}
func (o *UpdatePatchOK) GetPayload() *inventory_models.Patch {
	return o.Payload
}

func (o *UpdatePatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.Patch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePatchBadRequest creates a UpdatePatchBadRequest with default headers values
func NewUpdatePatchBadRequest() *UpdatePatchBadRequest {
	return &UpdatePatchBadRequest{}
}

/* UpdatePatchBadRequest describes a response with status code 400, with default header values.

If the patch update is invalid or the patch cannot be updated because it is in use by a stable ingredient version revision
*/
type UpdatePatchBadRequest struct {
	Payload *inventory_models.RestAPIValidationError
}

func (o *UpdatePatchBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/patches/{patch_id}][%d] updatePatchBadRequest  %+v", 400, o.Payload)
}
func (o *UpdatePatchBadRequest) GetPayload() *inventory_models.RestAPIValidationError {
	return o.Payload
}

func (o *UpdatePatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePatchDefault creates a UpdatePatchDefault with default headers values
func NewUpdatePatchDefault(code int) *UpdatePatchDefault {
	return &UpdatePatchDefault{
		_statusCode: code,
	}
}

/* UpdatePatchDefault describes a response with status code -1, with default header values.

If there is an error processing the request
*/
type UpdatePatchDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the update patch default response
func (o *UpdatePatchDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePatchDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/patches/{patch_id}][%d] updatePatch default  %+v", o._statusCode, o.Payload)
}
func (o *UpdatePatchDefault) GetPayload() *inventory_models.RestAPIError {
	return o.Payload
}

func (o *UpdatePatchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
