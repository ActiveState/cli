// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventory operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAuthor(params *AddAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAuthorCreated, error)

	AddBuildFlag(params *AddBuildFlagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildFlagCreated, error)

	AddBuildFlagRevision(params *AddBuildFlagRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildFlagRevisionOK, error)

	AddBuildScript(params *AddBuildScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildScriptCreated, error)

	AddCPUArchitecture(params *AddCPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureCreated, error)

	AddCPUArchitectureCPUExtension(params *AddCPUArchitectureCPUExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureCPUExtensionOK, error)

	AddCPUArchitectureRevision(params *AddCPUArchitectureRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureRevisionOK, error)

	AddCPUExtension(params *AddCPUExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUExtensionCreated, error)

	AddCPUExtensionRevision(params *AddCPUExtensionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUExtensionRevisionOK, error)

	AddGPUArchitecture(params *AddGPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGPUArchitectureCreated, error)

	AddGPUArchitectureRevision(params *AddGPUArchitectureRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGPUArchitectureRevisionOK, error)

	AddImage(params *AddImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddImageCreated, error)

	AddImageRevision(params *AddImageRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddImageRevisionOK, error)

	AddIngredient(params *AddIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientCreated, error)

	AddIngredientOptionSet(params *AddIngredientOptionSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientOptionSetCreated, error)

	AddIngredientOptionSetRevision(params *AddIngredientOptionSetRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientOptionSetRevisionOK, error)

	AddIngredientVersion(params *AddIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionCreated, error)

	AddIngredientVersionAuthor(params *AddIngredientVersionAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionAuthorOK, error)

	AddIngredientVersionRevision(params *AddIngredientVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionRevisionOK, error)

	AddKernel(params *AddKernelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelCreated, error)

	AddKernelCPUArchitecture(params *AddKernelCPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelCPUArchitectureOK, error)

	AddKernelGPUArchitecture(params *AddKernelGPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelGPUArchitectureOK, error)

	AddKernelVersion(params *AddKernelVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelVersionCreated, error)

	AddKernelVersionRevision(params *AddKernelVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelVersionRevisionOK, error)

	AddLibc(params *AddLibcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcCreated, error)

	AddLibcVersion(params *AddLibcVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcVersionCreated, error)

	AddLibcVersionRevision(params *AddLibcVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcVersionRevisionOK, error)

	AddNamespace(params *AddNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddNamespaceCreated, error)

	AddOperatingSystem(params *AddOperatingSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemCreated, error)

	AddOperatingSystemKernel(params *AddOperatingSystemKernelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemKernelOK, error)

	AddOperatingSystemLibc(params *AddOperatingSystemLibcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemLibcOK, error)

	AddOperatingSystemVersion(params *AddOperatingSystemVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemVersionCreated, error)

	AddOperatingSystemVersionRevision(params *AddOperatingSystemVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemVersionRevisionOK, error)

	AddPatch(params *AddPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPatchCreated, error)

	AddPlatform(params *AddPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPlatformCreated, error)

	DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageNoContent, error)

	DeleteIngredientVersion(params *DeleteIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIngredientVersionNoContent, error)

	GetAuthor(params *GetAuthorParams, opts ...ClientOption) (*GetAuthorOK, error)

	GetAuthors(params *GetAuthorsParams, opts ...ClientOption) (*GetAuthorsOK, error)

	GetBuildFlag(params *GetBuildFlagParams, opts ...ClientOption) (*GetBuildFlagOK, error)

	GetBuildFlags(params *GetBuildFlagsParams, opts ...ClientOption) (*GetBuildFlagsOK, error)

	GetBuildScript(params *GetBuildScriptParams, opts ...ClientOption) (*GetBuildScriptOK, error)

	GetBuildScripts(params *GetBuildScriptsParams, opts ...ClientOption) (*GetBuildScriptsOK, error)

	GetCPUArchitecture(params *GetCPUArchitectureParams, opts ...ClientOption) (*GetCPUArchitectureOK, error)

	GetCPUArchitectureCPUExtensions(params *GetCPUArchitectureCPUExtensionsParams, opts ...ClientOption) (*GetCPUArchitectureCPUExtensionsOK, error)

	GetCPUArchitectures(params *GetCPUArchitecturesParams, opts ...ClientOption) (*GetCPUArchitecturesOK, error)

	GetCPUExtension(params *GetCPUExtensionParams, opts ...ClientOption) (*GetCPUExtensionOK, error)

	GetCPUExtensions(params *GetCPUExtensionsParams, opts ...ClientOption) (*GetCPUExtensionsOK, error)

	GetGPUArchitecture(params *GetGPUArchitectureParams, opts ...ClientOption) (*GetGPUArchitectureOK, error)

	GetGPUArchitectures(params *GetGPUArchitecturesParams, opts ...ClientOption) (*GetGPUArchitecturesOK, error)

	GetImage(params *GetImageParams, opts ...ClientOption) (*GetImageOK, error)

	GetImages(params *GetImagesParams, opts ...ClientOption) (*GetImagesOK, error)

	GetIngredient(params *GetIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientOK, error)

	GetIngredientOptionSet(params *GetIngredientOptionSetParams, opts ...ClientOption) (*GetIngredientOptionSetOK, error)

	GetIngredientOptionSetIngredientVersions(params *GetIngredientOptionSetIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientOptionSetIngredientVersionsOK, error)

	GetIngredientOptionSets(params *GetIngredientOptionSetsParams, opts ...ClientOption) (*GetIngredientOptionSetsOK, error)

	GetIngredientVersion(params *GetIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionOK, error)

	GetIngredientVersionAuthors(params *GetIngredientVersionAuthorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionAuthorsOK, error)

	GetIngredientVersionBuildScripts(params *GetIngredientVersionBuildScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionBuildScriptsOK, error)

	GetIngredientVersionIngredientOptionSets(params *GetIngredientVersionIngredientOptionSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionIngredientOptionSetsOK, error)

	GetIngredientVersionPatches(params *GetIngredientVersionPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionPatchesOK, error)

	GetIngredientVersionRevision(params *GetIngredientVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionRevisionOK, error)

	GetIngredientVersionRevisions(params *GetIngredientVersionRevisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionRevisionsOK, error)

	GetIngredientVersions(params *GetIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionsOK, error)

	GetIngredients(params *GetIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientsOK, error)

	GetKernel(params *GetKernelParams, opts ...ClientOption) (*GetKernelOK, error)

	GetKernelCPUArchitectures(params *GetKernelCPUArchitecturesParams, opts ...ClientOption) (*GetKernelCPUArchitecturesOK, error)

	GetKernelGPUArchitectures(params *GetKernelGPUArchitecturesParams, opts ...ClientOption) (*GetKernelGPUArchitecturesOK, error)

	GetKernelVersion(params *GetKernelVersionParams, opts ...ClientOption) (*GetKernelVersionOK, error)

	GetKernelVersions(params *GetKernelVersionsParams, opts ...ClientOption) (*GetKernelVersionsOK, error)

	GetKernels(params *GetKernelsParams, opts ...ClientOption) (*GetKernelsOK, error)

	GetLibc(params *GetLibcParams, opts ...ClientOption) (*GetLibcOK, error)

	GetLibcVersion(params *GetLibcVersionParams, opts ...ClientOption) (*GetLibcVersionOK, error)

	GetLibcVersions(params *GetLibcVersionsParams, opts ...ClientOption) (*GetLibcVersionsOK, error)

	GetLibcs(params *GetLibcsParams, opts ...ClientOption) (*GetLibcsOK, error)

	GetNamespaceIngredient(params *GetNamespaceIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientOK, error)

	GetNamespaceIngredientVersions(params *GetNamespaceIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientVersionsOK, error)

	GetNamespaceIngredients(params *GetNamespaceIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientsOK, error)

	GetNamespaces(params *GetNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesOK, error)

	GetOperatingSystem(params *GetOperatingSystemParams, opts ...ClientOption) (*GetOperatingSystemOK, error)

	GetOperatingSystemKernels(params *GetOperatingSystemKernelsParams, opts ...ClientOption) (*GetOperatingSystemKernelsOK, error)

	GetOperatingSystemLibcs(params *GetOperatingSystemLibcsParams, opts ...ClientOption) (*GetOperatingSystemLibcsOK, error)

	GetOperatingSystemVersion(params *GetOperatingSystemVersionParams, opts ...ClientOption) (*GetOperatingSystemVersionOK, error)

	GetOperatingSystemVersions(params *GetOperatingSystemVersionsParams, opts ...ClientOption) (*GetOperatingSystemVersionsOK, error)

	GetOperatingSystems(params *GetOperatingSystemsParams, opts ...ClientOption) (*GetOperatingSystemsOK, error)

	GetPatch(params *GetPatchParams, opts ...ClientOption) (*GetPatchOK, error)

	GetPatches(params *GetPatchesParams, opts ...ClientOption) (*GetPatchesOK, error)

	GetPlatform(params *GetPlatformParams, opts ...ClientOption) (*GetPlatformOK, error)

	GetPlatforms(params *GetPlatformsParams, opts ...ClientOption) (*GetPlatformsOK, error)

	GetSolutionRecipe(params *GetSolutionRecipeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolutionRecipeOK, error)

	HealthCheck(params *HealthCheckParams, opts ...ClientOption) (*HealthCheckOK, error)

	NormalizeNames(params *NormalizeNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NormalizeNamesOK, error)

	ReadinessCheck(params *ReadinessCheckParams, opts ...ClientOption) (*ReadinessCheckOK, error)

	ResolveRecipes(params *ResolveRecipesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResolveRecipesOK, error)

	SearchIngredients(params *SearchIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngredientsOK, error)

	SolveOrder(params *SolveOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SolveOrderCreated, error)

	UpdateAuthor(params *UpdateAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthorOK, error)

	UpdateBuildScript(params *UpdateBuildScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildScriptOK, error)

	UpdateIngredient(params *UpdateIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngredientOK, error)

	UpdateIngredientVersion(params *UpdateIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngredientVersionOK, error)

	UpdatePatch(params *UpdatePatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchOK, error)

	UpdatePlatform(params *UpdatePlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlatformOK, error)

	ValidateRecipe(params *ValidateRecipeParams, opts ...ClientOption) (*ValidateRecipeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAuthor Add a new author
*/
func (a *Client) AddAuthor(params *AddAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAuthorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAuthorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAuthor",
		Method:             "POST",
		PathPattern:        "/v1/authors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAuthorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAuthorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddAuthorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddBuildFlag Add a new build flag
*/
func (a *Client) AddBuildFlag(params *AddBuildFlagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildFlagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildFlagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildFlag",
		Method:             "POST",
		PathPattern:        "/v1/build-flags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBuildFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildFlagCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddBuildFlagDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddBuildFlagRevision Add a new revision of this build flag
*/
func (a *Client) AddBuildFlagRevision(params *AddBuildFlagRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildFlagRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildFlagRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildFlagRevision",
		Method:             "POST",
		PathPattern:        "/v1/build-flags/{build_flag_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBuildFlagRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildFlagRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddBuildFlagRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddBuildScript Add a new build script
*/
func (a *Client) AddBuildScript(params *AddBuildScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBuildScriptCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildScript",
		Method:             "POST",
		PathPattern:        "/v1/build-scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBuildScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildScriptCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddBuildScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddCPUArchitecture Add a new CPU architecture
*/
func (a *Client) AddCPUArchitecture(params *AddCPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCpuArchitecture",
		Method:             "POST",
		PathPattern:        "/v1/cpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCPUArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCPUArchitectureCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddCPUArchitectureCPUExtension Add a CPU extension that can be used with this architecture
*/
func (a *Client) AddCPUArchitectureCPUExtension(params *AddCPUArchitectureCPUExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureCPUExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCPUArchitectureCPUExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCpuArchitectureCpuExtension",
		Method:             "POST",
		PathPattern:        "/v1/cpu-architectures/{cpu_architecture_id}/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCPUArchitectureCPUExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCPUArchitectureCPUExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCPUArchitectureCPUExtensionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddCPUArchitectureRevision Add a new revision of this CPU architecture
*/
func (a *Client) AddCPUArchitectureRevision(params *AddCPUArchitectureRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUArchitectureRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCPUArchitectureRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCpuArchitectureRevision",
		Method:             "POST",
		PathPattern:        "/v1/cpu-architectures/{cpu_architecture_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCPUArchitectureRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCPUArchitectureRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCPUArchitectureRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddCPUExtension Add a new CPU extension
*/
func (a *Client) AddCPUExtension(params *AddCPUExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUExtensionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCPUExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCpuExtension",
		Method:             "POST",
		PathPattern:        "/v1/cpu-extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCPUExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCPUExtensionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCPUExtensionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddCPUExtensionRevision Add a new revision of this CPU extension
*/
func (a *Client) AddCPUExtensionRevision(params *AddCPUExtensionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCPUExtensionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCPUExtensionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCpuExtensionRevision",
		Method:             "POST",
		PathPattern:        "/v1/cpu-extensions/{cpu_extension_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCPUExtensionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCPUExtensionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCPUExtensionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddGPUArchitecture Add a new GPU architecture
*/
func (a *Client) AddGPUArchitecture(params *AddGPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGPUArchitectureCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addGPUArchitecture",
		Method:             "POST",
		PathPattern:        "/v1/gpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddGPUArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGPUArchitectureCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddGPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddGPUArchitectureRevision Add a new revision of this GPU architecture
*/
func (a *Client) AddGPUArchitectureRevision(params *AddGPUArchitectureRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGPUArchitectureRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGPUArchitectureRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addGPUArchitectureRevision",
		Method:             "POST",
		PathPattern:        "/v1/gpu-architectures/{gpu_architecture_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddGPUArchitectureRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGPUArchitectureRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddGPUArchitectureRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddImage Add a new image
*/
func (a *Client) AddImage(params *AddImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addImage",
		Method:             "POST",
		PathPattern:        "/v1/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddImageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddImageRevision Add a new revision of this image
*/
func (a *Client) AddImageRevision(params *AddImageRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddImageRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddImageRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addImageRevision",
		Method:             "POST",
		PathPattern:        "/v1/images/{image_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddImageRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddImageRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddImageRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredient Add a new ingredient
*/
func (a *Client) AddIngredient(params *AddIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredient",
		Method:             "POST",
		PathPattern:        "/v1/ingredients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredientOptionSet Add a new ingredient option set
*/
func (a *Client) AddIngredientOptionSet(params *AddIngredientOptionSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientOptionSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientOptionSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredientOptionSet",
		Method:             "POST",
		PathPattern:        "/v1/ingredient-option-sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientOptionSetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientOptionSetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredientOptionSetRevision Add a new revision of this ingredient option set
*/
func (a *Client) AddIngredientOptionSetRevision(params *AddIngredientOptionSetRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientOptionSetRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientOptionSetRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredientOptionSetRevision",
		Method:             "POST",
		PathPattern:        "/v1/ingredient-option-sets/{ingredient_option_set_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientOptionSetRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientOptionSetRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientOptionSetRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredientVersion Add a new version of this ingredient
*/
func (a *Client) AddIngredientVersion(params *AddIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredientVersion",
		Method:             "POST",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredientVersionAuthor Add an author of this ingredient version
*/
func (a *Client) AddIngredientVersionAuthor(params *AddIngredientVersionAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionAuthorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientVersionAuthorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredientVersionAuthor",
		Method:             "POST",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/authors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientVersionAuthorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientVersionAuthorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientVersionAuthorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddIngredientVersionRevision Add a new revision of this ingredient version
*/
func (a *Client) AddIngredientVersionRevision(params *AddIngredientVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIngredientVersionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIngredientVersionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIngredientVersionRevision",
		Method:             "POST",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIngredientVersionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIngredientVersionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIngredientVersionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddKernel Add a new kernel
*/
func (a *Client) AddKernel(params *AddKernelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddKernelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addKernel",
		Method:             "POST",
		PathPattern:        "/v1/kernels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddKernelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddKernelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddKernelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddKernelCPUArchitecture Add a CPU architecture that can be used with this kernel
*/
func (a *Client) AddKernelCPUArchitecture(params *AddKernelCPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelCPUArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddKernelCPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addKernelCpuArchitecture",
		Method:             "POST",
		PathPattern:        "/v1/kernels/{kernel_id}/cpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddKernelCPUArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddKernelCPUArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddKernelCPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddKernelGPUArchitecture Add a GPU architecture that can be used with this kernel
*/
func (a *Client) AddKernelGPUArchitecture(params *AddKernelGPUArchitectureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelGPUArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddKernelGPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addKernelGPUArchitecture",
		Method:             "POST",
		PathPattern:        "/v1/kernels/{kernel_id}/gpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddKernelGPUArchitectureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddKernelGPUArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddKernelGPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddKernelVersion Add a new version for this kernel
*/
func (a *Client) AddKernelVersion(params *AddKernelVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddKernelVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addKernelVersion",
		Method:             "POST",
		PathPattern:        "/v1/kernels/{kernel_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddKernelVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddKernelVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddKernelVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddKernelVersionRevision Add a new revision of this kernel version
*/
func (a *Client) AddKernelVersionRevision(params *AddKernelVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddKernelVersionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddKernelVersionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addKernelVersionRevision",
		Method:             "POST",
		PathPattern:        "/v1/kernels/{kernel_id}/versions/{kernel_version_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddKernelVersionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddKernelVersionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddKernelVersionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddLibc Add a new libc
*/
func (a *Client) AddLibc(params *AddLibcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLibcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLibc",
		Method:             "POST",
		PathPattern:        "/v1/libcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddLibcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLibcCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddLibcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddLibcVersion Add a new version for this libc
*/
func (a *Client) AddLibcVersion(params *AddLibcVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLibcVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLibcVersion",
		Method:             "POST",
		PathPattern:        "/v1/libcs/{libc_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddLibcVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLibcVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddLibcVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddLibcVersionRevision Add a new revision of this libc version
*/
func (a *Client) AddLibcVersionRevision(params *AddLibcVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLibcVersionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLibcVersionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLibcVersionRevision",
		Method:             "POST",
		PathPattern:        "/v1/libcs/{libc_id}/versions/{libc_version_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddLibcVersionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLibcVersionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddLibcVersionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddNamespace Add a new namespace
*/
func (a *Client) AddNamespace(params *AddNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddNamespaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addNamespace",
		Method:             "POST",
		PathPattern:        "/v1/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddNamespaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddOperatingSystem Add a new operating system
*/
func (a *Client) AddOperatingSystem(params *AddOperatingSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOperatingSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOperatingSystem",
		Method:             "POST",
		PathPattern:        "/v1/operating-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOperatingSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOperatingSystemCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddOperatingSystemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddOperatingSystemKernel Add a kernel that can be used with this operating system
*/
func (a *Client) AddOperatingSystemKernel(params *AddOperatingSystemKernelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemKernelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOperatingSystemKernelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOperatingSystemKernel",
		Method:             "POST",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/kernels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOperatingSystemKernelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOperatingSystemKernelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddOperatingSystemKernelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddOperatingSystemLibc Add a libc that can be used with this operating system
*/
func (a *Client) AddOperatingSystemLibc(params *AddOperatingSystemLibcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemLibcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOperatingSystemLibcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOperatingSystemLibc",
		Method:             "POST",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/libcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOperatingSystemLibcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOperatingSystemLibcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddOperatingSystemLibcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddOperatingSystemVersion Add a new version for this operating system
*/
func (a *Client) AddOperatingSystemVersion(params *AddOperatingSystemVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOperatingSystemVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOperatingSystemVersion",
		Method:             "POST",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOperatingSystemVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOperatingSystemVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddOperatingSystemVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddOperatingSystemVersionRevision Add a new revision of this operating system version
*/
func (a *Client) AddOperatingSystemVersionRevision(params *AddOperatingSystemVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOperatingSystemVersionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOperatingSystemVersionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOperatingSystemVersionRevision",
		Method:             "POST",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/versions/{operating_system_version_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOperatingSystemVersionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOperatingSystemVersionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddOperatingSystemVersionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddPatch Add a new patch
*/
func (a *Client) AddPatch(params *AddPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPatch",
		Method:             "POST",
		PathPattern:        "/v1/patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddPlatform Add a new platform
*/
func (a *Client) AddPlatform(params *AddPlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPlatformCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPlatform",
		Method:             "POST",
		PathPattern:        "/v1/platforms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPlatformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPlatformCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddPlatformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteImage Delete this image
*/
func (a *Client) DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteImage",
		Method:             "DELETE",
		PathPattern:        "/v1/images/{image_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteIngredientVersion Delete this ingredient version
*/
func (a *Client) DeleteIngredientVersion(params *DeleteIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIngredientVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIngredientVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIngredientVersion",
		Method:             "DELETE",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIngredientVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIngredientVersionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIngredientVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAuthor Retrieve an author
*/
func (a *Client) GetAuthor(params *GetAuthorParams, opts ...ClientOption) (*GetAuthorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthor",
		Method:             "GET",
		PathPattern:        "/v1/authors/{author_id_or_email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAuthorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAuthors Retrieve a paged set of authors
*/
func (a *Client) GetAuthors(params *GetAuthorsParams, opts ...ClientOption) (*GetAuthorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthors",
		Method:             "GET",
		PathPattern:        "/v1/authors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAuthorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBuildFlag Retrieve a build flag
*/
func (a *Client) GetBuildFlag(params *GetBuildFlagParams, opts ...ClientOption) (*GetBuildFlagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFlagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFlag",
		Method:             "GET",
		PathPattern:        "/v1/build-flags/{build_flag_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildFlagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFlagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBuildFlagDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBuildFlags Retrieve a paged set of build flags
*/
func (a *Client) GetBuildFlags(params *GetBuildFlagsParams, opts ...ClientOption) (*GetBuildFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFlags",
		Method:             "GET",
		PathPattern:        "/v1/build-flags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBuildFlagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBuildScript Retrieve a single build script
*/
func (a *Client) GetBuildScript(params *GetBuildScriptParams, opts ...ClientOption) (*GetBuildScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildScript",
		Method:             "GET",
		PathPattern:        "/v1/build-scripts/{build_script_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBuildScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBuildScripts Retrieve all build scripts
*/
func (a *Client) GetBuildScripts(params *GetBuildScriptsParams, opts ...ClientOption) (*GetBuildScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildScriptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildScripts",
		Method:             "GET",
		PathPattern:        "/v1/build-scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildScriptsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBuildScriptsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCPUArchitecture Retrieve a single CPU architecture
*/
func (a *Client) GetCPUArchitecture(params *GetCPUArchitectureParams, opts ...ClientOption) (*GetCPUArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCpuArchitecture",
		Method:             "GET",
		PathPattern:        "/v1/cpu-architectures/{cpu_architecture_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUArchitectureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCPUArchitectureCPUExtensions Retrieve all CPU extensions that can be used with this architecture
*/
func (a *Client) GetCPUArchitectureCPUExtensions(params *GetCPUArchitectureCPUExtensionsParams, opts ...ClientOption) (*GetCPUArchitectureCPUExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUArchitectureCPUExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCpuArchitectureCpuExtensions",
		Method:             "GET",
		PathPattern:        "/v1/cpu-architectures/{cpu_architecture_id}/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUArchitectureCPUExtensionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUArchitectureCPUExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCPUArchitectureCPUExtensionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCPUArchitectures Retrieve all CPU architectures
*/
func (a *Client) GetCPUArchitectures(params *GetCPUArchitecturesParams, opts ...ClientOption) (*GetCPUArchitecturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUArchitecturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCpuArchitectures",
		Method:             "GET",
		PathPattern:        "/v1/cpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUArchitecturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUArchitecturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCPUArchitecturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCPUExtension Retrieve a single CPU extension
*/
func (a *Client) GetCPUExtension(params *GetCPUExtensionParams, opts ...ClientOption) (*GetCPUExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCpuExtension",
		Method:             "GET",
		PathPattern:        "/v1/cpu-extensions/{cpu_extension_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUExtensionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCPUExtensionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCPUExtensions Retrieve all CPU extensions
*/
func (a *Client) GetCPUExtensions(params *GetCPUExtensionsParams, opts ...ClientOption) (*GetCPUExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPUExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCpuExtensions",
		Method:             "GET",
		PathPattern:        "/v1/cpu-extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPUExtensionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPUExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCPUExtensionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetGPUArchitecture Retrieve a single GPU architecture
*/
func (a *Client) GetGPUArchitecture(params *GetGPUArchitectureParams, opts ...ClientOption) (*GetGPUArchitectureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGPUArchitectureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGPUArchitecture",
		Method:             "GET",
		PathPattern:        "/v1/gpu-architectures/{gpu_architecture_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGPUArchitectureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGPUArchitectureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGPUArchitectureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetGPUArchitectures Retrieve all GPU architectures
*/
func (a *Client) GetGPUArchitectures(params *GetGPUArchitecturesParams, opts ...ClientOption) (*GetGPUArchitecturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGPUArchitecturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGPUArchitectures",
		Method:             "GET",
		PathPattern:        "/v1/gpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGPUArchitecturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGPUArchitecturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGPUArchitecturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetImage Retrieve an image
*/
func (a *Client) GetImage(params *GetImageParams, opts ...ClientOption) (*GetImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImage",
		Method:             "GET",
		PathPattern:        "/v1/images/{image_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetImages Retrieve a paged set of images
*/
func (a *Client) GetImages(params *GetImagesParams, opts ...ClientOption) (*GetImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImages",
		Method:             "GET",
		PathPattern:        "/v1/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredient Retrieve a single ingredient
*/
func (a *Client) GetIngredient(params *GetIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredient",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientOptionSet Retrieve a single ingredient option set
*/
func (a *Client) GetIngredientOptionSet(params *GetIngredientOptionSetParams, opts ...ClientOption) (*GetIngredientOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientOptionSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientOptionSet",
		Method:             "GET",
		PathPattern:        "/v1/ingredient-option-sets/{ingredient_option_set_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientOptionSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientOptionSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientOptionSetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientOptionSetIngredientVersions Retrieve all ingredient versions which use this ingredient option set
*/
func (a *Client) GetIngredientOptionSetIngredientVersions(params *GetIngredientOptionSetIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientOptionSetIngredientVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientOptionSetIngredientVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientOptionSetIngredientVersions",
		Method:             "GET",
		PathPattern:        "/v1/ingredient-option-sets/{ingredient_option_set_id}/ingredient-versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientOptionSetIngredientVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientOptionSetIngredientVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientOptionSetIngredientVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientOptionSets Iterate over all matching ingredient option sets
*/
func (a *Client) GetIngredientOptionSets(params *GetIngredientOptionSetsParams, opts ...ClientOption) (*GetIngredientOptionSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientOptionSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientOptionSets",
		Method:             "GET",
		PathPattern:        "/v1/ingredient-option-sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientOptionSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientOptionSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientOptionSetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersion Retrieve a single ingredient version
*/
func (a *Client) GetIngredientVersion(params *GetIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersion",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionAuthors Retrieve all authors of this ingredient version
*/
func (a *Client) GetIngredientVersionAuthors(params *GetIngredientVersionAuthorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionAuthorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionAuthorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionAuthors",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/authors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionAuthorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionAuthorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionAuthorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionBuildScripts Retrieve all build scripts used by the ingredient version revision
*/
func (a *Client) GetIngredientVersionBuildScripts(params *GetIngredientVersionBuildScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionBuildScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionBuildScriptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionBuildScripts",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/build-scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionBuildScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionBuildScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionBuildScriptsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionIngredientOptionSets Retrieve all ingredient option sets used by the ingredient version
*/
func (a *Client) GetIngredientVersionIngredientOptionSets(params *GetIngredientVersionIngredientOptionSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionIngredientOptionSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionIngredientOptionSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionIngredientOptionSets",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/ingredient-option-sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionIngredientOptionSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionIngredientOptionSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionIngredientOptionSetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionPatches Retrieve all patches used by the ingredient version revision
*/
func (a *Client) GetIngredientVersionPatches(params *GetIngredientVersionPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionPatches",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionRevision Retrieve a single ingredient version revision
*/
func (a *Client) GetIngredientVersionRevision(params *GetIngredientVersionRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionRevision",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/revisions/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersionRevisions Retrieve all ingredient version revisions for an ingredient version
*/
func (a *Client) GetIngredientVersionRevisions(params *GetIngredientVersionRevisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionRevisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionRevisionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersionRevisions",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}/revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionRevisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionRevisionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionRevisionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredientVersions Retrieve all versions of this ingredient
*/
func (a *Client) GetIngredientVersions(params *GetIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredientVersions",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIngredients Retrieve all ingredients
*/
func (a *Client) GetIngredients(params *GetIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngredientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngredientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngredients",
		Method:             "GET",
		PathPattern:        "/v1/ingredients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngredientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngredientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIngredientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernel Retrieve a single kernel
*/
func (a *Client) GetKernel(params *GetKernelParams, opts ...ClientOption) (*GetKernelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernel",
		Method:             "GET",
		PathPattern:        "/v1/kernels/{kernel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernelCPUArchitectures Retrieve all CPU architectures that can be used with this kernel
*/
func (a *Client) GetKernelCPUArchitectures(params *GetKernelCPUArchitecturesParams, opts ...ClientOption) (*GetKernelCPUArchitecturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelCPUArchitecturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernelCpuArchitectures",
		Method:             "GET",
		PathPattern:        "/v1/kernels/{kernel_id}/cpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelCPUArchitecturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelCPUArchitecturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelCPUArchitecturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernelGPUArchitectures Retrieve all GPU architectures that can be used with this kernel
*/
func (a *Client) GetKernelGPUArchitectures(params *GetKernelGPUArchitecturesParams, opts ...ClientOption) (*GetKernelGPUArchitecturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelGPUArchitecturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernelGPUArchitectures",
		Method:             "GET",
		PathPattern:        "/v1/kernels/{kernel_id}/gpu-architectures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelGPUArchitecturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelGPUArchitecturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelGPUArchitecturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernelVersion Retrieve a single kernel version
*/
func (a *Client) GetKernelVersion(params *GetKernelVersionParams, opts ...ClientOption) (*GetKernelVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernelVersion",
		Method:             "GET",
		PathPattern:        "/v1/kernels/{kernel_id}/versions/{kernel_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernelVersions Retrieve all versions of this kernel
*/
func (a *Client) GetKernelVersions(params *GetKernelVersionsParams, opts ...ClientOption) (*GetKernelVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernelVersions",
		Method:             "GET",
		PathPattern:        "/v1/kernels/{kernel_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKernels Retrieve all kernels
*/
func (a *Client) GetKernels(params *GetKernelsParams, opts ...ClientOption) (*GetKernelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKernelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKernels",
		Method:             "GET",
		PathPattern:        "/v1/kernels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKernelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKernelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKernelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLibc Retrieve a single libc
*/
func (a *Client) GetLibc(params *GetLibcParams, opts ...ClientOption) (*GetLibcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLibc",
		Method:             "GET",
		PathPattern:        "/v1/libcs/{libc_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLibcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLibcVersion Retrieve a single libc version
*/
func (a *Client) GetLibcVersion(params *GetLibcVersionParams, opts ...ClientOption) (*GetLibcVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibcVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLibcVersion",
		Method:             "GET",
		PathPattern:        "/v1/libcs/{libc_id}/versions/{libc_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibcVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibcVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLibcVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLibcVersions Retrieve all versions of this libc
*/
func (a *Client) GetLibcVersions(params *GetLibcVersionsParams, opts ...ClientOption) (*GetLibcVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibcVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLibcVersions",
		Method:             "GET",
		PathPattern:        "/v1/libcs/{libc_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibcVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibcVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLibcVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLibcs Retrieve all libcs
*/
func (a *Client) GetLibcs(params *GetLibcsParams, opts ...ClientOption) (*GetLibcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLibcs",
		Method:             "GET",
		PathPattern:        "/v1/libcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLibcsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespaceIngredient Retrieve a single ingredient by namespace and name
*/
func (a *Client) GetNamespaceIngredient(params *GetNamespaceIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceIngredientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaceIngredient",
		Method:             "GET",
		PathPattern:        "/v1/namespaces/ingredient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceIngredientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceIngredientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNamespaceIngredientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespaceIngredientVersions Retrieve ingredient versions by namespace and ingredient name
*/
func (a *Client) GetNamespaceIngredientVersions(params *GetNamespaceIngredientVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceIngredientVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaceIngredientVersions",
		Method:             "GET",
		PathPattern:        "/v1/namespaces/ingredient/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceIngredientVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceIngredientVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNamespaceIngredientVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespaceIngredients Retrieve (or, if query string provided, search across) all ingredients and versions which provide at least one feature in this namespace
*/
func (a *Client) GetNamespaceIngredients(params *GetNamespaceIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceIngredientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceIngredientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaceIngredients",
		Method:             "GET",
		PathPattern:        "/v1/namespaces/ingredients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceIngredientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceIngredientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNamespaceIngredientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespaces Retrieve all namespaces
*/
func (a *Client) GetNamespaces(params *GetNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaces",
		Method:             "GET",
		PathPattern:        "/v1/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNamespacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystem Retrieve a single operating system
*/
func (a *Client) GetOperatingSystem(params *GetOperatingSystemParams, opts ...ClientOption) (*GetOperatingSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystem",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems/{operating_system_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystemKernels Retrieve all kernels that can be used with this operating system
*/
func (a *Client) GetOperatingSystemKernels(params *GetOperatingSystemKernelsParams, opts ...ClientOption) (*GetOperatingSystemKernelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemKernelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystemKernels",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/kernels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemKernelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemKernelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemKernelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystemLibcs Retrieve all libcs that can be used with this operating system
*/
func (a *Client) GetOperatingSystemLibcs(params *GetOperatingSystemLibcsParams, opts ...ClientOption) (*GetOperatingSystemLibcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemLibcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystemLibcs",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/libcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemLibcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemLibcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemLibcsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystemVersion Retrieve a single operating system version
*/
func (a *Client) GetOperatingSystemVersion(params *GetOperatingSystemVersionParams, opts ...ClientOption) (*GetOperatingSystemVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystemVersion",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/versions/{operating_system_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystemVersions Retrieve all versions of this operating system
*/
func (a *Client) GetOperatingSystemVersions(params *GetOperatingSystemVersionsParams, opts ...ClientOption) (*GetOperatingSystemVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystemVersions",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems/{operating_system_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOperatingSystems Retrieve all operating systems
*/
func (a *Client) GetOperatingSystems(params *GetOperatingSystemsParams, opts ...ClientOption) (*GetOperatingSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOperatingSystems",
		Method:             "GET",
		PathPattern:        "/v1/operating-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperatingSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperatingSystemsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPatch Retrieve a single patch
*/
func (a *Client) GetPatch(params *GetPatchParams, opts ...ClientOption) (*GetPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPatch",
		Method:             "GET",
		PathPattern:        "/v1/patches/{patch_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPatches Retrieve all patches
*/
func (a *Client) GetPatches(params *GetPatchesParams, opts ...ClientOption) (*GetPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPatches",
		Method:             "GET",
		PathPattern:        "/v1/patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPlatform Retrieve a single platform
*/
func (a *Client) GetPlatform(params *GetPlatformParams, opts ...ClientOption) (*GetPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlatform",
		Method:             "GET",
		PathPattern:        "/v1/platforms/{platform_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPlatformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPlatforms Retrieve all platforms
*/
func (a *Client) GetPlatforms(params *GetPlatformsParams, opts ...ClientOption) (*GetPlatformsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlatforms",
		Method:             "GET",
		PathPattern:        "/v1/platforms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlatformsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlatformsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPlatformsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSolutionRecipe Retrieve a recipe produced as part of a solution
*/
func (a *Client) GetSolutionRecipe(params *GetSolutionRecipeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSolutionRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSolutionRecipeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSolutionRecipe",
		Method:             "GET",
		PathPattern:        "/v1/solutions/recipes/{recipe_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSolutionRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSolutionRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSolutionRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HealthCheck health check API
*/
func (a *Client) HealthCheck(params *HealthCheckParams, opts ...ClientOption) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HealthCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NormalizeNames Normalize a list of names according to the namespace's name normalization rules.
*/
func (a *Client) NormalizeNames(params *NormalizeNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NormalizeNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizeNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "normalizeNames",
		Method:             "POST",
		PathPattern:        "/v1/namespaces/normalized-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NormalizeNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizeNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NormalizeNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReadinessCheck readiness check API
*/
func (a *Client) ReadinessCheck(params *ReadinessCheckParams, opts ...ClientOption) (*ReadinessCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadinessCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "readinessCheck",
		Method:             "GET",
		PathPattern:        "/readiness-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadinessCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadinessCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadinessCheckDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResolveRecipes recipes for an order

  Solve the order's requirements into concrete ingredient versions and return one or more recipes fulfilling the order
*/
func (a *Client) ResolveRecipes(params *ResolveRecipesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResolveRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resolveRecipes",
		Method:             "POST",
		PathPattern:        "/v1/recipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResolveRecipesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResolveRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResolveRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchIngredients Search ingredients
*/
func (a *Client) SearchIngredients(params *SearchIngredientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngredientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngredientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchIngredients",
		Method:             "GET",
		PathPattern:        "/v1/ingredients/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchIngredientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIngredientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchIngredientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SolveOrder Solve an order's requirements into a solution consisting of one or more recipes that can be built
*/
func (a *Client) SolveOrder(params *SolveOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SolveOrderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolveOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "solveOrder",
		Method:             "POST",
		PathPattern:        "/v1/solutions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SolveOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolveOrderCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolveOrderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAuthor Update an author
*/
func (a *Client) UpdateAuthor(params *UpdateAuthorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAuthor",
		Method:             "PUT",
		PathPattern:        "/v1/authors/{author_id_or_email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAuthorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAuthorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateBuildScript Update an existing build script (if it's not in use by any stable ingredient version revisions)
*/
func (a *Client) UpdateBuildScript(params *UpdateBuildScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildScript",
		Method:             "PUT",
		PathPattern:        "/v1/build-scripts/{build_script_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBuildScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBuildScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateIngredient Update this ingredient
*/
func (a *Client) UpdateIngredient(params *UpdateIngredientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngredientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIngredientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIngredient",
		Method:             "PUT",
		PathPattern:        "/v1/ingredients/{ingredient_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIngredientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIngredientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIngredientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateIngredientVersion Update this ingredient version
*/
func (a *Client) UpdateIngredientVersion(params *UpdateIngredientVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngredientVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIngredientVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIngredientVersion",
		Method:             "PUT",
		PathPattern:        "/v1/ingredients/{ingredient_id}/versions/{ingredient_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIngredientVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIngredientVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIngredientVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePatch Update an existing patch (if it's not in use by any stable ingredient version revisions)
*/
func (a *Client) UpdatePatch(params *UpdatePatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePatch",
		Method:             "PUT",
		PathPattern:        "/v1/patches/{patch_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePlatform Update the platform end of support date
*/
func (a *Client) UpdatePlatform(params *UpdatePlatformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePlatform",
		Method:             "PUT",
		PathPattern:        "/v1/platforms/{platform_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePlatformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePlatformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidateRecipe Given a single recipe, this endpoint tells you if the recipe is valid. If not, it returns one more errors explaining the problem(s).
*/
func (a *Client) ValidateRecipe(params *ValidateRecipeParams, opts ...ClientOption) (*ValidateRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateRecipeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateRecipe",
		Method:             "POST",
		PathPattern:        "/v1/recipes/validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
