// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteIngredientVersionAuthorParams creates a new DeleteIngredientVersionAuthorParams object
// with the default values initialized.
func NewDeleteIngredientVersionAuthorParams() *DeleteIngredientVersionAuthorParams {
	var ()
	return &DeleteIngredientVersionAuthorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteIngredientVersionAuthorParamsWithTimeout creates a new DeleteIngredientVersionAuthorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteIngredientVersionAuthorParamsWithTimeout(timeout time.Duration) *DeleteIngredientVersionAuthorParams {
	var ()
	return &DeleteIngredientVersionAuthorParams{

		timeout: timeout,
	}
}

// NewDeleteIngredientVersionAuthorParamsWithContext creates a new DeleteIngredientVersionAuthorParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteIngredientVersionAuthorParamsWithContext(ctx context.Context) *DeleteIngredientVersionAuthorParams {
	var ()
	return &DeleteIngredientVersionAuthorParams{

		Context: ctx,
	}
}

// NewDeleteIngredientVersionAuthorParamsWithHTTPClient creates a new DeleteIngredientVersionAuthorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteIngredientVersionAuthorParamsWithHTTPClient(client *http.Client) *DeleteIngredientVersionAuthorParams {
	var ()
	return &DeleteIngredientVersionAuthorParams{
		HTTPClient: client,
	}
}

/*DeleteIngredientVersionAuthorParams contains all the parameters to send to the API endpoint
for the delete ingredient version author operation typically these are written to a http.Request
*/
type DeleteIngredientVersionAuthorParams struct {

	/*AuthorID*/
	AuthorID strfmt.UUID
	/*IngredientID*/
	IngredientID strfmt.UUID
	/*IngredientVersionID*/
	IngredientVersionID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithTimeout(timeout time.Duration) *DeleteIngredientVersionAuthorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithContext(ctx context.Context) *DeleteIngredientVersionAuthorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithHTTPClient(client *http.Client) *DeleteIngredientVersionAuthorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorID adds the authorID to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithAuthorID(authorID strfmt.UUID) *DeleteIngredientVersionAuthorParams {
	o.SetAuthorID(authorID)
	return o
}

// SetAuthorID adds the authorId to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetAuthorID(authorID strfmt.UUID) {
	o.AuthorID = authorID
}

// WithIngredientID adds the ingredientID to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithIngredientID(ingredientID strfmt.UUID) *DeleteIngredientVersionAuthorParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetIngredientID(ingredientID strfmt.UUID) {
	o.IngredientID = ingredientID
}

// WithIngredientVersionID adds the ingredientVersionID to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) WithIngredientVersionID(ingredientVersionID strfmt.UUID) *DeleteIngredientVersionAuthorParams {
	o.SetIngredientVersionID(ingredientVersionID)
	return o
}

// SetIngredientVersionID adds the ingredientVersionId to the delete ingredient version author params
func (o *DeleteIngredientVersionAuthorParams) SetIngredientVersionID(ingredientVersionID strfmt.UUID) {
	o.IngredientVersionID = ingredientVersionID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteIngredientVersionAuthorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param author_id
	if err := r.SetPathParam("author_id", o.AuthorID.String()); err != nil {
		return err
	}

	// path param ingredient_id
	if err := r.SetPathParam("ingredient_id", o.IngredientID.String()); err != nil {
		return err
	}

	// path param ingredient_version_id
	if err := r.SetPathParam("ingredient_version_id", o.IngredientVersionID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
