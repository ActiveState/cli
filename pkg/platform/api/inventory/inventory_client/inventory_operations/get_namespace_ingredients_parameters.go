// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNamespaceIngredientsParams creates a new GetNamespaceIngredientsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNamespaceIngredientsParams() *GetNamespaceIngredientsParams {
	return &GetNamespaceIngredientsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNamespaceIngredientsParamsWithTimeout creates a new GetNamespaceIngredientsParams object
// with the ability to set a timeout on a request.
func NewGetNamespaceIngredientsParamsWithTimeout(timeout time.Duration) *GetNamespaceIngredientsParams {
	return &GetNamespaceIngredientsParams{
		timeout: timeout,
	}
}

// NewGetNamespaceIngredientsParamsWithContext creates a new GetNamespaceIngredientsParams object
// with the ability to set a context for a request.
func NewGetNamespaceIngredientsParamsWithContext(ctx context.Context) *GetNamespaceIngredientsParams {
	return &GetNamespaceIngredientsParams{
		Context: ctx,
	}
}

// NewGetNamespaceIngredientsParamsWithHTTPClient creates a new GetNamespaceIngredientsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNamespaceIngredientsParamsWithHTTPClient(client *http.Client) *GetNamespaceIngredientsParams {
	return &GetNamespaceIngredientsParams{
		HTTPClient: client,
	}
}

/* GetNamespaceIngredientsParams contains all the parameters to send to the API endpoint
   for the get namespace ingredients operation.

   Typically these are written to a http.Request.
*/
type GetNamespaceIngredientsParams struct {

	/* AllowDeleted.

	   Whether to show or hide a deleted revision of a resource if the newest revision of the resource is deleted
	*/
	AllowDeleted *bool

	/* AllowUnstable.

	   Whether to show an unstable revision of a resource if there is an available unstable version newer than the newest available stable version
	*/
	AllowUnstable *bool

	/* ExcludeFeatures.

	   Exclude provided features from returned ingredients. This is a performance optimization used when features are not needed.
	*/
	ExcludeFeatures *bool

	/* Limit.

	   The maximum number of items returned per page

	   Default: 50
	*/
	Limit *int64

	/* MaxVersionsPerIngredient.

	   Return only this many versions per ingredient found
	*/
	MaxVersionsPerIngredient *int64

	// Namespace.
	Namespace string

	/* Page.

	   The page number returned

	   Default: 1
	*/
	Page *int64

	/* Q.

	   Filter ingredient and versions to just those whose name or provided features match the specified query string
	*/
	Q *string

	/* StateAt.

	   Show the state of a resource as it was at the specified timestamp. If omitted, shows the current state of the resource.

	   Format: date-time
	*/
	StateAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get namespace ingredients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNamespaceIngredientsParams) WithDefaults() *GetNamespaceIngredientsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get namespace ingredients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNamespaceIngredientsParams) SetDefaults() {
	var (
		allowDeletedDefault = bool(false)

		allowUnstableDefault = bool(false)

		limitDefault = int64(50)

		pageDefault = int64(1)
	)

	val := GetNamespaceIngredientsParams{
		AllowDeleted:  &allowDeletedDefault,
		AllowUnstable: &allowUnstableDefault,
		Limit:         &limitDefault,
		Page:          &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithTimeout(timeout time.Duration) *GetNamespaceIngredientsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithContext(ctx context.Context) *GetNamespaceIngredientsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithHTTPClient(client *http.Client) *GetNamespaceIngredientsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowDeleted adds the allowDeleted to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithAllowDeleted(allowDeleted *bool) *GetNamespaceIngredientsParams {
	o.SetAllowDeleted(allowDeleted)
	return o
}

// SetAllowDeleted adds the allowDeleted to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetAllowDeleted(allowDeleted *bool) {
	o.AllowDeleted = allowDeleted
}

// WithAllowUnstable adds the allowUnstable to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithAllowUnstable(allowUnstable *bool) *GetNamespaceIngredientsParams {
	o.SetAllowUnstable(allowUnstable)
	return o
}

// SetAllowUnstable adds the allowUnstable to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetAllowUnstable(allowUnstable *bool) {
	o.AllowUnstable = allowUnstable
}

// WithExcludeFeatures adds the excludeFeatures to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithExcludeFeatures(excludeFeatures *bool) *GetNamespaceIngredientsParams {
	o.SetExcludeFeatures(excludeFeatures)
	return o
}

// SetExcludeFeatures adds the excludeFeatures to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetExcludeFeatures(excludeFeatures *bool) {
	o.ExcludeFeatures = excludeFeatures
}

// WithLimit adds the limit to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithLimit(limit *int64) *GetNamespaceIngredientsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMaxVersionsPerIngredient adds the maxVersionsPerIngredient to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithMaxVersionsPerIngredient(maxVersionsPerIngredient *int64) *GetNamespaceIngredientsParams {
	o.SetMaxVersionsPerIngredient(maxVersionsPerIngredient)
	return o
}

// SetMaxVersionsPerIngredient adds the maxVersionsPerIngredient to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetMaxVersionsPerIngredient(maxVersionsPerIngredient *int64) {
	o.MaxVersionsPerIngredient = maxVersionsPerIngredient
}

// WithNamespace adds the namespace to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithNamespace(namespace string) *GetNamespaceIngredientsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPage adds the page to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithPage(page *int64) *GetNamespaceIngredientsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetPage(page *int64) {
	o.Page = page
}

// WithQ adds the q to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithQ(q *string) *GetNamespaceIngredientsParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetQ(q *string) {
	o.Q = q
}

// WithStateAt adds the stateAt to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) WithStateAt(stateAt *strfmt.DateTime) *GetNamespaceIngredientsParams {
	o.SetStateAt(stateAt)
	return o
}

// SetStateAt adds the stateAt to the get namespace ingredients params
func (o *GetNamespaceIngredientsParams) SetStateAt(stateAt *strfmt.DateTime) {
	o.StateAt = stateAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetNamespaceIngredientsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowDeleted != nil {

		// query param allow_deleted
		var qrAllowDeleted bool

		if o.AllowDeleted != nil {
			qrAllowDeleted = *o.AllowDeleted
		}
		qAllowDeleted := swag.FormatBool(qrAllowDeleted)
		if qAllowDeleted != "" {

			if err := r.SetQueryParam("allow_deleted", qAllowDeleted); err != nil {
				return err
			}
		}
	}

	if o.AllowUnstable != nil {

		// query param allow_unstable
		var qrAllowUnstable bool

		if o.AllowUnstable != nil {
			qrAllowUnstable = *o.AllowUnstable
		}
		qAllowUnstable := swag.FormatBool(qrAllowUnstable)
		if qAllowUnstable != "" {

			if err := r.SetQueryParam("allow_unstable", qAllowUnstable); err != nil {
				return err
			}
		}
	}

	if o.ExcludeFeatures != nil {

		// query param exclude_features
		var qrExcludeFeatures bool

		if o.ExcludeFeatures != nil {
			qrExcludeFeatures = *o.ExcludeFeatures
		}
		qExcludeFeatures := swag.FormatBool(qrExcludeFeatures)
		if qExcludeFeatures != "" {

			if err := r.SetQueryParam("exclude_features", qExcludeFeatures); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MaxVersionsPerIngredient != nil {

		// query param max_versions_per_ingredient
		var qrMaxVersionsPerIngredient int64

		if o.MaxVersionsPerIngredient != nil {
			qrMaxVersionsPerIngredient = *o.MaxVersionsPerIngredient
		}
		qMaxVersionsPerIngredient := swag.FormatInt64(qrMaxVersionsPerIngredient)
		if qMaxVersionsPerIngredient != "" {

			if err := r.SetQueryParam("max_versions_per_ingredient", qMaxVersionsPerIngredient); err != nil {
				return err
			}
		}
	}

	// query param namespace
	qrNamespace := o.Namespace
	qNamespace := qrNamespace
	if qNamespace != "" {

		if err := r.SetQueryParam("namespace", qNamespace); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.StateAt != nil {

		// query param state_at
		var qrStateAt strfmt.DateTime

		if o.StateAt != nil {
			qrStateAt = *o.StateAt
		}
		qStateAt := qrStateAt.String()
		if qStateAt != "" {

			if err := r.SetQueryParam("state_at", qStateAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
