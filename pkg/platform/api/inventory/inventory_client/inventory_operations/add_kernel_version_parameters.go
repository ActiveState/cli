// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewAddKernelVersionParams creates a new AddKernelVersionParams object
// with the default values initialized.
func NewAddKernelVersionParams() *AddKernelVersionParams {
	var ()
	return &AddKernelVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddKernelVersionParamsWithTimeout creates a new AddKernelVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddKernelVersionParamsWithTimeout(timeout time.Duration) *AddKernelVersionParams {
	var ()
	return &AddKernelVersionParams{

		timeout: timeout,
	}
}

// NewAddKernelVersionParamsWithContext creates a new AddKernelVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddKernelVersionParamsWithContext(ctx context.Context) *AddKernelVersionParams {
	var ()
	return &AddKernelVersionParams{

		Context: ctx,
	}
}

// NewAddKernelVersionParamsWithHTTPClient creates a new AddKernelVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddKernelVersionParamsWithHTTPClient(client *http.Client) *AddKernelVersionParams {
	var ()
	return &AddKernelVersionParams{
		HTTPClient: client,
	}
}

/*AddKernelVersionParams contains all the parameters to send to the API endpoint
for the add kernel version operation typically these are written to a http.Request
*/
type AddKernelVersionParams struct {

	/*KernelID*/
	KernelID strfmt.UUID
	/*KernelVersion*/
	KernelVersion *inventory_models.V1KernelVersionCore

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add kernel version params
func (o *AddKernelVersionParams) WithTimeout(timeout time.Duration) *AddKernelVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add kernel version params
func (o *AddKernelVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add kernel version params
func (o *AddKernelVersionParams) WithContext(ctx context.Context) *AddKernelVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add kernel version params
func (o *AddKernelVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add kernel version params
func (o *AddKernelVersionParams) WithHTTPClient(client *http.Client) *AddKernelVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add kernel version params
func (o *AddKernelVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKernelID adds the kernelID to the add kernel version params
func (o *AddKernelVersionParams) WithKernelID(kernelID strfmt.UUID) *AddKernelVersionParams {
	o.SetKernelID(kernelID)
	return o
}

// SetKernelID adds the kernelId to the add kernel version params
func (o *AddKernelVersionParams) SetKernelID(kernelID strfmt.UUID) {
	o.KernelID = kernelID
}

// WithKernelVersion adds the kernelVersion to the add kernel version params
func (o *AddKernelVersionParams) WithKernelVersion(kernelVersion *inventory_models.V1KernelVersionCore) *AddKernelVersionParams {
	o.SetKernelVersion(kernelVersion)
	return o
}

// SetKernelVersion adds the kernelVersion to the add kernel version params
func (o *AddKernelVersionParams) SetKernelVersion(kernelVersion *inventory_models.V1KernelVersionCore) {
	o.KernelVersion = kernelVersion
}

// WriteToRequest writes these params to a swagger request
func (o *AddKernelVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param kernel_id
	if err := r.SetPathParam("kernel_id", o.KernelID.String()); err != nil {
		return err
	}

	if o.KernelVersion != nil {
		if err := r.SetBodyParam(o.KernelVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
