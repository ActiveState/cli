// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IngredientVersionRevisionCreate Ingredient Version Revision Create
//
// All updatable fields of an ingredient version revision plus resources that can be linked to the revision when it is created, but that are not part of the ingredient version revision model itself.
//
// swagger:model ingredientVersionRevisionCreate
type IngredientVersionRevisionCreate struct {
	IngredientVersionRevisionCreateAllOf0

	IngredientVersionRevisionCore
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IngredientVersionRevisionCreate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IngredientVersionRevisionCreateAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IngredientVersionRevisionCreateAllOf0 = aO0

	// AO1
	var aO1 IngredientVersionRevisionCore
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IngredientVersionRevisionCore = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IngredientVersionRevisionCreate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.IngredientVersionRevisionCreateAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.IngredientVersionRevisionCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ingredient version revision create
func (m *IngredientVersionRevisionCreate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientVersionRevisionCreateAllOf0
	if err := m.IngredientVersionRevisionCreateAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCore
	if err := m.IngredientVersionRevisionCore.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ingredient version revision create based on the context it is used
func (m *IngredientVersionRevisionCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientVersionRevisionCreateAllOf0
	if err := m.IngredientVersionRevisionCreateAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCore
	if err := m.IngredientVersionRevisionCore.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IngredientVersionRevisionCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientVersionRevisionCreate) UnmarshalBinary(b []byte) error {
	var res IngredientVersionRevisionCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
