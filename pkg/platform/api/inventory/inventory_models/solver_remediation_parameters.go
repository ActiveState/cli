// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SolverRemediationParameters Solver Remediation Parameters
//
// The data associated with the remediation. The fields used differ by remediation type. The ADVANCE_TIMESTAMP remediation type uses no parameters.
//
// swagger:model solverRemediationParameters
type SolverRemediationParameters struct {

	// The name of the feature. Used by remediation types: CHANGE_REQUIREMENT_NAME, CHANGE_REQUIREMENT_VERSION, REMOVE_REQUIREMENT, and REQUEST_PACKAGE_IMPORT.
	Feature string `json:"feature,omitempty"`

	// The namespace the feature belongs to. Used by remediation types: CHANGE_REQUIREMENT_NAME, CHANGE_REQUIREMENT_VERSION, REMOVE_REQUIREMENT, and REQUEST_PACKAGE_IMPORT.
	Namespace string `json:"namespace,omitempty"`

	// The platform id. Used by remediation type: REMOVE_PLATFORM.
	// Format: uuid
	PlatformID strfmt.UUID `json:"platform_id,omitempty"`
}

// Validate validates this solver remediation parameters
func (m *SolverRemediationParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolverRemediationParameters) validatePlatformID(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformID) { // not required
		return nil
	}

	if err := validate.FormatOf("platform_id", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this solver remediation parameters based on context it is used
func (m *SolverRemediationParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SolverRemediationParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolverRemediationParameters) UnmarshalBinary(b []byte) error {
	var res SolverRemediationParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
