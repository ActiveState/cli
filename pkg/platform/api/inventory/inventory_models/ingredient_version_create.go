// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IngredientVersionCreate Ingredient Version Create
//
// All specifiable fields of an ingredient version plus resources that can be linked to the ingredient version when it is created, but that are not part of the ingredient version model itself.
//
// swagger:model ingredientVersionCreate
type IngredientVersionCreate struct {
	IngredientVersionCreateAllOf0

	IngredientVersionCore

	IngredientVersionRevisionCreate
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IngredientVersionCreate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IngredientVersionCreateAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IngredientVersionCreateAllOf0 = aO0

	// AO1
	var aO1 IngredientVersionCore
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IngredientVersionCore = aO1

	// AO2
	var aO2 IngredientVersionRevisionCreate
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.IngredientVersionRevisionCreate = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IngredientVersionCreate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.IngredientVersionCreateAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.IngredientVersionCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.IngredientVersionRevisionCreate)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ingredient version create
func (m *IngredientVersionCreate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientVersionCreateAllOf0
	if err := m.IngredientVersionCreateAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionCore
	if err := m.IngredientVersionCore.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCreate
	if err := m.IngredientVersionRevisionCreate.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ingredient version create based on the context it is used
func (m *IngredientVersionCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IngredientVersionCreateAllOf0
	if err := m.IngredientVersionCreateAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionCore
	if err := m.IngredientVersionCore.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCreate
	if err := m.IngredientVersionRevisionCreate.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IngredientVersionCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientVersionCreate) UnmarshalBinary(b []byte) error {
	var res IngredientVersionCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
