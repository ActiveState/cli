// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngredientOptionSetIDRevision Ingredient Option Set ID Revision
//
// Identifies the ingredient option set associated with an ingredient version
//
// swagger:model ingredientOptionSetIdRevision
type IngredientOptionSetIDRevision struct {

	// ingredient option set id
	// Required: true
	// Format: uuid
	IngredientOptionSetID *strfmt.UUID `json:"ingredient_option_set_id"`

	// revision
	// Required: true
	Revision *int64 `json:"revision"`
}

// Validate validates this ingredient option set Id revision
func (m *IngredientOptionSetIDRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngredientOptionSetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientOptionSetIDRevision) validateIngredientOptionSetID(formats strfmt.Registry) error {

	if err := validate.Required("ingredient_option_set_id", "body", m.IngredientOptionSetID); err != nil {
		return err
	}

	if err := validate.FormatOf("ingredient_option_set_id", "body", "uuid", m.IngredientOptionSetID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngredientOptionSetIDRevision) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingredient option set Id revision based on context it is used
func (m *IngredientOptionSetIDRevision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngredientOptionSetIDRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientOptionSetIDRevision) UnmarshalBinary(b []byte) error {
	var res IngredientOptionSetIDRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
