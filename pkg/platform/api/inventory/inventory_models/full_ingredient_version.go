// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FullIngredientVersion Ingredient Version
//
// An ingredient version at a single revision with all revision sub-objects.
//
// swagger:model fullIngredientVersion
type FullIngredientVersion struct {
	FullIngredientVersionAllOf0

	IngredientVersionCore

	IngredientVersionRevisionCore

	RevisionedResource
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FullIngredientVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FullIngredientVersionAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FullIngredientVersionAllOf0 = aO0

	// AO1
	var aO1 IngredientVersionCore
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IngredientVersionCore = aO1

	// AO2
	var aO2 IngredientVersionRevisionCore
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.IngredientVersionRevisionCore = aO2

	// AO3
	var aO3 RevisionedResource
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.RevisionedResource = aO3

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FullIngredientVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.FullIngredientVersionAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.IngredientVersionCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.IngredientVersionRevisionCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.RevisionedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this full ingredient version
func (m *FullIngredientVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FullIngredientVersionAllOf0
	if err := m.FullIngredientVersionAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionCore
	if err := m.IngredientVersionCore.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCore
	if err := m.IngredientVersionRevisionCore.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RevisionedResource
	if err := m.RevisionedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this full ingredient version based on the context it is used
func (m *FullIngredientVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FullIngredientVersionAllOf0
	if err := m.FullIngredientVersionAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionCore
	if err := m.IngredientVersionCore.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with IngredientVersionRevisionCore
	if err := m.IngredientVersionRevisionCore.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RevisionedResource
	if err := m.RevisionedResource.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *FullIngredientVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullIngredientVersion) UnmarshalBinary(b []byte) error {
	var res FullIngredientVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
