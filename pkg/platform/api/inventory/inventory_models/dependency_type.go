// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DependencyType Dependency type
//
// The different types of dependencies supported by the platform.
//
// swagger:model dependencyType
type DependencyType string

func NewDependencyType(value DependencyType) *DependencyType {
	v := value
	return &v
}

const (

	// DependencyTypeBuild captures enum value "build"
	DependencyTypeBuild DependencyType = "build"

	// DependencyTypeRuntime captures enum value "runtime"
	DependencyTypeRuntime DependencyType = "runtime"

	// DependencyTypeTest captures enum value "test"
	DependencyTypeTest DependencyType = "test"
)

// for schema
var dependencyTypeEnum []interface{}

func init() {
	var res []DependencyType
	if err := json.Unmarshal([]byte(`["build","runtime","test"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dependencyTypeEnum = append(dependencyTypeEnum, v)
	}
}

func (m DependencyType) validateDependencyTypeEnum(path, location string, value DependencyType) error {
	if err := validate.EnumCase(path, location, value, dependencyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dependency type
func (m DependencyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDependencyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dependency type based on context it is used
func (m DependencyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
