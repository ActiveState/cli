// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildFlagDefault Build Flag Default
//
// swagger:model buildFlagDefault
type BuildFlagDefault struct {

	// At least one condition set from this list must be satisfied for this build flag default to be selected for a recipe (i.e condition sets are ORed together)
	ConditionSets []*ConditionSet `json:"condition_sets"`

	// The value for this build flag default
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this build flag default
func (m *BuildFlagDefault) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildFlagDefault) validateConditionSets(formats strfmt.Registry) error {
	if swag.IsZero(m.ConditionSets) { // not required
		return nil
	}

	for i := 0; i < len(m.ConditionSets); i++ {
		if swag.IsZero(m.ConditionSets[i]) { // not required
			continue
		}

		if m.ConditionSets[i] != nil {
			if err := m.ConditionSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("condition_sets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildFlagDefault) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this build flag default based on the context it is used
func (m *BuildFlagDefault) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditionSets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildFlagDefault) contextValidateConditionSets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConditionSets); i++ {

		if m.ConditionSets[i] != nil {
			if err := m.ConditionSets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("condition_sets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildFlagDefault) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildFlagDefault) UnmarshalBinary(b []byte) error {
	var res BuildFlagDefault
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
