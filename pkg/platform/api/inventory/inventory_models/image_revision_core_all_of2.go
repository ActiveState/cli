// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageRevisionCoreAllOf2 image revision core all of2
//
// swagger:model imageRevisionCoreAllOf2
type ImageRevisionCoreAllOf2 struct {

	// conditions
	Conditions []*Condition `json:"conditions"`

	// The status of the revision. This can be one of stable, unstable, deleted, or deprecated.
	// Enum: [deleted deprecated stable unstable]
	Status string `json:"status,omitempty"`
}

// Validate validates this image revision core all of2
func (m *ImageRevisionCoreAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageRevisionCoreAllOf2) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var imageRevisionCoreAllOf2TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deleted","deprecated","stable","unstable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageRevisionCoreAllOf2TypeStatusPropEnum = append(imageRevisionCoreAllOf2TypeStatusPropEnum, v)
	}
}

const (

	// ImageRevisionCoreAllOf2StatusDeleted captures enum value "deleted"
	ImageRevisionCoreAllOf2StatusDeleted string = "deleted"

	// ImageRevisionCoreAllOf2StatusDeprecated captures enum value "deprecated"
	ImageRevisionCoreAllOf2StatusDeprecated string = "deprecated"

	// ImageRevisionCoreAllOf2StatusStable captures enum value "stable"
	ImageRevisionCoreAllOf2StatusStable string = "stable"

	// ImageRevisionCoreAllOf2StatusUnstable captures enum value "unstable"
	ImageRevisionCoreAllOf2StatusUnstable string = "unstable"
)

// prop value enum
func (m *ImageRevisionCoreAllOf2) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageRevisionCoreAllOf2TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageRevisionCoreAllOf2) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this image revision core all of2 based on the context it is used
func (m *ImageRevisionCoreAllOf2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageRevisionCoreAllOf2) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageRevisionCoreAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageRevisionCoreAllOf2) UnmarshalBinary(b []byte) error {
	var res ImageRevisionCoreAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
