// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngredientAllInOneCreate Ingredient All-in-One Create
//
// Everything needed to create an ingredient and/or versions and/or revisions in a single request.
//
// swagger:model ingredientAllInOneCreate
type IngredientAllInOneCreate struct {

	// Authors to associate with each version. They will be created if they don't already exist. If an ingredient version already exist its authors will not be updated.
	Authors []*AuthorCore `json:"authors"`

	// Build scripts to associate with each version. They will be created if they don't already exist.
	BuildScripts []*BuildScriptCore `json:"build_scripts"`

	// ingredient
	// Required: true
	Ingredient *IngredientCore `json:"ingredient"`

	// Patches to associate with each version. They will be created if they don't already exist.
	Patches []*PatchCore `json:"patches"`

	// versions
	// Required: true
	// Min Items: 1
	Versions []*IngredientVersionAllInOneCreate `json:"versions"`
}

// Validate validates this ingredient all in one create
func (m *IngredientAllInOneCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientAllInOneCreate) validateAuthors(formats strfmt.Registry) error {
	if swag.IsZero(m.Authors) { // not required
		return nil
	}

	for i := 0; i < len(m.Authors); i++ {
		if swag.IsZero(m.Authors[i]) { // not required
			continue
		}

		if m.Authors[i] != nil {
			if err := m.Authors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) validateBuildScripts(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildScripts) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildScripts); i++ {
		if swag.IsZero(m.BuildScripts[i]) { // not required
			continue
		}

		if m.BuildScripts[i] != nil {
			if err := m.BuildScripts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("build_scripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) validateIngredient(formats strfmt.Registry) error {

	if err := validate.Required("ingredient", "body", m.Ingredient); err != nil {
		return err
	}

	if m.Ingredient != nil {
		if err := m.Ingredient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingredient")
			}
			return err
		}
	}

	return nil
}

func (m *IngredientAllInOneCreate) validatePatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Patches) { // not required
		return nil
	}

	for i := 0; i < len(m.Patches); i++ {
		if swag.IsZero(m.Patches[i]) { // not required
			continue
		}

		if m.Patches[i] != nil {
			if err := m.Patches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) validateVersions(formats strfmt.Registry) error {

	if err := validate.Required("versions", "body", m.Versions); err != nil {
		return err
	}

	iVersionsSize := int64(len(m.Versions))

	if err := validate.MinItems("versions", "body", iVersionsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ingredient all in one create based on the context it is used
func (m *IngredientAllInOneCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildScripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngredient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientAllInOneCreate) contextValidateAuthors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Authors); i++ {

		if m.Authors[i] != nil {
			if err := m.Authors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) contextValidateBuildScripts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BuildScripts); i++ {

		if m.BuildScripts[i] != nil {
			if err := m.BuildScripts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("build_scripts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) contextValidateIngredient(ctx context.Context, formats strfmt.Registry) error {

	if m.Ingredient != nil {
		if err := m.Ingredient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingredient")
			}
			return err
		}
	}

	return nil
}

func (m *IngredientAllInOneCreate) contextValidatePatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Patches); i++ {

		if m.Patches[i] != nil {
			if err := m.Patches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngredientAllInOneCreate) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Versions); i++ {

		if m.Versions[i] != nil {
			if err := m.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngredientAllInOneCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientAllInOneCreate) UnmarshalBinary(b []byte) error {
	var res IngredientAllInOneCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
