// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngredientVersionRevisionCreateAllOf0 ingredient version revision create all of0
//
// swagger:model ingredientVersionRevisionCreateAllOf0
type IngredientVersionRevisionCreateAllOf0 struct {

	// The build script(s) used to build this ingredient version, referenced by their build script ID.
	BuildScripts []strfmt.UUID `json:"build_scripts"`

	// The ingredient option sets that are used by default with this builder. This array may only be non-empty for ingredients in the builder namespace. Each ingredient option set listed must have a unique group. Ingredient options sets are applied to the builder in the order listed here. Defaults listed here may be overridden on a per-ingredient basis by specifying ingredient option set overrides on an ingredient using this builder.
	DefaultIngredientOptionSets []strfmt.UUID `json:"default_ingredient_option_sets"`

	// The ingredient option sets that are used to build this ingredient. This array may only be non-empty for ingredients not in the builder namespace. Each ingredient option set listed must have a unique group. Ingredient options sets are applied to the builder in the order listed here. If any set listed here has the same group as a default set on this ingredient's builder, the set listed here will override/replace the set with the same group on the builder.
	IngredientOptionSetOverrides []strfmt.UUID `json:"ingredient_option_set_overrides"`

	// The patch(es) applied to this ingredient version's source code, referenced by their patch ID.
	Patches []*IngredientVersionRevisionCreatePatch `json:"patches"`
}

// Validate validates this ingredient version revision create all of0
func (m *IngredientVersionRevisionCreateAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultIngredientOptionSets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientOptionSetOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientVersionRevisionCreateAllOf0) validateBuildScripts(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildScripts) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildScripts); i++ {

		if err := validate.FormatOf("build_scripts"+"."+strconv.Itoa(i), "body", "uuid", m.BuildScripts[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *IngredientVersionRevisionCreateAllOf0) validateDefaultIngredientOptionSets(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultIngredientOptionSets) { // not required
		return nil
	}

	for i := 0; i < len(m.DefaultIngredientOptionSets); i++ {

		if err := validate.FormatOf("default_ingredient_option_sets"+"."+strconv.Itoa(i), "body", "uuid", m.DefaultIngredientOptionSets[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *IngredientVersionRevisionCreateAllOf0) validateIngredientOptionSetOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.IngredientOptionSetOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.IngredientOptionSetOverrides); i++ {

		if err := validate.FormatOf("ingredient_option_set_overrides"+"."+strconv.Itoa(i), "body", "uuid", m.IngredientOptionSetOverrides[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *IngredientVersionRevisionCreateAllOf0) validatePatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Patches) { // not required
		return nil
	}

	for i := 0; i < len(m.Patches); i++ {
		if swag.IsZero(m.Patches[i]) { // not required
			continue
		}

		if m.Patches[i] != nil {
			if err := m.Patches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ingredient version revision create all of0 based on the context it is used
func (m *IngredientVersionRevisionCreateAllOf0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientVersionRevisionCreateAllOf0) contextValidatePatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Patches); i++ {

		if m.Patches[i] != nil {
			if err := m.Patches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngredientVersionRevisionCreateAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientVersionRevisionCreateAllOf0) UnmarshalBinary(b []byte) error {
	var res IngredientVersionRevisionCreateAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
