// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IngredientVersionRevisionCreateAllOf0PatchesItems v1 ingredient version revision create all of0 patches items
//
// swagger:model v1IngredientVersionRevisionCreateAllOf0PatchesItems
type V1IngredientVersionRevisionCreateAllOf0PatchesItems struct {

	// patch id
	// Required: true
	// Format: uuid
	PatchID *strfmt.UUID `json:"patch_id"`

	// sequence number
	// Required: true
	// Minimum: 1
	SequenceNumber *int64 `json:"sequence_number"`
}

// Validate validates this v1 ingredient version revision create all of0 patches items
func (m *V1IngredientVersionRevisionCreateAllOf0PatchesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionRevisionCreateAllOf0PatchesItems) validatePatchID(formats strfmt.Registry) error {

	if err := validate.Required("patch_id", "body", m.PatchID); err != nil {
		return err
	}

	if err := validate.FormatOf("patch_id", "body", "uuid", m.PatchID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionRevisionCreateAllOf0PatchesItems) validateSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("sequence_number", "body", m.SequenceNumber); err != nil {
		return err
	}

	if err := validate.MinimumInt("sequence_number", "body", int64(*m.SequenceNumber), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionRevisionCreateAllOf0PatchesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionRevisionCreateAllOf0PatchesItems) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionRevisionCreateAllOf0PatchesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
