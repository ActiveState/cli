// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngredientVersionRevisionCore Ingredient Version Revision Core
//
// The fields of an ingredient version that can be updated by creating a new revision
//
// swagger:model ingredientVersionRevisionCore
type IngredientVersionRevisionCore struct {

	// The SPDX license expression based on ActiveState's analysis of the package's licensing
	ActivestateLicenseExpression string `json:"activestate_license_expression,omitempty"`

	// The platform user_id for the author of the revision. This will be automatically populated for writes based on the credentials you provide to the API.
	// Format: uuid
	AuthorPlatformUserID strfmt.UUID `json:"author_platform_user_id,omitempty"`

	// Camel-specific metadata needed to build this ingredient version revision in camel, if there is any.
	CamelExtras interface{} `json:"camel_extras,omitempty"`

	// A comment describing the revision.
	// Required: true
	Comment *string `json:"comment"`

	// dependencies
	Dependencies []Dependency `json:"dependencies"`

	// Whether or not this revision is indemnified for customers paying for indemnification. If set to null, then this will use the is_indemnified value of the previous revision or false if this is the first revision.
	IsIndemnified *bool `json:"is_indemnified,omitempty"`

	// Whether or not this is a stable release of the package
	IsStableRelease *bool `json:"is_stable_release,omitempty"`

	// Whether this revision should be considered 'stable'. When a new stable revision is created, it supercedes any existing stable revision and becomes the default revision of the revisioned resource going forward.
	IsStableRevision *bool `json:"is_stable_revision,omitempty"`

	// An S3 URI to a JSON manifest mapping files in the package to licenses for that file
	// Format: uri
	LicenseManifestURI *strfmt.URI `json:"license_manifest_uri,omitempty"`

	// S3 URL where the source distribution is stored for our platform
	// Format: uri
	PlatformSourceURI *strfmt.URI `json:"platform_source_uri,omitempty"`

	// provided features
	// Required: true
	ProvidedFeatures []*ProvidedFeature `json:"provided_features"`

	// The reason this revision exists.
	// Required: true
	// Enum: [import manual_change smart_import]
	Reason *string `json:"reason"`

	// The SPDX license expression based on running an automated scanner to determine the package's licensing
	ScannerLicenseExpression string `json:"scanner_license_expression,omitempty"`

	// A checksum of the source distribution. The actual type of the checksum (MD5, S3 Etag, etc.) is not specified. It's assumed that the system that populates and uses this data will know how to work with these checksums.
	SourceChecksum *string `json:"source_checksum,omitempty"`

	// The status of the revision. This can be one of stable, unstable, deleted, or deprecated. This field is required on writes and replaces the is_stable_revision_field
	// Enum: [deleted deprecated stable unstable]
	Status string `json:"status,omitempty"`
}

// Validate validates this ingredient version revision core
func (m *IngredientVersionRevisionCore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorPlatformUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseManifestURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformSourceURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientVersionRevisionCore) validateAuthorPlatformUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorPlatformUserID) { // not required
		return nil
	}

	if err := validate.FormatOf("author_platform_user_id", "body", "uuid", m.AuthorPlatformUserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngredientVersionRevisionCore) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *IngredientVersionRevisionCore) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {

		if err := m.Dependencies[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IngredientVersionRevisionCore) validateLicenseManifestURI(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseManifestURI) { // not required
		return nil
	}

	if err := validate.FormatOf("license_manifest_uri", "body", "uri", m.LicenseManifestURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngredientVersionRevisionCore) validatePlatformSourceURI(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformSourceURI) { // not required
		return nil
	}

	if err := validate.FormatOf("platform_source_uri", "body", "uri", m.PlatformSourceURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IngredientVersionRevisionCore) validateProvidedFeatures(formats strfmt.Registry) error {

	if err := validate.Required("provided_features", "body", m.ProvidedFeatures); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedFeatures); i++ {
		if swag.IsZero(m.ProvidedFeatures[i]) { // not required
			continue
		}

		if m.ProvidedFeatures[i] != nil {
			if err := m.ProvidedFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provided_features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var ingredientVersionRevisionCoreTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["import","manual_change","smart_import"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingredientVersionRevisionCoreTypeReasonPropEnum = append(ingredientVersionRevisionCoreTypeReasonPropEnum, v)
	}
}

const (

	// IngredientVersionRevisionCoreReasonImport captures enum value "import"
	IngredientVersionRevisionCoreReasonImport string = "import"

	// IngredientVersionRevisionCoreReasonManualChange captures enum value "manual_change"
	IngredientVersionRevisionCoreReasonManualChange string = "manual_change"

	// IngredientVersionRevisionCoreReasonSmartImport captures enum value "smart_import"
	IngredientVersionRevisionCoreReasonSmartImport string = "smart_import"
)

// prop value enum
func (m *IngredientVersionRevisionCore) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ingredientVersionRevisionCoreTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IngredientVersionRevisionCore) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", *m.Reason); err != nil {
		return err
	}

	return nil
}

var ingredientVersionRevisionCoreTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deleted","deprecated","stable","unstable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingredientVersionRevisionCoreTypeStatusPropEnum = append(ingredientVersionRevisionCoreTypeStatusPropEnum, v)
	}
}

const (

	// IngredientVersionRevisionCoreStatusDeleted captures enum value "deleted"
	IngredientVersionRevisionCoreStatusDeleted string = "deleted"

	// IngredientVersionRevisionCoreStatusDeprecated captures enum value "deprecated"
	IngredientVersionRevisionCoreStatusDeprecated string = "deprecated"

	// IngredientVersionRevisionCoreStatusStable captures enum value "stable"
	IngredientVersionRevisionCoreStatusStable string = "stable"

	// IngredientVersionRevisionCoreStatusUnstable captures enum value "unstable"
	IngredientVersionRevisionCoreStatusUnstable string = "unstable"
)

// prop value enum
func (m *IngredientVersionRevisionCore) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ingredientVersionRevisionCoreTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IngredientVersionRevisionCore) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ingredient version revision core based on the context it is used
func (m *IngredientVersionRevisionCore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngredientVersionRevisionCore) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dependencies); i++ {

		if err := m.Dependencies[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IngredientVersionRevisionCore) contextValidateProvidedFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedFeatures); i++ {

		if m.ProvidedFeatures[i] != nil {
			if err := m.ProvidedFeatures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provided_features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngredientVersionRevisionCore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngredientVersionRevisionCore) UnmarshalBinary(b []byte) error {
	var res IngredientVersionRevisionCore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
