// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1IngredientVersionCreate Ingredient Version Create
//
// All specifiable fields of an ingredient version plus resources that can be linked to the ingredient version when it is created, but that are not part of the ingredient version model itself.
//
// swagger:model v1IngredientVersionCreate
type V1IngredientVersionCreate struct {
	V1IngredientVersionCreateAllOf0

	V1IngredientVersionCore

	V1IngredientVersionRevisionCreate
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersionCreate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 V1IngredientVersionCreateAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.V1IngredientVersionCreateAllOf0 = aO0

	// AO1
	var aO1 V1IngredientVersionCore
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.V1IngredientVersionCore = aO1

	// AO2
	var aO2 V1IngredientVersionRevisionCreate
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.V1IngredientVersionRevisionCreate = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersionCreate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.V1IngredientVersionCreateAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.V1IngredientVersionCore)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.V1IngredientVersionRevisionCreate)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version create
func (m *V1IngredientVersionCreate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with V1IngredientVersionCreateAllOf0
	if err := m.V1IngredientVersionCreateAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1IngredientVersionCore
	if err := m.V1IngredientVersionCore.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1IngredientVersionRevisionCreate
	if err := m.V1IngredientVersionRevisionCreate.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionCreate) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
