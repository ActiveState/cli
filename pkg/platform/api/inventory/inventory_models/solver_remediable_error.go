// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SolverRemediableError Solver Remediable Error
//
// A solver error with suggested remediation steps
//
// swagger:model solverRemediableError
type SolverRemediableError struct {

	// The type of solver error that occurred
	// Enum: [REQUIREMENT_CONFLICTS_WITH_PLATFORM REQUIREMENT_UNAVAILABLE REQUIREMENT_UNAVAILABLE_AT_TIMESTAMP TRANSITIVE_DEPENDENCY_UNAVAILABLE TRANSITIVE_DEPENDENCY_UNAVAILABLE_AT_TIMESTAMP]
	ErrorType string `json:"error_type,omitempty"`

	// A list of requirements, transitive dependencies, or platforms that caused this error
	Incompatibilities []*SolverIncompatibility `json:"incompatibilities"`

	// The requirements that caused the error
	Requirements []*OrderRequirement `json:"requirements"`

	// A list of remediations a user can take to resolve this error
	SuggestedRemediations []*SolverRemediation `json:"suggested_remediations"`
}

// Validate validates this solver remediable error
func (m *SolverRemediableError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncompatibilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestedRemediations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var solverRemediableErrorTypeErrorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUIREMENT_CONFLICTS_WITH_PLATFORM","REQUIREMENT_UNAVAILABLE","REQUIREMENT_UNAVAILABLE_AT_TIMESTAMP","TRANSITIVE_DEPENDENCY_UNAVAILABLE","TRANSITIVE_DEPENDENCY_UNAVAILABLE_AT_TIMESTAMP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		solverRemediableErrorTypeErrorTypePropEnum = append(solverRemediableErrorTypeErrorTypePropEnum, v)
	}
}

const (

	// SolverRemediableErrorErrorTypeREQUIREMENTCONFLICTSWITHPLATFORM captures enum value "REQUIREMENT_CONFLICTS_WITH_PLATFORM"
	SolverRemediableErrorErrorTypeREQUIREMENTCONFLICTSWITHPLATFORM string = "REQUIREMENT_CONFLICTS_WITH_PLATFORM"

	// SolverRemediableErrorErrorTypeREQUIREMENTUNAVAILABLE captures enum value "REQUIREMENT_UNAVAILABLE"
	SolverRemediableErrorErrorTypeREQUIREMENTUNAVAILABLE string = "REQUIREMENT_UNAVAILABLE"

	// SolverRemediableErrorErrorTypeREQUIREMENTUNAVAILABLEATTIMESTAMP captures enum value "REQUIREMENT_UNAVAILABLE_AT_TIMESTAMP"
	SolverRemediableErrorErrorTypeREQUIREMENTUNAVAILABLEATTIMESTAMP string = "REQUIREMENT_UNAVAILABLE_AT_TIMESTAMP"

	// SolverRemediableErrorErrorTypeTRANSITIVEDEPENDENCYUNAVAILABLE captures enum value "TRANSITIVE_DEPENDENCY_UNAVAILABLE"
	SolverRemediableErrorErrorTypeTRANSITIVEDEPENDENCYUNAVAILABLE string = "TRANSITIVE_DEPENDENCY_UNAVAILABLE"

	// SolverRemediableErrorErrorTypeTRANSITIVEDEPENDENCYUNAVAILABLEATTIMESTAMP captures enum value "TRANSITIVE_DEPENDENCY_UNAVAILABLE_AT_TIMESTAMP"
	SolverRemediableErrorErrorTypeTRANSITIVEDEPENDENCYUNAVAILABLEATTIMESTAMP string = "TRANSITIVE_DEPENDENCY_UNAVAILABLE_AT_TIMESTAMP"
)

// prop value enum
func (m *SolverRemediableError) validateErrorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, solverRemediableErrorTypeErrorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SolverRemediableError) validateErrorType(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorTypeEnum("error_type", "body", m.ErrorType); err != nil {
		return err
	}

	return nil
}

func (m *SolverRemediableError) validateIncompatibilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Incompatibilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Incompatibilities); i++ {
		if swag.IsZero(m.Incompatibilities[i]) { // not required
			continue
		}

		if m.Incompatibilities[i] != nil {
			if err := m.Incompatibilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SolverRemediableError) validateRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.Requirements) { // not required
		return nil
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SolverRemediableError) validateSuggestedRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.SuggestedRemediations) { // not required
		return nil
	}

	for i := 0; i < len(m.SuggestedRemediations); i++ {
		if swag.IsZero(m.SuggestedRemediations[i]) { // not required
			continue
		}

		if m.SuggestedRemediations[i] != nil {
			if err := m.SuggestedRemediations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggested_remediations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this solver remediable error based on the context it is used
func (m *SolverRemediableError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncompatibilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuggestedRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolverRemediableError) contextValidateIncompatibilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Incompatibilities); i++ {

		if m.Incompatibilities[i] != nil {
			if err := m.Incompatibilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SolverRemediableError) contextValidateRequirements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Requirements); i++ {

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SolverRemediableError) contextValidateSuggestedRemediations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SuggestedRemediations); i++ {

		if m.SuggestedRemediations[i] != nil {
			if err := m.SuggestedRemediations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggested_remediations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SolverRemediableError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolverRemediableError) UnmarshalBinary(b []byte) error {
	var res SolverRemediableError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
