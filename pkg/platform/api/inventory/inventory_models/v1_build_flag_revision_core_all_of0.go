// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BuildFlagRevisionCoreAllOf0 v1 build flag revision core all of0
//
// swagger:model v1BuildFlagRevisionCoreAllOf0
type V1BuildFlagRevisionCoreAllOf0 struct {

	// The build flag defaults
	// Required: true
	// Min Items: 1
	Defaults []*V1BuildFlagRevisionCoreAllOf0DefaultsItems `json:"defaults"`

	// The build flag values
	// Required: true
	// Min Items: 1
	Values []*V1BuildFlagRevisionCoreAllOf0ValuesItems `json:"values"`
}

// Validate validates this v1 build flag revision core all of0
func (m *V1BuildFlagRevisionCoreAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BuildFlagRevisionCoreAllOf0) validateDefaults(formats strfmt.Registry) error {

	if err := validate.Required("defaults", "body", m.Defaults); err != nil {
		return err
	}

	iDefaultsSize := int64(len(m.Defaults))

	if err := validate.MinItems("defaults", "body", iDefaultsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Defaults); i++ {
		if swag.IsZero(m.Defaults[i]) { // not required
			continue
		}

		if m.Defaults[i] != nil {
			if err := m.Defaults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("defaults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1BuildFlagRevisionCoreAllOf0) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	iValuesSize := int64(len(m.Values))

	if err := validate.MinItems("values", "body", iValuesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BuildFlagRevisionCoreAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BuildFlagRevisionCoreAllOf0) UnmarshalBinary(b []byte) error {
	var res V1BuildFlagRevisionCoreAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
