// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ingredient An ingredient is a single source code item that we build, such as a language core, C library, or language package.  This information is mirrored from the kitchen service which is the ultimate source of this data.  Architecture is likley to change as that service is developed.
//
//
// swagger:model Ingredient
type Ingredient struct {

	// added
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// for language
	ForLanguage *string `json:"forLanguage,omitempty"`

	// ingredient ID
	// Format: uuid
	IngredientID strfmt.UUID `json:"ingredientID,omitempty"`

	// is language core
	IsLanguageCore bool `json:"isLanguageCore,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// versions
	Versions []string `json:"versions"`

	// website URI
	// Format: uri
	WebsiteURI *strfmt.URI `json:"websiteURI,omitempty"`
}

// Validate validates this ingredient
func (m *Ingredient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsiteURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ingredient) validateAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateIngredientID(formats strfmt.Registry) error {

	if swag.IsZero(m.IngredientID) { // not required
		return nil
	}

	if err := validate.FormatOf("ingredientID", "body", "uuid", m.IngredientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateWebsiteURI(formats strfmt.Registry) error {

	if swag.IsZero(m.WebsiteURI) { // not required
		return nil
	}

	if err := validate.FormatOf("websiteURI", "body", "uri", m.WebsiteURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Ingredient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ingredient) UnmarshalBinary(b []byte) error {
	var res Ingredient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
