// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UsageInfo usage info
//
// swagger:model UsageInfo
type UsageInfo struct {

	// active users
	ActiveUsers []*UsageInfoActiveUsersItems0 `json:"activeUsers"`

	// grouping
	Grouping string `json:"grouping,omitempty"`
}

// Validate validates this usage info
func (m *UsageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsageInfo) validateActiveUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveUsers); i++ {
		if swag.IsZero(m.ActiveUsers[i]) { // not required
			continue
		}

		if m.ActiveUsers[i] != nil {
			if err := m.ActiveUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this usage info based on the context it is used
func (m *UsageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsageInfo) contextValidateActiveUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveUsers); i++ {

		if m.ActiveUsers[i] != nil {
			if err := m.ActiveUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UsageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsageInfo) UnmarshalBinary(b []byte) error {
	var res UsageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UsageInfoActiveUsersItems0 usage info active users items0
//
// swagger:model UsageInfoActiveUsersItems0
type UsageInfoActiveUsersItems0 struct {

	// date
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// users
	Users int64 `json:"users,omitempty"`
}

// Validate validates this usage info active users items0
func (m *UsageInfoActiveUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsageInfoActiveUsersItems0) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this usage info active users items0 based on context it is used
func (m *UsageInfoActiveUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UsageInfoActiveUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsageInfoActiveUsersItems0) UnmarshalBinary(b []byte) error {
	var res UsageInfoActiveUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
