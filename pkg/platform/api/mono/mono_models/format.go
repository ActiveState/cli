// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Format An instance of a distro packaged for a specific distribution channel.
//
//
// swagger:model Format
type Format struct {

	// URI
	// Format: uri
	URI *strfmt.URI `json:"URI,omitempty"`

	// added
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// channel
	Channel string `json:"channel,omitempty"`

	// distro ID
	// Format: uuid
	DistroID strfmt.UUID `json:"distroID,omitempty"`

	// expires
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires,omitempty"`

	// filename
	Filename *string `json:"filename,omitempty"`

	// filesize
	Filesize *int64 `json:"filesize,omitempty"`

	// format ID
	// Format: uuid
	FormatID strfmt.UUID `json:"formatID,omitempty"`

	// project ID
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectID,omitempty"`
}

// Validate validates this format
func (m *Format) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistroID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Format) validateURI(formats strfmt.Registry) error {

	if swag.IsZero(m.URI) { // not required
		return nil
	}

	if err := validate.FormatOf("URI", "body", "uri", m.URI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Format) validateAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Format) validateDistroID(formats strfmt.Registry) error {

	if swag.IsZero(m.DistroID) { // not required
		return nil
	}

	if err := validate.FormatOf("distroID", "body", "uuid", m.DistroID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Format) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(m.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Format) validateFormatID(formats strfmt.Registry) error {

	if swag.IsZero(m.FormatID) { // not required
		return nil
	}

	if err := validate.FormatOf("formatID", "body", "uuid", m.FormatID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Format) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectID", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Format) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Format) UnmarshalBinary(b []byte) error {
	var res Format
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
