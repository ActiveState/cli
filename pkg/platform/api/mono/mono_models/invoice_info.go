// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceInfo invoice info
//
// swagger:model InvoiceInfo
type InvoiceInfo struct {

	// billing address
	// Required: true
	BillingAddress *AddressInfo `json:"billingAddress"`

	// email
	// Required: true
	Email *string `json:"email"`

	// shipping address
	// Required: true
	ShippingAddress *AddressInfo `json:"shippingAddress"`

	// stripe token
	// Required: true
	StripeToken *string `json:"stripeToken"`

	// tier name
	// Required: true
	TierName *string `json:"tierName"`

	// users
	// Required: true
	Users *int64 `json:"users"`
}

// Validate validates this invoice info
func (m *InvoiceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceInfo) validateBillingAddress(formats strfmt.Registry) error {

	if err := validate.Required("billingAddress", "body", m.BillingAddress); err != nil {
		return err
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceInfo) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceInfo) validateShippingAddress(formats strfmt.Registry) error {

	if err := validate.Required("shippingAddress", "body", m.ShippingAddress); err != nil {
		return err
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceInfo) validateStripeToken(formats strfmt.Registry) error {

	if err := validate.Required("stripeToken", "body", m.StripeToken); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceInfo) validateTierName(formats strfmt.Registry) error {

	if err := validate.Required("tierName", "body", m.TierName); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceInfo) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this invoice info based on the context it is used
func (m *InvoiceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceInfo) contextValidateBillingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingAddress != nil {
		if err := m.BillingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceInfo) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceInfo) UnmarshalBinary(b []byte) error {
	var res InvoiceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
