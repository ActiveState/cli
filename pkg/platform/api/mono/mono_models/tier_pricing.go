// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TierPricing tier pricing
//
// swagger:model TierPricing
type TierPricing struct {
	Tier

	// price per user
	PricePerUser int64 `json:"pricePerUser,omitempty"`

	// tier price
	TierPrice int64 `json:"tierPrice,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TierPricing) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Tier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Tier = aO0

	// AO1
	var dataAO1 struct {
		PricePerUser int64 `json:"pricePerUser,omitempty"`

		TierPrice int64 `json:"tierPrice,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.PricePerUser = dataAO1.PricePerUser

	m.TierPrice = dataAO1.TierPrice

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TierPricing) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Tier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		PricePerUser int64 `json:"pricePerUser,omitempty"`

		TierPrice int64 `json:"tierPrice,omitempty"`
	}

	dataAO1.PricePerUser = m.PricePerUser

	dataAO1.TierPrice = m.TierPrice

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tier pricing
func (m *TierPricing) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Tier
	if err := m.Tier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this tier pricing based on the context it is used
func (m *TierPricing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Tier
	if err := m.Tier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TierPricing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TierPricing) UnmarshalBinary(b []byte) error {
	var res TierPricing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
