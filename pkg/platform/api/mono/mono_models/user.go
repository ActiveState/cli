// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// e u l a accepted
	// Format: date-time
	EULAAccepted *strfmt.DateTime `json:"EULAAccepted,omitempty"`

	// t o t p enabled
	TOTPEnabled *bool `json:"TOTPEnabled,omitempty"`

	// acl
	ACL map[string]bool `json:"acl,omitempty"`

	// added
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// can unlink account
	CanUnlinkAccount bool `json:"canUnlinkAccount,omitempty"`

	// datetime format
	DatetimeFormat string `json:"datetimeFormat,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expires
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires,omitempty"`

	// is paid user
	IsPaidUser *bool `json:"isPaidUser,omitempty"`

	// last login
	// Format: date-time
	LastLogin *strfmt.DateTime `json:"lastLogin,omitempty"`

	// linked accounts
	LinkedAccounts []string `json:"linkedAccounts"`

	// name
	Name string `json:"name,omitempty"`

	// noncompliance status
	NoncomplianceStatus *UserNoncomplianceStatus `json:"noncomplianceStatus,omitempty"`

	// organizations
	Organizations []*UserOrganizationsItems0 `json:"organizations"`

	// send marketing email
	SendMarketingEmail bool `json:"sendMarketingEmail,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// user ID
	// Format: uuid
	UserID strfmt.UUID `json:"userID,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// verified email
	VerifiedEmail bool `json:"verifiedEmail,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEULAAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoncomplianceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEULAAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.EULAAccepted) { // not required
		return nil
	}

	if err := validate.FormatOf("EULAAccepted", "body", "date-time", m.EULAAccepted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAdded(formats strfmt.Registry) error {
	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateExpires(formats strfmt.Registry) error {
	if swag.IsZero(m.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLogin) { // not required
		return nil
	}

	if err := validate.FormatOf("lastLogin", "body", "date-time", m.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateNoncomplianceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NoncomplianceStatus) { // not required
		return nil
	}

	if m.NoncomplianceStatus != nil {
		if err := m.NoncomplianceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noncomplianceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(m.Organizations) { // not required
		return nil
	}

	for i := 0; i < len(m.Organizations); i++ {
		if swag.IsZero(m.Organizations[i]) { // not required
			continue
		}

		if m.Organizations[i] != nil {
			if err := m.Organizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("userID", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNoncomplianceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateNoncomplianceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.NoncomplianceStatus != nil {
		if err := m.NoncomplianceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noncomplianceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Organizations); i++ {

		if m.Organizations[i] != nil {
			if err := m.Organizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserNoncomplianceStatus user noncompliance status
//
// swagger:model UserNoncomplianceStatus
type UserNoncomplianceStatus struct {

	// company name
	CompanyName string `json:"companyName,omitempty"`

	// type
	Type int32 `json:"type"`
}

// Validate validates this user noncompliance status
func (m *UserNoncomplianceStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user noncompliance status based on context it is used
func (m *UserNoncomplianceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserNoncomplianceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserNoncomplianceStatus) UnmarshalBinary(b []byte) error {
	var res UserNoncomplianceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserOrganizationsItems0 user organizations items0
//
// swagger:model UserOrganizationsItems0
type UserOrganizationsItems0 struct {

	// u r lname
	URLname string `json:"URLname,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// organization ID
	// Format: uuid
	OrganizationID strfmt.UUID `json:"organizationID,omitempty"`

	// personal
	Personal bool `json:"personal,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`
}

// Validate validates this user organizations items0
func (m *UserOrganizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOrganizationsItems0) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserOrganizationsItems0) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationID", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user organizations items0 based on context it is used
func (m *UserOrganizationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserOrganizationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOrganizationsItems0) UnmarshalBinary(b []byte) error {
	var res UserOrganizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
