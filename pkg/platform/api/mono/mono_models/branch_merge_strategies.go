// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BranchMergeStrategies branch merge strategies
//
// swagger:model BranchMergeStrategies
type BranchMergeStrategies struct {

	// conflicts
	Conflicts []*RequirementKey `json:"conflicts"`

	// keep changes
	KeepChanges []*CommitChangeEditable `json:"keep-changes"`

	// overwrite changes
	OverwriteChanges []*CommitChangeEditable `json:"overwrite-changes"`
}

// Validate validates this branch merge strategies
func (m *BranchMergeStrategies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConflicts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverwriteChanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchMergeStrategies) validateConflicts(formats strfmt.Registry) error {

	if swag.IsZero(m.Conflicts) { // not required
		return nil
	}

	for i := 0; i < len(m.Conflicts); i++ {
		if swag.IsZero(m.Conflicts[i]) { // not required
			continue
		}

		if m.Conflicts[i] != nil {
			if err := m.Conflicts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conflicts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BranchMergeStrategies) validateKeepChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.KeepChanges) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepChanges); i++ {
		if swag.IsZero(m.KeepChanges[i]) { // not required
			continue
		}

		if m.KeepChanges[i] != nil {
			if err := m.KeepChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keep-changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BranchMergeStrategies) validateOverwriteChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.OverwriteChanges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverwriteChanges); i++ {
		if swag.IsZero(m.OverwriteChanges[i]) { // not required
			continue
		}

		if m.OverwriteChanges[i] != nil {
			if err := m.OverwriteChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overwrite-changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchMergeStrategies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchMergeStrategies) UnmarshalBinary(b []byte) error {
	var res BranchMergeStrategies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
