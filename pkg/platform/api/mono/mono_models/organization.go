// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization organization
//
// swagger:model Organization
type Organization struct {

	// u r lname
	URLname string `json:"URLname,omitempty"`

	// add ons
	AddOns map[string]AddOn `json:"addOns,omitempty"`

	// added
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// billing date
	BillingDate *string `json:"billingDate,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// has ever had trial
	HasEverHadTrial bool `json:"hasEverHadTrial,omitempty"`

	// member count
	MemberCount int64 `json:"memberCount,omitempty"`

	// Deprecated; use displayName instead.
	Name *string `json:"name,omitempty"`

	// organization ID
	// Format: uuid
	OrganizationID strfmt.UUID `json:"organizationID,omitempty"`

	// owner
	Owner bool `json:"owner,omitempty"`

	// personal
	Personal bool `json:"personal,omitempty"`

	// role
	Role *Role `json:"role,omitempty"`

	// subscription status
	SubscriptionStatus *string `json:"subscriptionStatus,omitempty"`

	// tier
	Tier string `json:"tier,omitempty"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddOns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateAddOns(formats strfmt.Registry) error {
	if swag.IsZero(m.AddOns) { // not required
		return nil
	}

	for k := range m.AddOns {

		if err := validate.Required("addOns"+"."+k, "body", m.AddOns[k]); err != nil {
			return err
		}
		if val, ok := m.AddOns[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Organization) validateAdded(formats strfmt.Registry) error {
	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationID", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddOns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) contextValidateAddOns(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.AddOns {

		if val, ok := m.AddOns[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Organization) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {
		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
