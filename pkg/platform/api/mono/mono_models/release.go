// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Release A collection of distros associated with a specific project. Can span multiple platforms.
//
//
// swagger:model Release
type Release struct {

	// added
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project ID
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectID,omitempty"`

	// release ID
	// Format: uuid
	ReleaseID strfmt.UUID `json:"releaseID,omitempty"`

	// release time
	// Format: date-time
	ReleaseTime *strfmt.DateTime `json:"releaseTime,omitempty"`
}

// Validate validates this release
func (m *Release) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Release) validateAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Release) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectID", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Release) validateReleaseID(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseID) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseID", "body", "uuid", m.ReleaseID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Release) validateReleaseTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseTime) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseTime", "body", "date-time", m.ReleaseTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Release) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Release) UnmarshalBinary(b []byte) error {
	var res Release
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
