// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Checkpoint checkpoint
//
// swagger:model Checkpoint
type Checkpoint struct {

	// The namespace for this requirement, this lets us identify the type, as well as any additional information (eg. what language a package belongs to)
	Namespace string `json:"namespace,omitempty"`

	// The name of the requirement (a requirement can be a package, a language, a clib, etc)
	Requirement string `json:"requirement,omitempty"`

	// Deprecated; use version_constraints instead.
	VersionConstraint string `json:"version_constraint,omitempty"`

	// version constraints
	VersionConstraints Constraints `json:"version_constraints,omitempty"`
}

// Validate validates this checkpoint
func (m *Checkpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionConstraints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkpoint) validateVersionConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionConstraints) { // not required
		return nil
	}

	if err := m.VersionConstraints.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version_constraints")
		}
		return err
	}

	return nil
}

// ContextValidate validate this checkpoint based on the context it is used
func (m *Checkpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkpoint) contextValidateVersionConstraints(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionConstraints.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version_constraints")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Checkpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Checkpoint) UnmarshalBinary(b []byte) error {
	var res Checkpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
