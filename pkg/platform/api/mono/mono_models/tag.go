// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tag tag
//
// swagger:model Tag
type Tag struct {

	// The commit that this tag is currently pointing at
	// Format: uuid
	CommitID *strfmt.UUID `json:"commitID,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// The project that this tag belongs to
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectID,omitempty"`

	// The tag id
	// Format: uuid
	TagID strfmt.UUID `json:"tagID,omitempty"`
}

// Validate validates this tag
func (m *Tag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tag) validateCommitID(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitID) { // not required
		return nil
	}

	if err := validate.FormatOf("commitID", "body", "uuid", m.CommitID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tag) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectID", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tag) validateTagID(formats strfmt.Registry) error {
	if swag.IsZero(m.TagID) { // not required
		return nil
	}

	if err := validate.FormatOf("tagID", "body", "uuid", m.TagID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tag based on context it is used
func (m *Tag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Tag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tag) UnmarshalBinary(b []byte) error {
	var res Tag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
