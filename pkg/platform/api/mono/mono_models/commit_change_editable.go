// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommitChangeEditable commit change editable
//
// swagger:model CommitChangeEditable
type CommitChangeEditable struct {

	// The namespace for this requirement, this lets us identify the type, as well as any additional information (eg. what language a package belongs to)
	Namespace string `json:"namespace,omitempty"`

	// operation
	// Enum: [added removed updated]
	Operation string `json:"operation,omitempty"`

	// The name of the requirement (a requirement can be a package, a language, a clib, etc)
	Requirement string `json:"requirement,omitempty"`

	// Deprecated; use version_constraints instead.
	VersionConstraint string `json:"version_constraint,omitempty"`

	// version constraints
	VersionConstraints Constraints `json:"version_constraints,omitempty"`
}

// Validate validates this commit change editable
func (m *CommitChangeEditable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionConstraints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commitChangeEditableTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["added","removed","updated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commitChangeEditableTypeOperationPropEnum = append(commitChangeEditableTypeOperationPropEnum, v)
	}
}

const (

	// CommitChangeEditableOperationAdded captures enum value "added"
	CommitChangeEditableOperationAdded string = "added"

	// CommitChangeEditableOperationRemoved captures enum value "removed"
	CommitChangeEditableOperationRemoved string = "removed"

	// CommitChangeEditableOperationUpdated captures enum value "updated"
	CommitChangeEditableOperationUpdated string = "updated"
)

// prop value enum
func (m *CommitChangeEditable) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commitChangeEditableTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommitChangeEditable) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *CommitChangeEditable) validateVersionConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionConstraints) { // not required
		return nil
	}

	if err := m.VersionConstraints.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version_constraints")
		}
		return err
	}

	return nil
}

// ContextValidate validate this commit change editable based on the context it is used
func (m *CommitChangeEditable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitChangeEditable) contextValidateVersionConstraints(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionConstraints.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version_constraints")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitChangeEditable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitChangeEditable) UnmarshalBinary(b []byte) error {
	var res CommitChangeEditable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
