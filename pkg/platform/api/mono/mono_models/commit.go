// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commit commit
//
// swagger:model Commit
type Commit struct {

	// the date and time at which this commit was created
	// Format: date-time
	Added strfmt.DateTime `json:"added,omitempty"`

	// When resolving depdencies, updates made after this time will be ignored.
	// Format: date-time
	AtTime strfmt.DateTime `json:"atTime,omitempty"`

	// the user that authored this commit
	// Format: uuid
	Author strfmt.UUID `json:"author,omitempty"`

	// what changed in this commit
	Changeset []*CommitChange `json:"changeset"`

	// commit ID
	// Read Only: true
	// Format: uuid
	CommitID strfmt.UUID `json:"commitID,omitempty"`

	// A message that describes what was changed in this commit
	Message string `json:"message,omitempty"`

	// the parent commit that this one came from (empty if this is the first commit)
	// Read Only: true
	// Format: uuid
	ParentCommitID strfmt.UUID `json:"parentCommitID,omitempty"`
}

// Validate validates this commit
func (m *Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentCommitID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commit) validateAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateAtTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AtTime) { // not required
		return nil
	}

	if err := validate.FormatOf("atTime", "body", "date-time", m.AtTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if err := validate.FormatOf("author", "body", "uuid", m.Author.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateChangeset(formats strfmt.Registry) error {

	if swag.IsZero(m.Changeset) { // not required
		return nil
	}

	for i := 0; i < len(m.Changeset); i++ {
		if swag.IsZero(m.Changeset[i]) { // not required
			continue
		}

		if m.Changeset[i] != nil {
			if err := m.Changeset[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changeset" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Commit) validateCommitID(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitID) { // not required
		return nil
	}

	if err := validate.FormatOf("commitID", "body", "uuid", m.CommitID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateParentCommitID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentCommitID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentCommitID", "body", "uuid", m.ParentCommitID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commit) UnmarshalBinary(b []byte) error {
	var res Commit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
