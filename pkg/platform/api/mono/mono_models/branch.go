// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Branch branch
//
// swagger:model Branch
type Branch struct {

	// The branch id
	// Format: uuid
	BranchID strfmt.UUID `json:"branchID,omitempty"`

	// The commit that this branch is currently pointing at
	// Format: uuid
	CommitID *strfmt.UUID `json:"commitID,omitempty"`

	// Whether this is the default branch for this project
	Default bool `json:"default,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// The project that this branch belongs to
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectID,omitempty"`

	// The tracking method used
	// Enum: [ignore auto_update notify]
	TrackingType *string `json:"tracking_type,omitempty"`

	// The branch_id of the branch that this branch tracks
	// Format: uuid
	Tracks *strfmt.UUID `json:"tracks,omitempty"`

	// The commit in the upstream branch that this branch forked from
	// Format: uuid
	UpstreamCommitID *strfmt.UUID `json:"upstream_commit_id,omitempty"`
}

// Validate validates this branch
func (m *Branch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamCommitID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Branch) validateBranchID(formats strfmt.Registry) error {
	if swag.IsZero(m.BranchID) { // not required
		return nil
	}

	if err := validate.FormatOf("branchID", "body", "uuid", m.BranchID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Branch) validateCommitID(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitID) { // not required
		return nil
	}

	if err := validate.FormatOf("commitID", "body", "uuid", m.CommitID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Branch) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectID", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

var branchTypeTrackingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ignore","auto_update","notify"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		branchTypeTrackingTypePropEnum = append(branchTypeTrackingTypePropEnum, v)
	}
}

const (

	// BranchTrackingTypeIgnore captures enum value "ignore"
	BranchTrackingTypeIgnore string = "ignore"

	// BranchTrackingTypeAutoUpdate captures enum value "auto_update"
	BranchTrackingTypeAutoUpdate string = "auto_update"

	// BranchTrackingTypeNotify captures enum value "notify"
	BranchTrackingTypeNotify string = "notify"
)

// prop value enum
func (m *Branch) validateTrackingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, branchTypeTrackingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Branch) validateTrackingType(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTrackingTypeEnum("tracking_type", "body", *m.TrackingType); err != nil {
		return err
	}

	return nil
}

func (m *Branch) validateTracks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tracks) { // not required
		return nil
	}

	if err := validate.FormatOf("tracks", "body", "uuid", m.Tracks.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Branch) validateUpstreamCommitID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpstreamCommitID) { // not required
		return nil
	}

	if err := validate.FormatOf("upstream_commit_id", "body", "uuid", m.UpstreamCommitID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this branch based on context it is used
func (m *Branch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Branch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Branch) UnmarshalBinary(b []byte) error {
	var res Branch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
