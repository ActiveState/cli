// Code generated by go-swagger; DO NOT EDIT.

package mono_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceCodeComplete device code complete
//
// swagger:model DeviceCodeComplete
type DeviceCodeComplete struct {

	// API JWT access token
	// Required: true
	AccessToken *JWT `json:"access_token"`

	// The lifetime in seconds of the access token.
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// If true tells client not to use polling.
	Nopoll bool `json:"nopoll,omitempty"`

	// API key stored and use to get new JET access_tokens when they expire
	RefreshToken *NewToken `json:"refresh_token,omitempty"`

	// The type of the access_token as defined by https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
	// Required: true
	// Enum: [bearer]
	TokenType *string `json:"token_type"`
}

// Validate validates this device code complete
func (m *DeviceCodeComplete) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCodeComplete) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("access_token", "body", m.AccessToken); err != nil {
		return err
	}

	if m.AccessToken != nil {
		if err := m.AccessToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceCodeComplete) validateRefreshToken(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshToken) { // not required
		return nil
	}

	if m.RefreshToken != nil {
		if err := m.RefreshToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh_token")
			}
			return err
		}
	}

	return nil
}

var deviceCodeCompleteTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceCodeCompleteTypeTokenTypePropEnum = append(deviceCodeCompleteTypeTokenTypePropEnum, v)
	}
}

const (

	// DeviceCodeCompleteTokenTypeBearer captures enum value "bearer"
	DeviceCodeCompleteTokenTypeBearer string = "bearer"
)

// prop value enum
func (m *DeviceCodeComplete) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceCodeCompleteTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceCodeComplete) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("token_type", "body", m.TokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTokenTypeEnum("token_type", "body", *m.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device code complete based on the context it is used
func (m *DeviceCodeComplete) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCodeComplete) contextValidateAccessToken(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessToken != nil {
		if err := m.AccessToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceCodeComplete) contextValidateRefreshToken(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshToken != nil {
		if err := m.RefreshToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh_token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCodeComplete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCodeComplete) UnmarshalBinary(b []byte) error {
	var res DeviceCodeComplete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
