// Code generated by go-swagger; DO NOT EDIT.

package scans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetScanReader is a Reader for the GetScan structure.
type GetScanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetScanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetScanOK creates a GetScanOK with default headers values
func NewGetScanOK() *GetScanOK {
	return &GetScanOK{}
}

/*GetScanOK handles this case with default header values.

Scan Record
*/
type GetScanOK struct {
	Payload *mono_models.Scan
}

func (o *GetScanOK) Error() string {
	return fmt.Sprintf("[GET /scans/{scanID}][%d] getScanOK  %+v", 200, o.Payload)
}

func (o *GetScanOK) GetPayload() *mono_models.Scan {
	return o.Payload
}

func (o *GetScanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Scan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScanNotFound creates a GetScanNotFound with default headers values
func NewGetScanNotFound() *GetScanNotFound {
	return &GetScanNotFound{}
}

/*GetScanNotFound handles this case with default header values.

Not Found
*/
type GetScanNotFound struct {
	Payload *mono_models.Message
}

func (o *GetScanNotFound) Error() string {
	return fmt.Sprintf("[GET /scans/{scanID}][%d] getScanNotFound  %+v", 404, o.Payload)
}

func (o *GetScanNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetScanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
