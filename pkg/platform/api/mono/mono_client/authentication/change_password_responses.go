// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewChangePasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/* ChangePasswordOK describes a response with status code 200, with default header values.

Success
*/
type ChangePasswordOK struct {
	Payload *mono_models.Message
}

func (o *ChangePasswordOK) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordOK  %+v", 200, o.Payload)
}
func (o *ChangePasswordOK) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/* ChangePasswordBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ChangePasswordBadRequest struct {
	Payload *mono_models.Message
}

func (o *ChangePasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordBadRequest  %+v", 400, o.Payload)
}
func (o *ChangePasswordBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordForbidden creates a ChangePasswordForbidden with default headers values
func NewChangePasswordForbidden() *ChangePasswordForbidden {
	return &ChangePasswordForbidden{}
}

/* ChangePasswordForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ChangePasswordForbidden struct {
	Payload *mono_models.Message
}

func (o *ChangePasswordForbidden) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordForbidden  %+v", 403, o.Payload)
}
func (o *ChangePasswordForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordNotFound creates a ChangePasswordNotFound with default headers values
func NewChangePasswordNotFound() *ChangePasswordNotFound {
	return &ChangePasswordNotFound{}
}

/* ChangePasswordNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ChangePasswordNotFound struct {
	Payload *mono_models.Message
}

func (o *ChangePasswordNotFound) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordNotFound  %+v", 404, o.Payload)
}
func (o *ChangePasswordNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordInternalServerError creates a ChangePasswordInternalServerError with default headers values
func NewChangePasswordInternalServerError() *ChangePasswordInternalServerError {
	return &ChangePasswordInternalServerError{}
}

/* ChangePasswordInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ChangePasswordInternalServerError struct {
	Payload *mono_models.Message
}

func (o *ChangePasswordInternalServerError) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordInternalServerError  %+v", 500, o.Payload)
}
func (o *ChangePasswordInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ChangePasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
