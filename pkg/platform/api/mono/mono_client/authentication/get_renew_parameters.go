// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRenewParams creates a new GetRenewParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRenewParams() *GetRenewParams {
	return &GetRenewParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRenewParamsWithTimeout creates a new GetRenewParams object
// with the ability to set a timeout on a request.
func NewGetRenewParamsWithTimeout(timeout time.Duration) *GetRenewParams {
	return &GetRenewParams{
		timeout: timeout,
	}
}

// NewGetRenewParamsWithContext creates a new GetRenewParams object
// with the ability to set a context for a request.
func NewGetRenewParamsWithContext(ctx context.Context) *GetRenewParams {
	return &GetRenewParams{
		Context: ctx,
	}
}

// NewGetRenewParamsWithHTTPClient creates a new GetRenewParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRenewParamsWithHTTPClient(client *http.Client) *GetRenewParams {
	return &GetRenewParams{
		HTTPClient: client,
	}
}

/* GetRenewParams contains all the parameters to send to the API endpoint
   for the get renew operation.

   Typically these are written to a http.Request.
*/
type GetRenewParams struct {

	/* SessionID.

	   id of session to renew

	   Format: uuid
	*/
	SessionID *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get renew params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenewParams) WithDefaults() *GetRenewParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get renew params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenewParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get renew params
func (o *GetRenewParams) WithTimeout(timeout time.Duration) *GetRenewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get renew params
func (o *GetRenewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get renew params
func (o *GetRenewParams) WithContext(ctx context.Context) *GetRenewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get renew params
func (o *GetRenewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get renew params
func (o *GetRenewParams) WithHTTPClient(client *http.Client) *GetRenewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get renew params
func (o *GetRenewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSessionID adds the sessionID to the get renew params
func (o *GetRenewParams) WithSessionID(sessionID *strfmt.UUID) *GetRenewParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the get renew params
func (o *GetRenewParams) SetSessionID(sessionID *strfmt.UUID) {
	o.SessionID = sessionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRenewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SessionID != nil {

		// query param sessionID
		var qrSessionID strfmt.UUID

		if o.SessionID != nil {
			qrSessionID = *o.SessionID
		}
		qSessionID := qrSessionID.String()
		if qSessionID != "" {

			if err := r.SetQueryParam("sessionID", qSessionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
