// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSignupWithGithubParams creates a new SignupWithGithubParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSignupWithGithubParams() *SignupWithGithubParams {
	return &SignupWithGithubParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSignupWithGithubParamsWithTimeout creates a new SignupWithGithubParams object
// with the ability to set a timeout on a request.
func NewSignupWithGithubParamsWithTimeout(timeout time.Duration) *SignupWithGithubParams {
	return &SignupWithGithubParams{
		timeout: timeout,
	}
}

// NewSignupWithGithubParamsWithContext creates a new SignupWithGithubParams object
// with the ability to set a context for a request.
func NewSignupWithGithubParamsWithContext(ctx context.Context) *SignupWithGithubParams {
	return &SignupWithGithubParams{
		Context: ctx,
	}
}

// NewSignupWithGithubParamsWithHTTPClient creates a new SignupWithGithubParams object
// with the ability to set a custom HTTPClient for a request.
func NewSignupWithGithubParamsWithHTTPClient(client *http.Client) *SignupWithGithubParams {
	return &SignupWithGithubParams{
		HTTPClient: client,
	}
}

/* SignupWithGithubParams contains all the parameters to send to the API endpoint
   for the signup with github operation.

   Typically these are written to a http.Request.
*/
type SignupWithGithubParams struct {

	// Code.
	Code *string

	// Email.
	Email *string

	// InviteCode.
	InviteCode *string

	// NextRoute.
	NextRoute *string

	// State.
	State *string

	// Username.
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the signup with github params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignupWithGithubParams) WithDefaults() *SignupWithGithubParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the signup with github params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignupWithGithubParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the signup with github params
func (o *SignupWithGithubParams) WithTimeout(timeout time.Duration) *SignupWithGithubParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the signup with github params
func (o *SignupWithGithubParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the signup with github params
func (o *SignupWithGithubParams) WithContext(ctx context.Context) *SignupWithGithubParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the signup with github params
func (o *SignupWithGithubParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the signup with github params
func (o *SignupWithGithubParams) WithHTTPClient(client *http.Client) *SignupWithGithubParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the signup with github params
func (o *SignupWithGithubParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the signup with github params
func (o *SignupWithGithubParams) WithCode(code *string) *SignupWithGithubParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the signup with github params
func (o *SignupWithGithubParams) SetCode(code *string) {
	o.Code = code
}

// WithEmail adds the email to the signup with github params
func (o *SignupWithGithubParams) WithEmail(email *string) *SignupWithGithubParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the signup with github params
func (o *SignupWithGithubParams) SetEmail(email *string) {
	o.Email = email
}

// WithInviteCode adds the inviteCode to the signup with github params
func (o *SignupWithGithubParams) WithInviteCode(inviteCode *string) *SignupWithGithubParams {
	o.SetInviteCode(inviteCode)
	return o
}

// SetInviteCode adds the inviteCode to the signup with github params
func (o *SignupWithGithubParams) SetInviteCode(inviteCode *string) {
	o.InviteCode = inviteCode
}

// WithNextRoute adds the nextRoute to the signup with github params
func (o *SignupWithGithubParams) WithNextRoute(nextRoute *string) *SignupWithGithubParams {
	o.SetNextRoute(nextRoute)
	return o
}

// SetNextRoute adds the nextRoute to the signup with github params
func (o *SignupWithGithubParams) SetNextRoute(nextRoute *string) {
	o.NextRoute = nextRoute
}

// WithState adds the state to the signup with github params
func (o *SignupWithGithubParams) WithState(state *string) *SignupWithGithubParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the signup with github params
func (o *SignupWithGithubParams) SetState(state *string) {
	o.State = state
}

// WithUsername adds the username to the signup with github params
func (o *SignupWithGithubParams) WithUsername(username *string) *SignupWithGithubParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the signup with github params
func (o *SignupWithGithubParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *SignupWithGithubParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode string

		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {

			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.InviteCode != nil {

		// query param inviteCode
		var qrInviteCode string

		if o.InviteCode != nil {
			qrInviteCode = *o.InviteCode
		}
		qInviteCode := qrInviteCode
		if qInviteCode != "" {

			if err := r.SetQueryParam("inviteCode", qInviteCode); err != nil {
				return err
			}
		}
	}

	if o.NextRoute != nil {

		// query param nextRoute
		var qrNextRoute string

		if o.NextRoute != nil {
			qrNextRoute = *o.NextRoute
		}
		qNextRoute := qrNextRoute
		if qNextRoute != "" {

			if err := r.SetQueryParam("nextRoute", qNextRoute); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// query param username
		var qrUsername string

		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {

			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
