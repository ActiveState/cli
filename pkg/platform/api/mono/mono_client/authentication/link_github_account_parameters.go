// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLinkGithubAccountParams creates a new LinkGithubAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLinkGithubAccountParams() *LinkGithubAccountParams {
	return &LinkGithubAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLinkGithubAccountParamsWithTimeout creates a new LinkGithubAccountParams object
// with the ability to set a timeout on a request.
func NewLinkGithubAccountParamsWithTimeout(timeout time.Duration) *LinkGithubAccountParams {
	return &LinkGithubAccountParams{
		timeout: timeout,
	}
}

// NewLinkGithubAccountParamsWithContext creates a new LinkGithubAccountParams object
// with the ability to set a context for a request.
func NewLinkGithubAccountParamsWithContext(ctx context.Context) *LinkGithubAccountParams {
	return &LinkGithubAccountParams{
		Context: ctx,
	}
}

// NewLinkGithubAccountParamsWithHTTPClient creates a new LinkGithubAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewLinkGithubAccountParamsWithHTTPClient(client *http.Client) *LinkGithubAccountParams {
	return &LinkGithubAccountParams{
		HTTPClient: client,
	}
}

/*
LinkGithubAccountParams contains all the parameters to send to the API endpoint

	for the link github account operation.

	Typically these are written to a http.Request.
*/
type LinkGithubAccountParams struct {

	// Code.
	Code *string

	// NextRoute.
	NextRoute *string

	// State.
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the link github account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LinkGithubAccountParams) WithDefaults() *LinkGithubAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the link github account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LinkGithubAccountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the link github account params
func (o *LinkGithubAccountParams) WithTimeout(timeout time.Duration) *LinkGithubAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the link github account params
func (o *LinkGithubAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the link github account params
func (o *LinkGithubAccountParams) WithContext(ctx context.Context) *LinkGithubAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the link github account params
func (o *LinkGithubAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the link github account params
func (o *LinkGithubAccountParams) WithHTTPClient(client *http.Client) *LinkGithubAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the link github account params
func (o *LinkGithubAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the link github account params
func (o *LinkGithubAccountParams) WithCode(code *string) *LinkGithubAccountParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the link github account params
func (o *LinkGithubAccountParams) SetCode(code *string) {
	o.Code = code
}

// WithNextRoute adds the nextRoute to the link github account params
func (o *LinkGithubAccountParams) WithNextRoute(nextRoute *string) *LinkGithubAccountParams {
	o.SetNextRoute(nextRoute)
	return o
}

// SetNextRoute adds the nextRoute to the link github account params
func (o *LinkGithubAccountParams) SetNextRoute(nextRoute *string) {
	o.NextRoute = nextRoute
}

// WithState adds the state to the link github account params
func (o *LinkGithubAccountParams) WithState(state *string) *LinkGithubAccountParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the link github account params
func (o *LinkGithubAccountParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *LinkGithubAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode string

		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {

			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}
	}

	if o.NextRoute != nil {

		// query param nextRoute
		var qrNextRoute string

		if o.NextRoute != nil {
			qrNextRoute = *o.NextRoute
		}
		qNextRoute := qrNextRoute
		if qNextRoute != "" {

			if err := r.SetQueryParam("nextRoute", qNextRoute); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
