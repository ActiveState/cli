// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsageParams creates a new UsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsageParams() *UsageParams {
	return &UsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsageParamsWithTimeout creates a new UsageParams object
// with the ability to set a timeout on a request.
func NewUsageParamsWithTimeout(timeout time.Duration) *UsageParams {
	return &UsageParams{
		timeout: timeout,
	}
}

// NewUsageParamsWithContext creates a new UsageParams object
// with the ability to set a context for a request.
func NewUsageParamsWithContext(ctx context.Context) *UsageParams {
	return &UsageParams{
		Context: ctx,
	}
}

// NewUsageParamsWithHTTPClient creates a new UsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsageParamsWithHTTPClient(client *http.Client) *UsageParams {
	return &UsageParams{
		HTTPClient: client,
	}
}

/* UsageParams contains all the parameters to send to the API endpoint
   for the usage operation.

   Typically these are written to a http.Request.
*/
type UsageParams struct {

	/* Grouping.

	   Desired grouping (day, week, month, year)
	*/
	Grouping *string

	/* IncludeActivators.

	   Include Activators in user counts
	*/
	IncludeActivators *bool

	/* Limit.

	   Number of periods to look back
	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsageParams) WithDefaults() *UsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the usage params
func (o *UsageParams) WithTimeout(timeout time.Duration) *UsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the usage params
func (o *UsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the usage params
func (o *UsageParams) WithContext(ctx context.Context) *UsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the usage params
func (o *UsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the usage params
func (o *UsageParams) WithHTTPClient(client *http.Client) *UsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the usage params
func (o *UsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGrouping adds the grouping to the usage params
func (o *UsageParams) WithGrouping(grouping *string) *UsageParams {
	o.SetGrouping(grouping)
	return o
}

// SetGrouping adds the grouping to the usage params
func (o *UsageParams) SetGrouping(grouping *string) {
	o.Grouping = grouping
}

// WithIncludeActivators adds the includeActivators to the usage params
func (o *UsageParams) WithIncludeActivators(includeActivators *bool) *UsageParams {
	o.SetIncludeActivators(includeActivators)
	return o
}

// SetIncludeActivators adds the includeActivators to the usage params
func (o *UsageParams) SetIncludeActivators(includeActivators *bool) {
	o.IncludeActivators = includeActivators
}

// WithLimit adds the limit to the usage params
func (o *UsageParams) WithLimit(limit *int64) *UsageParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the usage params
func (o *UsageParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *UsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Grouping != nil {

		// query param grouping
		var qrGrouping string

		if o.Grouping != nil {
			qrGrouping = *o.Grouping
		}
		qGrouping := qrGrouping
		if qGrouping != "" {

			if err := r.SetQueryParam("grouping", qGrouping); err != nil {
				return err
			}
		}
	}

	if o.IncludeActivators != nil {

		// query param includeActivators
		var qrIncludeActivators bool

		if o.IncludeActivators != nil {
			qrIncludeActivators = *o.IncludeActivators
		}
		qIncludeActivators := swag.FormatBool(qrIncludeActivators)
		if qIncludeActivators != "" {

			if err := r.SetQueryParam("includeActivators", qIncludeActivators); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
