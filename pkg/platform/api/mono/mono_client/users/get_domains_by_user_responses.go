// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetDomainsByUserReader is a Reader for the GetDomainsByUser structure.
type GetDomainsByUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainsByUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainsByUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetDomainsByUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainsByUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomainsByUserOK creates a GetDomainsByUserOK with default headers values
func NewGetDomainsByUserOK() *GetDomainsByUserOK {
	return &GetDomainsByUserOK{}
}

/*
GetDomainsByUserOK describes a response with status code 200, with default header values.

Domain records
*/
type GetDomainsByUserOK struct {
	Payload []string
}

func (o *GetDomainsByUserOK) Error() string {
	return fmt.Sprintf("[GET /users/{username}/domains][%d] getDomainsByUserOK  %+v", 200, o.Payload)
}
func (o *GetDomainsByUserOK) GetPayload() []string {
	return o.Payload
}

func (o *GetDomainsByUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsByUserForbidden creates a GetDomainsByUserForbidden with default headers values
func NewGetDomainsByUserForbidden() *GetDomainsByUserForbidden {
	return &GetDomainsByUserForbidden{}
}

/*
GetDomainsByUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDomainsByUserForbidden struct {
	Payload *mono_models.Message
}

func (o *GetDomainsByUserForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{username}/domains][%d] getDomainsByUserForbidden  %+v", 403, o.Payload)
}
func (o *GetDomainsByUserForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetDomainsByUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsByUserInternalServerError creates a GetDomainsByUserInternalServerError with default headers values
func NewGetDomainsByUserInternalServerError() *GetDomainsByUserInternalServerError {
	return &GetDomainsByUserInternalServerError{}
}

/*
GetDomainsByUserInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetDomainsByUserInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetDomainsByUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{username}/domains][%d] getDomainsByUserInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDomainsByUserInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetDomainsByUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
