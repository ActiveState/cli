// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCancelSubscriptionParams creates a new CancelSubscriptionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCancelSubscriptionParams() *CancelSubscriptionParams {
	return &CancelSubscriptionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCancelSubscriptionParamsWithTimeout creates a new CancelSubscriptionParams object
// with the ability to set a timeout on a request.
func NewCancelSubscriptionParamsWithTimeout(timeout time.Duration) *CancelSubscriptionParams {
	return &CancelSubscriptionParams{
		timeout: timeout,
	}
}

// NewCancelSubscriptionParamsWithContext creates a new CancelSubscriptionParams object
// with the ability to set a context for a request.
func NewCancelSubscriptionParamsWithContext(ctx context.Context) *CancelSubscriptionParams {
	return &CancelSubscriptionParams{
		Context: ctx,
	}
}

// NewCancelSubscriptionParamsWithHTTPClient creates a new CancelSubscriptionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCancelSubscriptionParamsWithHTTPClient(client *http.Client) *CancelSubscriptionParams {
	return &CancelSubscriptionParams{
		HTTPClient: client,
	}
}

/* CancelSubscriptionParams contains all the parameters to send to the API endpoint
   for the cancel subscription operation.

   Typically these are written to a http.Request.
*/
type CancelSubscriptionParams struct {

	/* IdentifierType.

	   what kind of thing the provided organizationIdentifier is

	   Default: "URLname"
	*/
	IdentifierType *string

	/* OrganizationIdentifier.

	   identifier (URLname, by default) of the desired organization
	*/
	OrganizationIdentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cancel subscription params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelSubscriptionParams) WithDefaults() *CancelSubscriptionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cancel subscription params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelSubscriptionParams) SetDefaults() {
	var (
		identifierTypeDefault = string("URLname")
	)

	val := CancelSubscriptionParams{
		IdentifierType: &identifierTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cancel subscription params
func (o *CancelSubscriptionParams) WithTimeout(timeout time.Duration) *CancelSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cancel subscription params
func (o *CancelSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cancel subscription params
func (o *CancelSubscriptionParams) WithContext(ctx context.Context) *CancelSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cancel subscription params
func (o *CancelSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cancel subscription params
func (o *CancelSubscriptionParams) WithHTTPClient(client *http.Client) *CancelSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cancel subscription params
func (o *CancelSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIdentifierType adds the identifierType to the cancel subscription params
func (o *CancelSubscriptionParams) WithIdentifierType(identifierType *string) *CancelSubscriptionParams {
	o.SetIdentifierType(identifierType)
	return o
}

// SetIdentifierType adds the identifierType to the cancel subscription params
func (o *CancelSubscriptionParams) SetIdentifierType(identifierType *string) {
	o.IdentifierType = identifierType
}

// WithOrganizationIdentifier adds the organizationIdentifier to the cancel subscription params
func (o *CancelSubscriptionParams) WithOrganizationIdentifier(organizationIdentifier string) *CancelSubscriptionParams {
	o.SetOrganizationIdentifier(organizationIdentifier)
	return o
}

// SetOrganizationIdentifier adds the organizationIdentifier to the cancel subscription params
func (o *CancelSubscriptionParams) SetOrganizationIdentifier(organizationIdentifier string) {
	o.OrganizationIdentifier = organizationIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *CancelSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IdentifierType != nil {

		// query param identifierType
		var qrIdentifierType string

		if o.IdentifierType != nil {
			qrIdentifierType = *o.IdentifierType
		}
		qIdentifierType := qrIdentifierType
		if qIdentifierType != "" {

			if err := r.SetQueryParam("identifierType", qIdentifierType); err != nil {
				return err
			}
		}
	}

	// path param organizationIdentifier
	if err := r.SetPathParam("organizationIdentifier", o.OrganizationIdentifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
