// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// AuthDeviceGetReader is a Reader for the AuthDeviceGet structure.
type AuthDeviceGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthDeviceGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthDeviceGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthDeviceGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthDeviceGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthDeviceGetOK creates a AuthDeviceGetOK with default headers values
func NewAuthDeviceGetOK() *AuthDeviceGetOK {
	return &AuthDeviceGetOK{}
}

/*
	AuthDeviceGetOK describes a response with status code 200, with default header values.

Success
*/
type AuthDeviceGetOK struct {
	Payload *mono_models.DeviceCodeComplete
}

func (o *AuthDeviceGetOK) Error() string {
	return fmt.Sprintf("[GET /oauth/authorize/device][%d] authDeviceGetOK  %+v", 200, o.Payload)
}
func (o *AuthDeviceGetOK) GetPayload() *mono_models.DeviceCodeComplete {
	return o.Payload
}

func (o *AuthDeviceGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.DeviceCodeComplete)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceGetBadRequest creates a AuthDeviceGetBadRequest with default headers values
func NewAuthDeviceGetBadRequest() *AuthDeviceGetBadRequest {
	return &AuthDeviceGetBadRequest{}
}

/*
	AuthDeviceGetBadRequest describes a response with status code 400, with default header values.

	authorization_pending: The authorization request is still pending as the end user hasn't yet completed the user-interaction steps

slow_down: A variant of "authorization_pending", the authorization request is still pending and polling should continue, but the interval MUST be increased by 5 seconds for this and all subsequent requests.
expired_token: The "device_code" has expired, and the device authorization session has concluded.
The only error key that the client MUST stop making requests after is 'expired_token'.
*/
type AuthDeviceGetBadRequest struct {
	Payload *AuthDeviceGetBadRequestBody
}

func (o *AuthDeviceGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /oauth/authorize/device][%d] authDeviceGetBadRequest  %+v", 400, o.Payload)
}
func (o *AuthDeviceGetBadRequest) GetPayload() *AuthDeviceGetBadRequestBody {
	return o.Payload
}

func (o *AuthDeviceGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthDeviceGetBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDeviceGetInternalServerError creates a AuthDeviceGetInternalServerError with default headers values
func NewAuthDeviceGetInternalServerError() *AuthDeviceGetInternalServerError {
	return &AuthDeviceGetInternalServerError{}
}

/*
	AuthDeviceGetInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AuthDeviceGetInternalServerError struct {
	Payload *mono_models.Message
}

func (o *AuthDeviceGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /oauth/authorize/device][%d] authDeviceGetInternalServerError  %+v", 500, o.Payload)
}
func (o *AuthDeviceGetInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AuthDeviceGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AuthDeviceGetBadRequestBody auth device get bad request body
swagger:model AuthDeviceGetBadRequestBody
*/
type AuthDeviceGetBadRequestBody struct {

	// code
	// Required: true
	Code *int64 `json:"code"`

	// error
	// Required: true
	// Enum: [authorization_pending slow_down expired_token invalid_client]
	Error *string `json:"error"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this auth device get bad request body
func (o *AuthDeviceGetBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthDeviceGetBadRequestBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("authDeviceGetBadRequest"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

var authDeviceGetBadRequestBodyTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization_pending","slow_down","expired_token","invalid_client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authDeviceGetBadRequestBodyTypeErrorPropEnum = append(authDeviceGetBadRequestBodyTypeErrorPropEnum, v)
	}
}

const (

	// AuthDeviceGetBadRequestBodyErrorAuthorizationPending captures enum value "authorization_pending"
	AuthDeviceGetBadRequestBodyErrorAuthorizationPending string = "authorization_pending"

	// AuthDeviceGetBadRequestBodyErrorSlowDown captures enum value "slow_down"
	AuthDeviceGetBadRequestBodyErrorSlowDown string = "slow_down"

	// AuthDeviceGetBadRequestBodyErrorExpiredToken captures enum value "expired_token"
	AuthDeviceGetBadRequestBodyErrorExpiredToken string = "expired_token"

	// AuthDeviceGetBadRequestBodyErrorInvalidClient captures enum value "invalid_client"
	AuthDeviceGetBadRequestBodyErrorInvalidClient string = "invalid_client"
)

// prop value enum
func (o *AuthDeviceGetBadRequestBody) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, authDeviceGetBadRequestBodyTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AuthDeviceGetBadRequestBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("authDeviceGetBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	// value enum
	if err := o.validateErrorEnum("authDeviceGetBadRequest"+"."+"error", "body", *o.Error); err != nil {
		return err
	}

	return nil
}

func (o *AuthDeviceGetBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("authDeviceGetBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth device get bad request body based on context it is used
func (o *AuthDeviceGetBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthDeviceGetBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthDeviceGetBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AuthDeviceGetBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
