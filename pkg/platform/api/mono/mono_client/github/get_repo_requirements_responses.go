// Code generated by go-swagger; DO NOT EDIT.

package github

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetRepoRequirementsReader is a Reader for the GetRepoRequirements structure.
type GetRepoRequirementsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepoRequirementsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepoRequirementsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRepoRequirementsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepoRequirementsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRepoRequirementsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepoRequirementsOK creates a GetRepoRequirementsOK with default headers values
func NewGetRepoRequirementsOK() *GetRepoRequirementsOK {
	return &GetRepoRequirementsOK{}
}

/* GetRepoRequirementsOK describes a response with status code 200, with default header values.

Success
*/
type GetRepoRequirementsOK struct {
	Payload []*mono_models.GitRepoRequirements
}

func (o *GetRepoRequirementsOK) Error() string {
	return fmt.Sprintf("[GET /git/repo/requirements/{repoUrl}][%d] getRepoRequirementsOK  %+v", 200, o.Payload)
}
func (o *GetRepoRequirementsOK) GetPayload() []*mono_models.GitRepoRequirements {
	return o.Payload
}

func (o *GetRepoRequirementsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoRequirementsBadRequest creates a GetRepoRequirementsBadRequest with default headers values
func NewGetRepoRequirementsBadRequest() *GetRepoRequirementsBadRequest {
	return &GetRepoRequirementsBadRequest{}
}

/* GetRepoRequirementsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRepoRequirementsBadRequest struct {
	Payload *mono_models.Message
}

func (o *GetRepoRequirementsBadRequest) Error() string {
	return fmt.Sprintf("[GET /git/repo/requirements/{repoUrl}][%d] getRepoRequirementsBadRequest  %+v", 400, o.Payload)
}
func (o *GetRepoRequirementsBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetRepoRequirementsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoRequirementsForbidden creates a GetRepoRequirementsForbidden with default headers values
func NewGetRepoRequirementsForbidden() *GetRepoRequirementsForbidden {
	return &GetRepoRequirementsForbidden{}
}

/* GetRepoRequirementsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRepoRequirementsForbidden struct {
	Payload *mono_models.Message
}

func (o *GetRepoRequirementsForbidden) Error() string {
	return fmt.Sprintf("[GET /git/repo/requirements/{repoUrl}][%d] getRepoRequirementsForbidden  %+v", 403, o.Payload)
}
func (o *GetRepoRequirementsForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetRepoRequirementsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoRequirementsInternalServerError creates a GetRepoRequirementsInternalServerError with default headers values
func NewGetRepoRequirementsInternalServerError() *GetRepoRequirementsInternalServerError {
	return &GetRepoRequirementsInternalServerError{}
}

/* GetRepoRequirementsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetRepoRequirementsInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetRepoRequirementsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /git/repo/requirements/{repoUrl}][%d] getRepoRequirementsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRepoRequirementsInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetRepoRequirementsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
