// Code generated by go-swagger; DO NOT EDIT.

package github

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new github API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for github API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetLoginsAndRepos(params *GetLoginsAndReposParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginsAndReposOK, error)

	GetRepoRequirements(params *GetRepoRequirementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepoRequirementsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetLoginsAndRepos retrieves available repos from github for authenticated user m u s t have git authentication enabled in the platform
*/
func (a *Client) GetLoginsAndRepos(params *GetLoginsAndReposParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginsAndReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginsAndReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoginsAndRepos",
		Method:             "GET",
		PathPattern:        "/git/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLoginsAndReposReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginsAndReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginsAndRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepoRequirements gets list of supported languages and their required packages parsed from the repo
*/
func (a *Client) GetRepoRequirements(params *GetRepoRequirementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepoRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoRequirementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepoRequirements",
		Method:             "GET",
		PathPattern:        "/git/repo/requirements/{repoUrl}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRepoRequirementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepoRequirementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepoRequirements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
