// Code generated by go-swagger; DO NOT EDIT.

package github

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetLoginsAndReposReader is a Reader for the GetLoginsAndRepos structure.
type GetLoginsAndReposReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLoginsAndReposReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLoginsAndReposOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLoginsAndReposBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLoginsAndReposForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLoginsAndReposInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLoginsAndReposOK creates a GetLoginsAndReposOK with default headers values
func NewGetLoginsAndReposOK() *GetLoginsAndReposOK {
	return &GetLoginsAndReposOK{}
}

/* GetLoginsAndReposOK describes a response with status code 200, with default header values.

Success
*/
type GetLoginsAndReposOK struct {
	Payload []*mono_models.GithubLogin
}

func (o *GetLoginsAndReposOK) Error() string {
	return fmt.Sprintf("[GET /git/repos][%d] getLoginsAndReposOK  %+v", 200, o.Payload)
}
func (o *GetLoginsAndReposOK) GetPayload() []*mono_models.GithubLogin {
	return o.Payload
}

func (o *GetLoginsAndReposOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginsAndReposBadRequest creates a GetLoginsAndReposBadRequest with default headers values
func NewGetLoginsAndReposBadRequest() *GetLoginsAndReposBadRequest {
	return &GetLoginsAndReposBadRequest{}
}

/* GetLoginsAndReposBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLoginsAndReposBadRequest struct {
	Payload *mono_models.Message
}

func (o *GetLoginsAndReposBadRequest) Error() string {
	return fmt.Sprintf("[GET /git/repos][%d] getLoginsAndReposBadRequest  %+v", 400, o.Payload)
}
func (o *GetLoginsAndReposBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetLoginsAndReposBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginsAndReposForbidden creates a GetLoginsAndReposForbidden with default headers values
func NewGetLoginsAndReposForbidden() *GetLoginsAndReposForbidden {
	return &GetLoginsAndReposForbidden{}
}

/* GetLoginsAndReposForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLoginsAndReposForbidden struct {
	Payload *mono_models.Message
}

func (o *GetLoginsAndReposForbidden) Error() string {
	return fmt.Sprintf("[GET /git/repos][%d] getLoginsAndReposForbidden  %+v", 403, o.Payload)
}
func (o *GetLoginsAndReposForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetLoginsAndReposForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginsAndReposInternalServerError creates a GetLoginsAndReposInternalServerError with default headers values
func NewGetLoginsAndReposInternalServerError() *GetLoginsAndReposInternalServerError {
	return &GetLoginsAndReposInternalServerError{}
}

/* GetLoginsAndReposInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetLoginsAndReposInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetLoginsAndReposInternalServerError) Error() string {
	return fmt.Sprintf("[GET /git/repos][%d] getLoginsAndReposInternalServerError  %+v", 500, o.Payload)
}
func (o *GetLoginsAndReposInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetLoginsAndReposInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
