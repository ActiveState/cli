// Code generated by go-swagger; DO NOT EDIT.

package mono_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/authentication"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/components"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/identities"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/ingredients"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/invoices"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/languages"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/licenses"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/limits"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/organizations"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/platforms"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/projects"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/s3"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/scans"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/sessions"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/status"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/tiers"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/users"
	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_client/version_control"
)

// Default mono HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new mono HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Mono {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new mono HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Mono {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new mono client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Mono {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Mono)
	cli.Transport = transport
	cli.Authentication = authentication.New(transport, formats)
	cli.Components = components.New(transport, formats)
	cli.Identities = identities.New(transport, formats)
	cli.Ingredients = ingredients.New(transport, formats)
	cli.Invoices = invoices.New(transport, formats)
	cli.Languages = languages.New(transport, formats)
	cli.Licenses = licenses.New(transport, formats)
	cli.Limits = limits.New(transport, formats)
	cli.Organizations = organizations.New(transport, formats)
	cli.Platforms = platforms.New(transport, formats)
	cli.Projects = projects.New(transport, formats)
	cli.S3 = s3.New(transport, formats)
	cli.Scans = scans.New(transport, formats)
	cli.Sessions = sessions.New(transport, formats)
	cli.Status = status.New(transport, formats)
	cli.Tiers = tiers.New(transport, formats)
	cli.Users = users.New(transport, formats)
	cli.VersionControl = version_control.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Mono is a client for mono
type Mono struct {
	Authentication authentication.ClientService

	Components components.ClientService

	Identities identities.ClientService

	Ingredients ingredients.ClientService

	Invoices invoices.ClientService

	Languages languages.ClientService

	Licenses licenses.ClientService

	Limits limits.ClientService

	Organizations organizations.ClientService

	Platforms platforms.ClientService

	Projects projects.ClientService

	S3 s3.ClientService

	Scans scans.ClientService

	Sessions sessions.ClientService

	Status status.ClientService

	Tiers tiers.ClientService

	Users users.ClientService

	VersionControl version_control.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Mono) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Authentication.SetTransport(transport)
	c.Components.SetTransport(transport)
	c.Identities.SetTransport(transport)
	c.Ingredients.SetTransport(transport)
	c.Invoices.SetTransport(transport)
	c.Languages.SetTransport(transport)
	c.Licenses.SetTransport(transport)
	c.Limits.SetTransport(transport)
	c.Organizations.SetTransport(transport)
	c.Platforms.SetTransport(transport)
	c.Projects.SetTransport(transport)
	c.S3.SetTransport(transport)
	c.Scans.SetTransport(transport)
	c.Sessions.SetTransport(transport)
	c.Status.SetTransport(transport)
	c.Tiers.SetTransport(transport)
	c.Users.SetTransport(transport)
	c.VersionControl.SetTransport(transport)
}
