// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetIngredientReader is a Reader for the GetIngredient structure.
type GetIngredientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIngredientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIngredientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIngredientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIngredientInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIngredientOK creates a GetIngredientOK with default headers values
func NewGetIngredientOK() *GetIngredientOK {
	return &GetIngredientOK{}
}

/*GetIngredientOK handles this case with default header values.

Success
*/
type GetIngredientOK struct {
	Payload *mono_models.Ingredient
}

func (o *GetIngredientOK) Error() string {
	return fmt.Sprintf("[GET /ingredients/{ingredientID}][%d] getIngredientOK  %+v", 200, o.Payload)
}

func (o *GetIngredientOK) GetPayload() *mono_models.Ingredient {
	return o.Payload
}

func (o *GetIngredientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Ingredient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIngredientNotFound creates a GetIngredientNotFound with default headers values
func NewGetIngredientNotFound() *GetIngredientNotFound {
	return &GetIngredientNotFound{}
}

/*GetIngredientNotFound handles this case with default header values.

Not Found
*/
type GetIngredientNotFound struct {
	Payload *mono_models.Message
}

func (o *GetIngredientNotFound) Error() string {
	return fmt.Sprintf("[GET /ingredients/{ingredientID}][%d] getIngredientNotFound  %+v", 404, o.Payload)
}

func (o *GetIngredientNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetIngredientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIngredientInternalServerError creates a GetIngredientInternalServerError with default headers values
func NewGetIngredientInternalServerError() *GetIngredientInternalServerError {
	return &GetIngredientInternalServerError{}
}

/*GetIngredientInternalServerError handles this case with default header values.

Server Error
*/
type GetIngredientInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetIngredientInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ingredients/{ingredientID}][%d] getIngredientInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIngredientInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetIngredientInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
