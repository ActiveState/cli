// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// AddIngredientReader is a Reader for the AddIngredient structure.
type AddIngredientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddIngredientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddIngredientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddIngredientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddIngredientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddIngredientConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddIngredientOK creates a AddIngredientOK with default headers values
func NewAddIngredientOK() *AddIngredientOK {
	return &AddIngredientOK{}
}

/*AddIngredientOK handles this case with default header values.

Ingredient Created
*/
type AddIngredientOK struct {
	Payload *mono_models.Ingredient
}

func (o *AddIngredientOK) Error() string {
	return fmt.Sprintf("[POST /ingredients][%d] addIngredientOK  %+v", 200, o.Payload)
}

func (o *AddIngredientOK) GetPayload() *mono_models.Ingredient {
	return o.Payload
}

func (o *AddIngredientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Ingredient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIngredientBadRequest creates a AddIngredientBadRequest with default headers values
func NewAddIngredientBadRequest() *AddIngredientBadRequest {
	return &AddIngredientBadRequest{}
}

/*AddIngredientBadRequest handles this case with default header values.

Bad Request
*/
type AddIngredientBadRequest struct {
	Payload *mono_models.Message
}

func (o *AddIngredientBadRequest) Error() string {
	return fmt.Sprintf("[POST /ingredients][%d] addIngredientBadRequest  %+v", 400, o.Payload)
}

func (o *AddIngredientBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddIngredientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIngredientForbidden creates a AddIngredientForbidden with default headers values
func NewAddIngredientForbidden() *AddIngredientForbidden {
	return &AddIngredientForbidden{}
}

/*AddIngredientForbidden handles this case with default header values.

Forbidden
*/
type AddIngredientForbidden struct {
	Payload *mono_models.Message
}

func (o *AddIngredientForbidden) Error() string {
	return fmt.Sprintf("[POST /ingredients][%d] addIngredientForbidden  %+v", 403, o.Payload)
}

func (o *AddIngredientForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddIngredientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIngredientConflict creates a AddIngredientConflict with default headers values
func NewAddIngredientConflict() *AddIngredientConflict {
	return &AddIngredientConflict{}
}

/*AddIngredientConflict handles this case with default header values.

Conflict
*/
type AddIngredientConflict struct {
	Payload *mono_models.Message
}

func (o *AddIngredientConflict) Error() string {
	return fmt.Sprintf("[POST /ingredients][%d] addIngredientConflict  %+v", 409, o.Payload)
}

func (o *AddIngredientConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddIngredientConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
