// Code generated by go-swagger; DO NOT EDIT.

package ingredients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListIngredientsParams creates a new ListIngredientsParams object
// with the default values initialized.
func NewListIngredientsParams() *ListIngredientsParams {
	var ()
	return &ListIngredientsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListIngredientsParamsWithTimeout creates a new ListIngredientsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListIngredientsParamsWithTimeout(timeout time.Duration) *ListIngredientsParams {
	var ()
	return &ListIngredientsParams{

		timeout: timeout,
	}
}

// NewListIngredientsParamsWithContext creates a new ListIngredientsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListIngredientsParamsWithContext(ctx context.Context) *ListIngredientsParams {
	var ()
	return &ListIngredientsParams{

		Context: ctx,
	}
}

// NewListIngredientsParamsWithHTTPClient creates a new ListIngredientsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListIngredientsParamsWithHTTPClient(client *http.Client) *ListIngredientsParams {
	var ()
	return &ListIngredientsParams{
		HTTPClient: client,
	}
}

/*ListIngredientsParams contains all the parameters to send to the API endpoint
for the list ingredients operation typically these are written to a http.Request
*/
type ListIngredientsParams struct {

	/*LanguageCore
	  filter for core language ingredients

	*/
	LanguageCore *bool
	/*NameFilter
	  Match ingredient names based on this regexp

	*/
	NameFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list ingredients params
func (o *ListIngredientsParams) WithTimeout(timeout time.Duration) *ListIngredientsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list ingredients params
func (o *ListIngredientsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list ingredients params
func (o *ListIngredientsParams) WithContext(ctx context.Context) *ListIngredientsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list ingredients params
func (o *ListIngredientsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list ingredients params
func (o *ListIngredientsParams) WithHTTPClient(client *http.Client) *ListIngredientsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list ingredients params
func (o *ListIngredientsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLanguageCore adds the languageCore to the list ingredients params
func (o *ListIngredientsParams) WithLanguageCore(languageCore *bool) *ListIngredientsParams {
	o.SetLanguageCore(languageCore)
	return o
}

// SetLanguageCore adds the languageCore to the list ingredients params
func (o *ListIngredientsParams) SetLanguageCore(languageCore *bool) {
	o.LanguageCore = languageCore
}

// WithNameFilter adds the nameFilter to the list ingredients params
func (o *ListIngredientsParams) WithNameFilter(nameFilter *string) *ListIngredientsParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the list ingredients params
func (o *ListIngredientsParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WriteToRequest writes these params to a swagger request
func (o *ListIngredientsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LanguageCore != nil {

		// query param languageCore
		var qrLanguageCore bool
		if o.LanguageCore != nil {
			qrLanguageCore = *o.LanguageCore
		}
		qLanguageCore := swag.FormatBool(qrLanguageCore)
		if qLanguageCore != "" {
			if err := r.SetQueryParam("languageCore", qLanguageCore); err != nil {
				return err
			}
		}

	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string
		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {
			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
