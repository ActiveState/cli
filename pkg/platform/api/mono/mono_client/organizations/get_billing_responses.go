// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetBillingReader is a Reader for the GetBilling structure.
type GetBillingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBillingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBillingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBillingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBillingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetBillingOK creates a GetBillingOK with default headers values
func NewGetBillingOK() *GetBillingOK {
	return &GetBillingOK{}
}

/*GetBillingOK handles this case with default header values.

Success
*/
type GetBillingOK struct {
	Payload *mono_models.BillingInformation
}

func (o *GetBillingOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationIdentifier}/billing][%d] getBillingOK  %+v", 200, o.Payload)
}

func (o *GetBillingOK) GetPayload() *mono_models.BillingInformation {
	return o.Payload
}

func (o *GetBillingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.BillingInformation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingBadRequest creates a GetBillingBadRequest with default headers values
func NewGetBillingBadRequest() *GetBillingBadRequest {
	return &GetBillingBadRequest{}
}

/*GetBillingBadRequest handles this case with default header values.

Bad Request
*/
type GetBillingBadRequest struct {
	Payload *mono_models.Message
}

func (o *GetBillingBadRequest) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationIdentifier}/billing][%d] getBillingBadRequest  %+v", 400, o.Payload)
}

func (o *GetBillingBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetBillingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingForbidden creates a GetBillingForbidden with default headers values
func NewGetBillingForbidden() *GetBillingForbidden {
	return &GetBillingForbidden{}
}

/*GetBillingForbidden handles this case with default header values.

Forbidden
*/
type GetBillingForbidden struct {
	Payload *mono_models.Message
}

func (o *GetBillingForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationIdentifier}/billing][%d] getBillingForbidden  %+v", 403, o.Payload)
}

func (o *GetBillingForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetBillingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingNotFound creates a GetBillingNotFound with default headers values
func NewGetBillingNotFound() *GetBillingNotFound {
	return &GetBillingNotFound{}
}

/*GetBillingNotFound handles this case with default header values.

Not Found
*/
type GetBillingNotFound struct {
	Payload *mono_models.Message
}

func (o *GetBillingNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationIdentifier}/billing][%d] getBillingNotFound  %+v", 404, o.Payload)
}

func (o *GetBillingNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetBillingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingInternalServerError creates a GetBillingInternalServerError with default headers values
func NewGetBillingInternalServerError() *GetBillingInternalServerError {
	return &GetBillingInternalServerError{}
}

/*GetBillingInternalServerError handles this case with default header values.

Server Error
*/
type GetBillingInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetBillingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationIdentifier}/billing][%d] getBillingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetBillingInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetBillingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
