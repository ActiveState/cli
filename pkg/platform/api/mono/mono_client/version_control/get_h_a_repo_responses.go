// Code generated by go-swagger; DO NOT EDIT.

package version_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetHARepoReader is a Reader for the GetHARepo structure.
type GetHARepoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHARepoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHARepoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetHARepoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetHARepoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetHARepoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHARepoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHARepoOK creates a GetHARepoOK with default headers values
func NewGetHARepoOK() *GetHARepoOK {
	return &GetHARepoOK{}
}

/* GetHARepoOK describes a response with status code 200, with default header values.

Success
*/
type GetHARepoOK struct {
	Payload *mono_models.HARepo
}

func (o *GetHARepoOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationName}/projects/{projectName}/harepos/{label}][%d] getHARepoOK  %+v", 200, o.Payload)
}
func (o *GetHARepoOK) GetPayload() *mono_models.HARepo {
	return o.Payload
}

func (o *GetHARepoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.HARepo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHARepoBadRequest creates a GetHARepoBadRequest with default headers values
func NewGetHARepoBadRequest() *GetHARepoBadRequest {
	return &GetHARepoBadRequest{}
}

/* GetHARepoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetHARepoBadRequest struct {
	Payload *mono_models.Message
}

func (o *GetHARepoBadRequest) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationName}/projects/{projectName}/harepos/{label}][%d] getHARepoBadRequest  %+v", 400, o.Payload)
}
func (o *GetHARepoBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetHARepoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHARepoForbidden creates a GetHARepoForbidden with default headers values
func NewGetHARepoForbidden() *GetHARepoForbidden {
	return &GetHARepoForbidden{}
}

/* GetHARepoForbidden describes a response with status code 403, with default header values.

Unauthorized
*/
type GetHARepoForbidden struct {
	Payload *mono_models.Message
}

func (o *GetHARepoForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationName}/projects/{projectName}/harepos/{label}][%d] getHARepoForbidden  %+v", 403, o.Payload)
}
func (o *GetHARepoForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetHARepoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHARepoNotFound creates a GetHARepoNotFound with default headers values
func NewGetHARepoNotFound() *GetHARepoNotFound {
	return &GetHARepoNotFound{}
}

/* GetHARepoNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetHARepoNotFound struct {
	Payload *mono_models.Message
}

func (o *GetHARepoNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationName}/projects/{projectName}/harepos/{label}][%d] getHARepoNotFound  %+v", 404, o.Payload)
}
func (o *GetHARepoNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetHARepoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHARepoInternalServerError creates a GetHARepoInternalServerError with default headers values
func NewGetHARepoInternalServerError() *GetHARepoInternalServerError {
	return &GetHARepoInternalServerError{}
}

/* GetHARepoInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetHARepoInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetHARepoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationName}/projects/{projectName}/harepos/{label}][%d] getHARepoInternalServerError  %+v", 500, o.Payload)
}
func (o *GetHARepoInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetHARepoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
