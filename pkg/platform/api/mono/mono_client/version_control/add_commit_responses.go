// Code generated by go-swagger; DO NOT EDIT.

package version_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// AddCommitReader is a Reader for the AddCommit structure.
type AddCommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCommitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddCommitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddCommitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddCommitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddCommitOK creates a AddCommitOK with default headers values
func NewAddCommitOK() *AddCommitOK {
	return &AddCommitOK{}
}

/* AddCommitOK describes a response with status code 200, with default header values.

Create a new commit
*/
type AddCommitOK struct {
	Payload *mono_models.Commit
}

func (o *AddCommitOK) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitOK  %+v", 200, o.Payload)
}
func (o *AddCommitOK) GetPayload() *mono_models.Commit {
	return o.Payload
}

func (o *AddCommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Commit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCommitBadRequest creates a AddCommitBadRequest with default headers values
func NewAddCommitBadRequest() *AddCommitBadRequest {
	return &AddCommitBadRequest{}
}

/* AddCommitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddCommitBadRequest struct {
	Payload *mono_models.Message
}

func (o *AddCommitBadRequest) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitBadRequest  %+v", 400, o.Payload)
}
func (o *AddCommitBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddCommitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCommitForbidden creates a AddCommitForbidden with default headers values
func NewAddCommitForbidden() *AddCommitForbidden {
	return &AddCommitForbidden{}
}

/* AddCommitForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddCommitForbidden struct {
	Payload *mono_models.Message
}

func (o *AddCommitForbidden) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitForbidden  %+v", 403, o.Payload)
}
func (o *AddCommitForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddCommitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCommitNotFound creates a AddCommitNotFound with default headers values
func NewAddCommitNotFound() *AddCommitNotFound {
	return &AddCommitNotFound{}
}

/* AddCommitNotFound describes a response with status code 404, with default header values.

branch was not found
*/
type AddCommitNotFound struct {
	Payload *mono_models.Message
}

func (o *AddCommitNotFound) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitNotFound  %+v", 404, o.Payload)
}
func (o *AddCommitNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddCommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCommitConflict creates a AddCommitConflict with default headers values
func NewAddCommitConflict() *AddCommitConflict {
	return &AddCommitConflict{}
}

/* AddCommitConflict describes a response with status code 409, with default header values.

Commit changes conflict with checkpoint
*/
type AddCommitConflict struct {
	Payload *mono_models.Message
}

func (o *AddCommitConflict) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitConflict  %+v", 409, o.Payload)
}
func (o *AddCommitConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddCommitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCommitInternalServerError creates a AddCommitInternalServerError with default headers values
func NewAddCommitInternalServerError() *AddCommitInternalServerError {
	return &AddCommitInternalServerError{}
}

/* AddCommitInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AddCommitInternalServerError struct {
	Payload *mono_models.Message
}

func (o *AddCommitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vcs/commit][%d] addCommitInternalServerError  %+v", 500, o.Payload)
}
func (o *AddCommitInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddCommitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
