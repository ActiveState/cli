// Code generated by go-swagger; DO NOT EDIT.

package version_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// GetCheckpointReader is a Reader for the GetCheckpoint structure.
type GetCheckpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCheckpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCheckpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCheckpointNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCheckpointInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCheckpointOK creates a GetCheckpointOK with default headers values
func NewGetCheckpointOK() *GetCheckpointOK {
	return &GetCheckpointOK{}
}

/*GetCheckpointOK handles this case with default header values.

Get the checkpoint for the given commit
*/
type GetCheckpointOK struct {
	Payload []*mono_models.Checkpoint
}

func (o *GetCheckpointOK) Error() string {
	return fmt.Sprintf("[GET /vcs/commits/{commitID}/checkpoint][%d] getCheckpointOK  %+v", 200, o.Payload)
}

func (o *GetCheckpointOK) GetPayload() []*mono_models.Checkpoint {
	return o.Payload
}

func (o *GetCheckpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCheckpointNotFound creates a GetCheckpointNotFound with default headers values
func NewGetCheckpointNotFound() *GetCheckpointNotFound {
	return &GetCheckpointNotFound{}
}

/*GetCheckpointNotFound handles this case with default header values.

checkpoint was not found
*/
type GetCheckpointNotFound struct {
	Payload *mono_models.Message
}

func (o *GetCheckpointNotFound) Error() string {
	return fmt.Sprintf("[GET /vcs/commits/{commitID}/checkpoint][%d] getCheckpointNotFound  %+v", 404, o.Payload)
}

func (o *GetCheckpointNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetCheckpointNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCheckpointInternalServerError creates a GetCheckpointInternalServerError with default headers values
func NewGetCheckpointInternalServerError() *GetCheckpointInternalServerError {
	return &GetCheckpointInternalServerError{}
}

/*GetCheckpointInternalServerError handles this case with default header values.

error retrieving checkpoint
*/
type GetCheckpointInternalServerError struct {
	Payload *mono_models.Message
}

func (o *GetCheckpointInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vcs/commits/{commitID}/checkpoint][%d] getCheckpointInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCheckpointInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *GetCheckpointInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
