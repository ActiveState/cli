// Code generated by go-swagger; DO NOT EDIT.

package version_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// MergeCommitsReader is a Reader for the MergeCommits structure.
type MergeCommitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MergeCommitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMergeCommitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewMergeCommitsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMergeCommitsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMergeCommitsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMergeCommitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewMergeCommitsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMergeCommitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMergeCommitsOK creates a MergeCommitsOK with default headers values
func NewMergeCommitsOK() *MergeCommitsOK {
	return &MergeCommitsOK{}
}

/* MergeCommitsOK describes a response with status code 200, with default header values.

Merge the commit with the given commit
*/
type MergeCommitsOK struct {
	Payload *mono_models.MergeStrategies
}

func (o *MergeCommitsOK) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsOK  %+v", 200, o.Payload)
}
func (o *MergeCommitsOK) GetPayload() *mono_models.MergeStrategies {
	return o.Payload
}

func (o *MergeCommitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.MergeStrategies)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsNoContent creates a MergeCommitsNoContent with default headers values
func NewMergeCommitsNoContent() *MergeCommitsNoContent {
	return &MergeCommitsNoContent{}
}

/* MergeCommitsNoContent describes a response with status code 204, with default header values.

No merge required
*/
type MergeCommitsNoContent struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsNoContent) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsNoContent  %+v", 204, o.Payload)
}
func (o *MergeCommitsNoContent) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsBadRequest creates a MergeCommitsBadRequest with default headers values
func NewMergeCommitsBadRequest() *MergeCommitsBadRequest {
	return &MergeCommitsBadRequest{}
}

/* MergeCommitsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MergeCommitsBadRequest struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsBadRequest) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsBadRequest  %+v", 400, o.Payload)
}
func (o *MergeCommitsBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsForbidden creates a MergeCommitsForbidden with default headers values
func NewMergeCommitsForbidden() *MergeCommitsForbidden {
	return &MergeCommitsForbidden{}
}

/* MergeCommitsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type MergeCommitsForbidden struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsForbidden) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsForbidden  %+v", 403, o.Payload)
}
func (o *MergeCommitsForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsNotFound creates a MergeCommitsNotFound with default headers values
func NewMergeCommitsNotFound() *MergeCommitsNotFound {
	return &MergeCommitsNotFound{}
}

/* MergeCommitsNotFound describes a response with status code 404, with default header values.

One of the commits was not found
*/
type MergeCommitsNotFound struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsNotFound) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsNotFound  %+v", 404, o.Payload)
}
func (o *MergeCommitsNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsConflict creates a MergeCommitsConflict with default headers values
func NewMergeCommitsConflict() *MergeCommitsConflict {
	return &MergeCommitsConflict{}
}

/* MergeCommitsConflict describes a response with status code 409, with default header values.

Conflict. Specifically due to commitWithChanges being in the history of commitReceivingChanges.
*/
type MergeCommitsConflict struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsConflict) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsConflict  %+v", 409, o.Payload)
}
func (o *MergeCommitsConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeCommitsInternalServerError creates a MergeCommitsInternalServerError with default headers values
func NewMergeCommitsInternalServerError() *MergeCommitsInternalServerError {
	return &MergeCommitsInternalServerError{}
}

/* MergeCommitsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type MergeCommitsInternalServerError struct {
	Payload *mono_models.Message
}

func (o *MergeCommitsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vcs/commits/{commitReceivingChanges}/merge/{commitWithChanges}][%d] mergeCommitsInternalServerError  %+v", 500, o.Payload)
}
func (o *MergeCommitsInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MergeCommitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
