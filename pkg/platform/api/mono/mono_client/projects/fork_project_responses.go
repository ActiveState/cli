// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// ForkProjectReader is a Reader for the ForkProject structure.
type ForkProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ForkProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewForkProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewForkProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewForkProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewForkProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewForkProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewForkProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewForkProjectOK creates a ForkProjectOK with default headers values
func NewForkProjectOK() *ForkProjectOK {
	return &ForkProjectOK{}
}

/* ForkProjectOK describes a response with status code 200, with default header values.

Project forked
*/
type ForkProjectOK struct {
	Payload *mono_models.Project
}

func (o *ForkProjectOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectOK  %+v", 200, o.Payload)
}
func (o *ForkProjectOK) GetPayload() *mono_models.Project {
	return o.Payload
}

func (o *ForkProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForkProjectBadRequest creates a ForkProjectBadRequest with default headers values
func NewForkProjectBadRequest() *ForkProjectBadRequest {
	return &ForkProjectBadRequest{}
}

/* ForkProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ForkProjectBadRequest struct {
	Payload *mono_models.Message
}

func (o *ForkProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectBadRequest  %+v", 400, o.Payload)
}
func (o *ForkProjectBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ForkProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForkProjectForbidden creates a ForkProjectForbidden with default headers values
func NewForkProjectForbidden() *ForkProjectForbidden {
	return &ForkProjectForbidden{}
}

/* ForkProjectForbidden describes a response with status code 403, with default header values.

Unauthorized
*/
type ForkProjectForbidden struct {
	Payload *mono_models.Message
}

func (o *ForkProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectForbidden  %+v", 403, o.Payload)
}
func (o *ForkProjectForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ForkProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForkProjectNotFound creates a ForkProjectNotFound with default headers values
func NewForkProjectNotFound() *ForkProjectNotFound {
	return &ForkProjectNotFound{}
}

/* ForkProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ForkProjectNotFound struct {
	Payload *mono_models.Message
}

func (o *ForkProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectNotFound  %+v", 404, o.Payload)
}
func (o *ForkProjectNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ForkProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForkProjectConflict creates a ForkProjectConflict with default headers values
func NewForkProjectConflict() *ForkProjectConflict {
	return &ForkProjectConflict{}
}

/* ForkProjectConflict describes a response with status code 409, with default header values.

Conflict
*/
type ForkProjectConflict struct {
	Payload *mono_models.Message
}

func (o *ForkProjectConflict) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectConflict  %+v", 409, o.Payload)
}
func (o *ForkProjectConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ForkProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForkProjectInternalServerError creates a ForkProjectInternalServerError with default headers values
func NewForkProjectInternalServerError() *ForkProjectInternalServerError {
	return &ForkProjectInternalServerError{}
}

/* ForkProjectInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ForkProjectInternalServerError struct {
	Payload *mono_models.Message
}

func (o *ForkProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/fork][%d] forkProjectInternalServerError  %+v", 500, o.Payload)
}
func (o *ForkProjectInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *ForkProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ForkProjectBody fork project body
swagger:model ForkProjectBody
*/
type ForkProjectBody struct {

	// Whether the project should be managed or not.
	// Required: true
	Managed *bool `json:"managed"`

	// Destination organization for the forked project.
	// Required: true
	OrganizationName string `json:"organizationName"`

	// Whether the project should be private or not.
	// Required: true
	Private *bool `json:"private"`

	// Optional new name of project.
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this fork project body
func (o *ForkProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateManaged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ForkProjectBody) validateManaged(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"managed", "body", o.Managed); err != nil {
		return err
	}

	return nil
}

func (o *ForkProjectBody) validateOrganizationName(formats strfmt.Registry) error {

	if err := validate.RequiredString("destination"+"."+"organizationName", "body", o.OrganizationName); err != nil {
		return err
	}

	return nil
}

func (o *ForkProjectBody) validatePrivate(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"private", "body", o.Private); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fork project body based on context it is used
func (o *ForkProjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ForkProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ForkProjectBody) UnmarshalBinary(b []byte) error {
	var res ForkProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
