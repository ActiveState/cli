// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// MoveProjectReader is a Reader for the MoveProject structure.
type MoveProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMoveProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMoveProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMoveProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewMoveProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMoveProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveProjectOK creates a MoveProjectOK with default headers values
func NewMoveProjectOK() *MoveProjectOK {
	return &MoveProjectOK{}
}

/* MoveProjectOK describes a response with status code 200, with default header values.

Project moved
*/
type MoveProjectOK struct {
	Payload *mono_models.Project
}

func (o *MoveProjectOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectOK  %+v", 200, o.Payload)
}
func (o *MoveProjectOK) GetPayload() *mono_models.Project {
	return o.Payload
}

func (o *MoveProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveProjectBadRequest creates a MoveProjectBadRequest with default headers values
func NewMoveProjectBadRequest() *MoveProjectBadRequest {
	return &MoveProjectBadRequest{}
}

/* MoveProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MoveProjectBadRequest struct {
	Payload *mono_models.Message
}

func (o *MoveProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectBadRequest  %+v", 400, o.Payload)
}
func (o *MoveProjectBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MoveProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveProjectForbidden creates a MoveProjectForbidden with default headers values
func NewMoveProjectForbidden() *MoveProjectForbidden {
	return &MoveProjectForbidden{}
}

/* MoveProjectForbidden describes a response with status code 403, with default header values.

Unauthorized
*/
type MoveProjectForbidden struct {
	Payload *mono_models.Message
}

func (o *MoveProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectForbidden  %+v", 403, o.Payload)
}
func (o *MoveProjectForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MoveProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveProjectNotFound creates a MoveProjectNotFound with default headers values
func NewMoveProjectNotFound() *MoveProjectNotFound {
	return &MoveProjectNotFound{}
}

/* MoveProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MoveProjectNotFound struct {
	Payload *mono_models.Message
}

func (o *MoveProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectNotFound  %+v", 404, o.Payload)
}
func (o *MoveProjectNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MoveProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveProjectConflict creates a MoveProjectConflict with default headers values
func NewMoveProjectConflict() *MoveProjectConflict {
	return &MoveProjectConflict{}
}

/* MoveProjectConflict describes a response with status code 409, with default header values.

Conflict
*/
type MoveProjectConflict struct {
	Payload *mono_models.Message
}

func (o *MoveProjectConflict) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectConflict  %+v", 409, o.Payload)
}
func (o *MoveProjectConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MoveProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveProjectInternalServerError creates a MoveProjectInternalServerError with default headers values
func NewMoveProjectInternalServerError() *MoveProjectInternalServerError {
	return &MoveProjectInternalServerError{}
}

/* MoveProjectInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type MoveProjectInternalServerError struct {
	Payload *mono_models.Message
}

func (o *MoveProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationIdentifier}/projects/{projectName}/move][%d] moveProjectInternalServerError  %+v", 500, o.Payload)
}
func (o *MoveProjectInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *MoveProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*MoveProjectBody move project body
swagger:model MoveProjectBody
*/
type MoveProjectBody struct {

	// Destination organization name for the moved project.
	Destination string `json:"destination,omitempty"`
}

// Validate validates this move project body
func (o *MoveProjectBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move project body based on context it is used
func (o *MoveProjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveProjectBody) UnmarshalBinary(b []byte) error {
	var res MoveProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
