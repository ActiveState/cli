// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ActiveState/cli/pkg/platform/api/mono/mono_models"
)

// AddBranchReader is a Reader for the AddBranch structure.
type AddBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddBranchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddBranchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddBranchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddBranchOK creates a AddBranchOK with default headers values
func NewAddBranchOK() *AddBranchOK {
	return &AddBranchOK{}
}

/* AddBranchOK describes a response with status code 200, with default header values.

Success
*/
type AddBranchOK struct {
	Payload *mono_models.Branch
}

func (o *AddBranchOK) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchOK  %+v", 200, o.Payload)
}
func (o *AddBranchOK) GetPayload() *mono_models.Branch {
	return o.Payload
}

func (o *AddBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Branch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBranchBadRequest creates a AddBranchBadRequest with default headers values
func NewAddBranchBadRequest() *AddBranchBadRequest {
	return &AddBranchBadRequest{}
}

/* AddBranchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddBranchBadRequest struct {
	Payload *mono_models.Message
}

func (o *AddBranchBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchBadRequest  %+v", 400, o.Payload)
}
func (o *AddBranchBadRequest) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBranchForbidden creates a AddBranchForbidden with default headers values
func NewAddBranchForbidden() *AddBranchForbidden {
	return &AddBranchForbidden{}
}

/* AddBranchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddBranchForbidden struct {
	Payload *mono_models.Message
}

func (o *AddBranchForbidden) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchForbidden  %+v", 403, o.Payload)
}
func (o *AddBranchForbidden) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddBranchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBranchNotFound creates a AddBranchNotFound with default headers values
func NewAddBranchNotFound() *AddBranchNotFound {
	return &AddBranchNotFound{}
}

/* AddBranchNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddBranchNotFound struct {
	Payload *mono_models.Message
}

func (o *AddBranchNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchNotFound  %+v", 404, o.Payload)
}
func (o *AddBranchNotFound) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBranchConflict creates a AddBranchConflict with default headers values
func NewAddBranchConflict() *AddBranchConflict {
	return &AddBranchConflict{}
}

/* AddBranchConflict describes a response with status code 409, with default header values.

Conflict
*/
type AddBranchConflict struct {
	Payload *mono_models.Message
}

func (o *AddBranchConflict) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchConflict  %+v", 409, o.Payload)
}
func (o *AddBranchConflict) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddBranchConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBranchInternalServerError creates a AddBranchInternalServerError with default headers values
func NewAddBranchInternalServerError() *AddBranchInternalServerError {
	return &AddBranchInternalServerError{}
}

/* AddBranchInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AddBranchInternalServerError struct {
	Payload *mono_models.Message
}

func (o *AddBranchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/{projectID}/branches][%d] addBranchInternalServerError  %+v", 500, o.Payload)
}
func (o *AddBranchInternalServerError) GetPayload() *mono_models.Message {
	return o.Payload
}

func (o *AddBranchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(mono_models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddBranchBody add branch body
swagger:model AddBranchBody
*/
type AddBranchBody struct {

	// branch label
	Label string `json:"label,omitempty"`
}

// Validate validates this add branch body
func (o *AddBranchBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add branch body based on context it is used
func (o *AddBranchBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddBranchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddBranchBody) UnmarshalBinary(b []byte) error {
	var res AddBranchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
