// Code generated by go-swagger; DO NOT EDIT.

package s3

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSignS3URIParams creates a new SignS3URIParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSignS3URIParams() *SignS3URIParams {
	return &SignS3URIParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSignS3URIParamsWithTimeout creates a new SignS3URIParams object
// with the ability to set a timeout on a request.
func NewSignS3URIParamsWithTimeout(timeout time.Duration) *SignS3URIParams {
	return &SignS3URIParams{
		timeout: timeout,
	}
}

// NewSignS3URIParamsWithContext creates a new SignS3URIParams object
// with the ability to set a context for a request.
func NewSignS3URIParamsWithContext(ctx context.Context) *SignS3URIParams {
	return &SignS3URIParams{
		Context: ctx,
	}
}

// NewSignS3URIParamsWithHTTPClient creates a new SignS3URIParams object
// with the ability to set a custom HTTPClient for a request.
func NewSignS3URIParamsWithHTTPClient(client *http.Client) *SignS3URIParams {
	return &SignS3URIParams{
		HTTPClient: client,
	}
}

/* SignS3URIParams contains all the parameters to send to the API endpoint
   for the sign s3 URI operation.

   Typically these are written to a http.Request.
*/
type SignS3URIParams struct {

	/* URI.

	   S3 URI to sign

	   Format: uri
	*/
	URI strfmt.URI

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sign s3 URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignS3URIParams) WithDefaults() *SignS3URIParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sign s3 URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignS3URIParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sign s3 URI params
func (o *SignS3URIParams) WithTimeout(timeout time.Duration) *SignS3URIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sign s3 URI params
func (o *SignS3URIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sign s3 URI params
func (o *SignS3URIParams) WithContext(ctx context.Context) *SignS3URIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sign s3 URI params
func (o *SignS3URIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sign s3 URI params
func (o *SignS3URIParams) WithHTTPClient(client *http.Client) *SignS3URIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sign s3 URI params
func (o *SignS3URIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithURI adds the uri to the sign s3 URI params
func (o *SignS3URIParams) WithURI(uri strfmt.URI) *SignS3URIParams {
	o.SetURI(uri)
	return o
}

// SetURI adds the uri to the sign s3 URI params
func (o *SignS3URIParams) SetURI(uri strfmt.URI) {
	o.URI = uri
}

// WriteToRequest writes these params to a swagger request
func (o *SignS3URIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param URI
	if err := r.SetPathParam("URI", o.URI.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
