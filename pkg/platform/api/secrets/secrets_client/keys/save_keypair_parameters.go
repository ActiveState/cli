// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	secrets_models "github.com/ActiveState/cli/pkg/platform/api/secrets/secrets_models"
)

// NewSaveKeypairParams creates a new SaveKeypairParams object
// with the default values initialized.
func NewSaveKeypairParams() *SaveKeypairParams {
	var ()
	return &SaveKeypairParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSaveKeypairParamsWithTimeout creates a new SaveKeypairParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSaveKeypairParamsWithTimeout(timeout time.Duration) *SaveKeypairParams {
	var ()
	return &SaveKeypairParams{

		timeout: timeout,
	}
}

// NewSaveKeypairParamsWithContext creates a new SaveKeypairParams object
// with the default values initialized, and the ability to set a context for a request
func NewSaveKeypairParamsWithContext(ctx context.Context) *SaveKeypairParams {
	var ()
	return &SaveKeypairParams{

		Context: ctx,
	}
}

// NewSaveKeypairParamsWithHTTPClient creates a new SaveKeypairParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSaveKeypairParamsWithHTTPClient(client *http.Client) *SaveKeypairParams {
	var ()
	return &SaveKeypairParams{
		HTTPClient: client,
	}
}

/*SaveKeypairParams contains all the parameters to send to the API endpoint
for the save keypair operation typically these are written to a http.Request
*/
type SaveKeypairParams struct {

	/*Keypair
	  Keypair to create or update

	*/
	Keypair *secrets_models.KeypairChange

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the save keypair params
func (o *SaveKeypairParams) WithTimeout(timeout time.Duration) *SaveKeypairParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the save keypair params
func (o *SaveKeypairParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the save keypair params
func (o *SaveKeypairParams) WithContext(ctx context.Context) *SaveKeypairParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the save keypair params
func (o *SaveKeypairParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the save keypair params
func (o *SaveKeypairParams) WithHTTPClient(client *http.Client) *SaveKeypairParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the save keypair params
func (o *SaveKeypairParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeypair adds the keypair to the save keypair params
func (o *SaveKeypairParams) WithKeypair(keypair *secrets_models.KeypairChange) *SaveKeypairParams {
	o.SetKeypair(keypair)
	return o
}

// SetKeypair adds the keypair to the save keypair params
func (o *SaveKeypairParams) SetKeypair(keypair *secrets_models.KeypairChange) {
	o.Keypair = keypair
}

// WriteToRequest writes these params to a swagger request
func (o *SaveKeypairParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Keypair != nil {
		if err := r.SetBodyParam(o.Keypair); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
