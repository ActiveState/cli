// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteUserSecretParams creates a new DeleteUserSecretParams object
// with the default values initialized.
func NewDeleteUserSecretParams() *DeleteUserSecretParams {
	var ()
	return &DeleteUserSecretParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserSecretParamsWithTimeout creates a new DeleteUserSecretParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserSecretParamsWithTimeout(timeout time.Duration) *DeleteUserSecretParams {
	var ()
	return &DeleteUserSecretParams{

		timeout: timeout,
	}
}

// NewDeleteUserSecretParamsWithContext creates a new DeleteUserSecretParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteUserSecretParamsWithContext(ctx context.Context) *DeleteUserSecretParams {
	var ()
	return &DeleteUserSecretParams{

		Context: ctx,
	}
}

// NewDeleteUserSecretParamsWithHTTPClient creates a new DeleteUserSecretParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteUserSecretParamsWithHTTPClient(client *http.Client) *DeleteUserSecretParams {
	var ()
	return &DeleteUserSecretParams{
		HTTPClient: client,
	}
}

/*DeleteUserSecretParams contains all the parameters to send to the API endpoint
for the delete user secret operation typically these are written to a http.Request
*/
type DeleteUserSecretParams struct {

	/*SecretID
	  Secret-id of secret to delete

	*/
	SecretID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete user secret params
func (o *DeleteUserSecretParams) WithTimeout(timeout time.Duration) *DeleteUserSecretParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete user secret params
func (o *DeleteUserSecretParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete user secret params
func (o *DeleteUserSecretParams) WithContext(ctx context.Context) *DeleteUserSecretParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete user secret params
func (o *DeleteUserSecretParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete user secret params
func (o *DeleteUserSecretParams) WithHTTPClient(client *http.Client) *DeleteUserSecretParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete user secret params
func (o *DeleteUserSecretParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSecretID adds the secretID to the delete user secret params
func (o *DeleteUserSecretParams) WithSecretID(secretID strfmt.UUID) *DeleteUserSecretParams {
	o.SetSecretID(secretID)
	return o
}

// SetSecretID adds the secretId to the delete user secret params
func (o *DeleteUserSecretParams) SetSecretID(secretID strfmt.UUID) {
	o.SecretID = secretID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserSecretParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param secretID
	if err := r.SetPathParam("secretID", o.SecretID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
