// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ClearAllUserSecrets clears the value from all secrets this user has access to in a given project

Clear the value from all secrets this user has access to in a given project
*/
func (a *Client) ClearAllUserSecrets(params *ClearAllUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ClearAllUserSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearAllUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clearAllUserSecrets",
		Method:             "DELETE",
		PathPattern:        "/user_secrets/clear/{projectID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClearAllUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClearAllUserSecretsNoContent), nil

}

/*
DeleteUserSecret deletes a specific user s secret

Delete a specific user's secret
*/
func (a *Client) DeleteUserSecret(params *DeleteUserSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserSecret",
		Method:             "DELETE",
		PathPattern:        "/user_secrets/{secretID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserSecretNoContent), nil

}

/*
DiffUserSecrets relatives to current user determine what secrets another user is missing or are out of date

Relative to current user, determine what secrets another user is missing or are out-of-date and return
those specs along with the user's public-key. User-scoped secrets will not be considered.

*/
func (a *Client) DiffUserSecrets(params *DiffUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*DiffUserSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiffUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "diffUserSecrets",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationID}/user_secrets/{userID}/diff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DiffUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DiffUserSecretsOK), nil

}

/*
GetAllUserSecrets alls user s secrets for an organization

Return a user's secrets from a specific organization
*/
func (a *Client) GetAllUserSecrets(params *GetAllUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUserSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUserSecrets",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationID}/user_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllUserSecretsOK), nil

}

/*
GetDefinitions gets secret definitions for the given project

Get secret definitions for the given project
*/
func (a *Client) GetDefinitions(params *GetDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDefinitions",
		Method:             "GET",
		PathPattern:        "/definitions/{projectID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDefinitionsOK), nil

}

/*
SaveAllUserSecrets saves a collection of user secrets

Update the user's vault with the provided collection of secrets
*/
func (a *Client) SaveAllUserSecrets(params *SaveAllUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*SaveAllUserSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAllUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveAllUserSecrets",
		Method:             "PATCH",
		PathPattern:        "/organizations/{organizationID}/user_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAllUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveAllUserSecretsNoContent), nil

}

/*
SaveDefinition saves a secret definition

Save a secret definition
*/
func (a *Client) SaveDefinition(params *SaveDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveDefinition",
		Method:             "PUT",
		PathPattern:        "/definitions/{projectID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveDefinitionNoContent), nil

}

/*
ShareUserSecrets shares a collection of user secrets with another user

Update another user's vault with any of the provided non-user scoped secrets
*/
func (a *Client) ShareUserSecrets(params *ShareUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ShareUserSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShareUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shareUserSecrets",
		Method:             "PATCH",
		PathPattern:        "/organizations/{organizationID}/user_secrets/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShareUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShareUserSecretsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
