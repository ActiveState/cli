// Code generated by go-swagger; DO NOT EDIT.

package secrets_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretDefinition secret definition
// swagger:model SecretDefinition
type SecretDefinition struct {

	// def id
	// Format: uuid
	DefID strfmt.UUID `json:"def_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project id
	// Required: true
	// Format: uuid
	ProjectID *strfmt.UUID `json:"project_id"`

	// scope
	// Required: true
	// Enum: [user project]
	Scope *string `json:"scope"`
}

// Validate validates this secret definition
func (m *SecretDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDefinition) validateDefID(formats strfmt.Registry) error {

	if swag.IsZero(m.DefID) { // not required
		return nil
	}

	if err := validate.FormatOf("def_id", "body", "uuid", m.DefID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecretDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SecretDefinition) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.FormatOf("project_id", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

var secretDefinitionTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","project"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretDefinitionTypeScopePropEnum = append(secretDefinitionTypeScopePropEnum, v)
	}
}

const (

	// SecretDefinitionScopeUser captures enum value "user"
	SecretDefinitionScopeUser string = "user"

	// SecretDefinitionScopeProject captures enum value "project"
	SecretDefinitionScopeProject string = "project"
)

// prop value enum
func (m *SecretDefinition) validateScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, secretDefinitionTypeScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecretDefinition) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretDefinition) UnmarshalBinary(b []byte) error {
	var res SecretDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
