// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// GetArtifactReader is a Reader for the GetArtifact structure.
type GetArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetArtifactDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetArtifactOK creates a GetArtifactOK with default headers values
func NewGetArtifactOK() *GetArtifactOK {
	return &GetArtifactOK{}
}

/* GetArtifactOK describes a response with status code 200, with default header values.

The requested artifact
*/
type GetArtifactOK struct {
	Payload *headchef_models.Artifact
}

func (o *GetArtifactOK) Error() string {
	return fmt.Sprintf("[GET /artifacts/{artifact_id}][%d] getArtifactOK  %+v", 200, o.Payload)
}
func (o *GetArtifactOK) GetPayload() *headchef_models.Artifact {
	return o.Payload
}

func (o *GetArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.Artifact)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArtifactNotFound creates a GetArtifactNotFound with default headers values
func NewGetArtifactNotFound() *GetArtifactNotFound {
	return &GetArtifactNotFound{}
}

/* GetArtifactNotFound describes a response with status code 404, with default header values.

No artifact with the specified artifact ID has been submitted to the Head Chef.
*/
type GetArtifactNotFound struct {
	Payload *headchef_models.RestAPIError
}

func (o *GetArtifactNotFound) Error() string {
	return fmt.Sprintf("[GET /artifacts/{artifact_id}][%d] getArtifactNotFound  %+v", 404, o.Payload)
}
func (o *GetArtifactNotFound) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *GetArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArtifactDefault creates a GetArtifactDefault with default headers values
func NewGetArtifactDefault(code int) *GetArtifactDefault {
	return &GetArtifactDefault{
		_statusCode: code,
	}
}

/* GetArtifactDefault describes a response with status code -1, with default header values.

If there is an error processing the request
*/
type GetArtifactDefault struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the get artifact default response
func (o *GetArtifactDefault) Code() int {
	return o._statusCode
}

func (o *GetArtifactDefault) Error() string {
	return fmt.Sprintf("[GET /artifacts/{artifact_id}][%d] getArtifact default  %+v", o._statusCode, o.Payload)
}
func (o *GetArtifactDefault) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *GetArtifactDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
