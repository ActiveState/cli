// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// NewArtifactJobStatusParams creates a new ArtifactJobStatusParams object
// with the default values initialized.
func NewArtifactJobStatusParams() *ArtifactJobStatusParams {
	var ()
	return &ArtifactJobStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewArtifactJobStatusParamsWithTimeout creates a new ArtifactJobStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewArtifactJobStatusParamsWithTimeout(timeout time.Duration) *ArtifactJobStatusParams {
	var ()
	return &ArtifactJobStatusParams{

		timeout: timeout,
	}
}

// NewArtifactJobStatusParamsWithContext creates a new ArtifactJobStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewArtifactJobStatusParamsWithContext(ctx context.Context) *ArtifactJobStatusParams {
	var ()
	return &ArtifactJobStatusParams{

		Context: ctx,
	}
}

// NewArtifactJobStatusParamsWithHTTPClient creates a new ArtifactJobStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewArtifactJobStatusParamsWithHTTPClient(client *http.Client) *ArtifactJobStatusParams {
	var ()
	return &ArtifactJobStatusParams{
		HTTPClient: client,
	}
}

/*ArtifactJobStatusParams contains all the parameters to send to the API endpoint
for the artifact job status operation typically these are written to a http.Request
*/
type ArtifactJobStatusParams struct {

	/*ArtifactID*/
	ArtifactID strfmt.UUID
	/*Job*/
	Job *headchef_models.JobComplete

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the artifact job status params
func (o *ArtifactJobStatusParams) WithTimeout(timeout time.Duration) *ArtifactJobStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the artifact job status params
func (o *ArtifactJobStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the artifact job status params
func (o *ArtifactJobStatusParams) WithContext(ctx context.Context) *ArtifactJobStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the artifact job status params
func (o *ArtifactJobStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the artifact job status params
func (o *ArtifactJobStatusParams) WithHTTPClient(client *http.Client) *ArtifactJobStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the artifact job status params
func (o *ArtifactJobStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactID adds the artifactID to the artifact job status params
func (o *ArtifactJobStatusParams) WithArtifactID(artifactID strfmt.UUID) *ArtifactJobStatusParams {
	o.SetArtifactID(artifactID)
	return o
}

// SetArtifactID adds the artifactId to the artifact job status params
func (o *ArtifactJobStatusParams) SetArtifactID(artifactID strfmt.UUID) {
	o.ArtifactID = artifactID
}

// WithJob adds the job to the artifact job status params
func (o *ArtifactJobStatusParams) WithJob(job *headchef_models.JobComplete) *ArtifactJobStatusParams {
	o.SetJob(job)
	return o
}

// SetJob adds the job to the artifact job status params
func (o *ArtifactJobStatusParams) SetJob(job *headchef_models.JobComplete) {
	o.Job = job
}

// WriteToRequest writes these params to a swagger request
func (o *ArtifactJobStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param artifact_id
	if err := r.SetPathParam("artifact_id", o.ArtifactID.String()); err != nil {
		return err
	}

	if o.Job != nil {
		if err := r.SetBodyParam(o.Job); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
