// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new headchef operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for headchef operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArtifactJobStatus Receives job status callbacks from the scheduler when a build job for a given artifact request completes/fails. If a job fails or errors, the build will be marked as failed.
*/
func (a *Client) ArtifactJobStatus(params *ArtifactJobStatusParams) (*ArtifactJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtifactJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "artifactJobStatus",
		Method:             "POST",
		PathPattern:        "/artifacts/{artifact_id}/job-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArtifactJobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArtifactJobStatusOK), nil

}

/*
GetBuildStatus Get status of a build that has previously been started using the build_request_id returned from /builds. Status requests for pre-platform builds will always result in a 404 as these are not actual platform builds.
*/
func (a *Client) GetBuildStatus(params *GetBuildStatusParams) (*GetBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildStatus",
		Method:             "GET",
		PathPattern:        "/builds/{build_request_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildStatusOK), nil

}

/*
HealthCheck health check API
*/
func (a *Client) HealthCheck(params *HealthCheckParams) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/healthz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HealthCheckOK), nil

}

/*
JobStatus Receives job status callbacks from the scheduler when jobs for a given build request complete/fail. If a job fails the build will be marked as failed.
*/
func (a *Client) JobStatus(params *JobStatusParams) (*JobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "jobStatus",
		Method:             "POST",
		PathPattern:        "/builds/{build_request_id}/job-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobStatusOK), nil

}

/*
StartBuildV1 start build v1 API
*/
func (a *Client) StartBuildV1(params *StartBuildV1Params) (*StartBuildV1Created, *StartBuildV1Accepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartBuildV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startBuildV1",
		Method:             "POST",
		PathPattern:        "/v1/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartBuildV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartBuildV1Created:
		return value, nil, nil
	case *StartBuildV1Accepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
