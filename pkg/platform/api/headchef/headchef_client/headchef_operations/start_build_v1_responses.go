// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// StartBuildV1Reader is a Reader for the StartBuildV1 structure.
type StartBuildV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartBuildV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewStartBuildV1Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewStartBuildV1Accepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartBuildV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStartBuildV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStartBuildV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewStartBuildV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartBuildV1Created creates a StartBuildV1Created with default headers values
func NewStartBuildV1Created() *StartBuildV1Created {
	return &StartBuildV1Created{}
}

/*StartBuildV1Created handles this case with default header values.

The requested build has already ended. The response's type field is one of: build_completed or build_failed.
*/
type StartBuildV1Created struct {
	Payload *headchef_models.BuildStatusResponse
}

func (o *StartBuildV1Created) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1Created  %+v", 201, o.Payload)
}

func (o *StartBuildV1Created) GetPayload() *headchef_models.BuildStatusResponse {
	return o.Payload
}

func (o *StartBuildV1Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildV1Accepted creates a StartBuildV1Accepted with default headers values
func NewStartBuildV1Accepted() *StartBuildV1Accepted {
	return &StartBuildV1Accepted{}
}

/*StartBuildV1Accepted handles this case with default header values.

The requested build has been started but hasn't yet completed.  The response's type field is build_started.
*/
type StartBuildV1Accepted struct {
	Payload *headchef_models.BuildStatusResponse
}

func (o *StartBuildV1Accepted) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1Accepted  %+v", 202, o.Payload)
}

func (o *StartBuildV1Accepted) GetPayload() *headchef_models.BuildStatusResponse {
	return o.Payload
}

func (o *StartBuildV1Accepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildV1BadRequest creates a StartBuildV1BadRequest with default headers values
func NewStartBuildV1BadRequest() *StartBuildV1BadRequest {
	return &StartBuildV1BadRequest{}
}

/*StartBuildV1BadRequest handles this case with default header values.

The submitted build request was invalid. Consult the message in the response body for further details.
*/
type StartBuildV1BadRequest struct {
	Payload *headchef_models.RestAPIError
}

func (o *StartBuildV1BadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1BadRequest  %+v", 400, o.Payload)
}

func (o *StartBuildV1BadRequest) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *StartBuildV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildV1Unauthorized creates a StartBuildV1Unauthorized with default headers values
func NewStartBuildV1Unauthorized() *StartBuildV1Unauthorized {
	return &StartBuildV1Unauthorized{}
}

/*StartBuildV1Unauthorized handles this case with default header values.

The submitted build request contains a private recipe ID but the request couldn't be authenticated
*/
type StartBuildV1Unauthorized struct {
	Payload *headchef_models.RestAPIError
}

func (o *StartBuildV1Unauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1Unauthorized  %+v", 401, o.Payload)
}

func (o *StartBuildV1Unauthorized) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *StartBuildV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildV1Forbidden creates a StartBuildV1Forbidden with default headers values
func NewStartBuildV1Forbidden() *StartBuildV1Forbidden {
	return &StartBuildV1Forbidden{}
}

/*StartBuildV1Forbidden handles this case with default header values.

The submitted build request contains a private recipe ID but the authenticated user isn't allow to access it
*/
type StartBuildV1Forbidden struct {
	Payload *headchef_models.RestAPIError
}

func (o *StartBuildV1Forbidden) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1Forbidden  %+v", 403, o.Payload)
}

func (o *StartBuildV1Forbidden) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *StartBuildV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildV1Default creates a StartBuildV1Default with default headers values
func NewStartBuildV1Default(code int) *StartBuildV1Default {
	return &StartBuildV1Default{
		_statusCode: code,
	}
}

/*StartBuildV1Default handles this case with default header values.

If there is an error processing the request
*/
type StartBuildV1Default struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the start build v1 default response
func (o *StartBuildV1Default) Code() int {
	return o._statusCode
}

func (o *StartBuildV1Default) Error() string {
	return fmt.Sprintf("[POST /v1/builds][%d] startBuildV1 default  %+v", o._statusCode, o.Payload)
}

func (o *StartBuildV1Default) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *StartBuildV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
