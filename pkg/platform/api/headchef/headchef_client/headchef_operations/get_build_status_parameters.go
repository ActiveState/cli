// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBuildStatusParams creates a new GetBuildStatusParams object
// with the default values initialized.
func NewGetBuildStatusParams() *GetBuildStatusParams {
	var ()
	return &GetBuildStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBuildStatusParamsWithTimeout creates a new GetBuildStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBuildStatusParamsWithTimeout(timeout time.Duration) *GetBuildStatusParams {
	var ()
	return &GetBuildStatusParams{

		timeout: timeout,
	}
}

// NewGetBuildStatusParamsWithContext creates a new GetBuildStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBuildStatusParamsWithContext(ctx context.Context) *GetBuildStatusParams {
	var ()
	return &GetBuildStatusParams{

		Context: ctx,
	}
}

// NewGetBuildStatusParamsWithHTTPClient creates a new GetBuildStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBuildStatusParamsWithHTTPClient(client *http.Client) *GetBuildStatusParams {
	var ()
	return &GetBuildStatusParams{
		HTTPClient: client,
	}
}

/*
GetBuildStatusParams contains all the parameters to send to the API endpoint
for the get build status operation typically these are written to a http.Request
*/
type GetBuildStatusParams struct {

	/*IDType
	  Optionally specify whether the provided ID is a recipe ID or a build request ID. If specified, this parameter causes the endpoint to override the default behavior and only treat the ID as the specified type when attempting to resolve a build.

	*/
	IDType *string
	/*RecipeOrBuildRequestID
	  Either the recipe ID or the build request ID of the build. This endpoint will try to find the build requested by treating the ID first as a build request ID. Only if no build is found with a matching build request ID will it fall back to treating it as a recipe ID. This behavior can be overridden using the id_type parameter.

	*/
	RecipeOrBuildRequestID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get build status params
func (o *GetBuildStatusParams) WithTimeout(timeout time.Duration) *GetBuildStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get build status params
func (o *GetBuildStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get build status params
func (o *GetBuildStatusParams) WithContext(ctx context.Context) *GetBuildStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get build status params
func (o *GetBuildStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get build status params
func (o *GetBuildStatusParams) WithHTTPClient(client *http.Client) *GetBuildStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get build status params
func (o *GetBuildStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDType adds the iDType to the get build status params
func (o *GetBuildStatusParams) WithIDType(iDType *string) *GetBuildStatusParams {
	o.SetIDType(iDType)
	return o
}

// SetIDType adds the idType to the get build status params
func (o *GetBuildStatusParams) SetIDType(iDType *string) {
	o.IDType = iDType
}

// WithRecipeOrBuildRequestID adds the recipeOrBuildRequestID to the get build status params
func (o *GetBuildStatusParams) WithRecipeOrBuildRequestID(recipeOrBuildRequestID strfmt.UUID) *GetBuildStatusParams {
	o.SetRecipeOrBuildRequestID(recipeOrBuildRequestID)
	return o
}

// SetRecipeOrBuildRequestID adds the recipeOrBuildRequestId to the get build status params
func (o *GetBuildStatusParams) SetRecipeOrBuildRequestID(recipeOrBuildRequestID strfmt.UUID) {
	o.RecipeOrBuildRequestID = recipeOrBuildRequestID
}

// WriteToRequest writes these params to a swagger request
func (o *GetBuildStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IDType != nil {

		// query param id_type
		var qrIDType string
		if o.IDType != nil {
			qrIDType = *o.IDType
		}
		qIDType := qrIDType
		if qIDType != "" {
			if err := r.SetQueryParam("id_type", qIDType); err != nil {
				return err
			}
		}

	}

	// path param recipe_or_build_request_id
	if err := r.SetPathParam("recipe_or_build_request_id", o.RecipeOrBuildRequestID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
