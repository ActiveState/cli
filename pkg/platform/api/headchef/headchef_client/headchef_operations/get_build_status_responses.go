// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// GetBuildStatusReader is a Reader for the GetBuildStatus structure.
type GetBuildStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBuildStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBuildStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetBuildStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetBuildStatusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBuildStatusOK creates a GetBuildStatusOK with default headers values
func NewGetBuildStatusOK() *GetBuildStatusOK {
	return &GetBuildStatusOK{}
}

/*GetBuildStatusOK handles this case with default header values.

A build has already been requested with that request ID
*/
type GetBuildStatusOK struct {
	Payload *headchef_models.BuildStatusResponse
}

func (o *GetBuildStatusOK) Error() string {
	return fmt.Sprintf("[GET /builds/{build_request_id}][%d] getBuildStatusOK  %+v", 200, o.Payload)
}

func (o *GetBuildStatusOK) GetPayload() *headchef_models.BuildStatusResponse {
	return o.Payload
}

func (o *GetBuildStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusNotFound creates a GetBuildStatusNotFound with default headers values
func NewGetBuildStatusNotFound() *GetBuildStatusNotFound {
	return &GetBuildStatusNotFound{}
}

/*GetBuildStatusNotFound handles this case with default header values.

No build has been requested with that request ID
*/
type GetBuildStatusNotFound struct {
	Payload *headchef_models.RestAPIError
}

func (o *GetBuildStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /builds/{build_request_id}][%d] getBuildStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetBuildStatusNotFound) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *GetBuildStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusDefault creates a GetBuildStatusDefault with default headers values
func NewGetBuildStatusDefault(code int) *GetBuildStatusDefault {
	return &GetBuildStatusDefault{
		_statusCode: code,
	}
}

/*GetBuildStatusDefault handles this case with default header values.

If there is an error processing the request
*/
type GetBuildStatusDefault struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the get build status default response
func (o *GetBuildStatusDefault) Code() int {
	return o._statusCode
}

func (o *GetBuildStatusDefault) Error() string {
	return fmt.Sprintf("[GET /builds/{build_request_id}][%d] getBuildStatus default  %+v", o._statusCode, o.Payload)
}

func (o *GetBuildStatusDefault) GetPayload() *headchef_models.RestAPIError {
	return o.Payload
}

func (o *GetBuildStatusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
