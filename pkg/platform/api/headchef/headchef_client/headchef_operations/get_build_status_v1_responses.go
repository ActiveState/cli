// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// GetBuildStatusV1Reader is a Reader for the GetBuildStatusV1 structure.
type GetBuildStatusV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBuildStatusV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetBuildStatusV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetBuildStatusV1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetBuildStatusV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBuildStatusV1OK creates a GetBuildStatusV1OK with default headers values
func NewGetBuildStatusV1OK() *GetBuildStatusV1OK {
	return &GetBuildStatusV1OK{}
}

/*GetBuildStatusV1OK handles this case with default header values.

A build has already been requested with that request ID
*/
type GetBuildStatusV1OK struct {
	Payload *headchef_models.V1BuildStatusResponse
}

func (o *GetBuildStatusV1OK) Error() string {
	return fmt.Sprintf("[GET /v1/builds/{recipe_or_build_request_id}][%d] getBuildStatusV1OK  %+v", 200, o.Payload)
}

func (o *GetBuildStatusV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.V1BuildStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusV1NotFound creates a GetBuildStatusV1NotFound with default headers values
func NewGetBuildStatusV1NotFound() *GetBuildStatusV1NotFound {
	return &GetBuildStatusV1NotFound{}
}

/*GetBuildStatusV1NotFound handles this case with default header values.

No build has been requested with that request ID
*/
type GetBuildStatusV1NotFound struct {
	Payload *headchef_models.RestAPIError
}

func (o *GetBuildStatusV1NotFound) Error() string {
	return fmt.Sprintf("[GET /v1/builds/{recipe_or_build_request_id}][%d] getBuildStatusV1NotFound  %+v", 404, o.Payload)
}

func (o *GetBuildStatusV1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusV1Default creates a GetBuildStatusV1Default with default headers values
func NewGetBuildStatusV1Default(code int) *GetBuildStatusV1Default {
	return &GetBuildStatusV1Default{
		_statusCode: code,
	}
}

/*GetBuildStatusV1Default handles this case with default header values.

If there is an error processing the request
*/
type GetBuildStatusV1Default struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the get build status v1 default response
func (o *GetBuildStatusV1Default) Code() int {
	return o._statusCode
}

func (o *GetBuildStatusV1Default) Error() string {
	return fmt.Sprintf("[GET /v1/builds/{recipe_or_build_request_id}][%d] getBuildStatusV1 default  %+v", o._statusCode, o.Payload)
}

func (o *GetBuildStatusV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
