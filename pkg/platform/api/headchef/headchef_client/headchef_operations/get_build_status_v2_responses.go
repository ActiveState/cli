// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// GetBuildStatusV2Reader is a Reader for the GetBuildStatusV2 structure.
type GetBuildStatusV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBuildStatusV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetBuildStatusV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetBuildStatusV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetBuildStatusV2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBuildStatusV2OK creates a GetBuildStatusV2OK with default headers values
func NewGetBuildStatusV2OK() *GetBuildStatusV2OK {
	return &GetBuildStatusV2OK{}
}

/*
GetBuildStatusV2OK handles this case with default header values.

The status of the build started with that build plan ID
*/
type GetBuildStatusV2OK struct {
	Payload *headchef_models.V2BuildStatusResponse
}

func (o *GetBuildStatusV2OK) Error() string {
	return fmt.Sprintf("[GET /v2/builds/{build_plan_id}][%d] getBuildStatusV2OK  %+v", 200, o.Payload)
}

func (o *GetBuildStatusV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.V2BuildStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusV2NotFound creates a GetBuildStatusV2NotFound with default headers values
func NewGetBuildStatusV2NotFound() *GetBuildStatusV2NotFound {
	return &GetBuildStatusV2NotFound{}
}

/*
GetBuildStatusV2NotFound handles this case with default header values.

No build plan build has been started with the provided build plan ID
*/
type GetBuildStatusV2NotFound struct {
	Payload *headchef_models.RestAPIError
}

func (o *GetBuildStatusV2NotFound) Error() string {
	return fmt.Sprintf("[GET /v2/builds/{build_plan_id}][%d] getBuildStatusV2NotFound  %+v", 404, o.Payload)
}

func (o *GetBuildStatusV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuildStatusV2Default creates a GetBuildStatusV2Default with default headers values
func NewGetBuildStatusV2Default(code int) *GetBuildStatusV2Default {
	return &GetBuildStatusV2Default{
		_statusCode: code,
	}
}

/*
GetBuildStatusV2Default handles this case with default header values.

If there is an error processing the request
*/
type GetBuildStatusV2Default struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the get build status v2 default response
func (o *GetBuildStatusV2Default) Code() int {
	return o._statusCode
}

func (o *GetBuildStatusV2Default) Error() string {
	return fmt.Sprintf("[GET /v2/builds/{build_plan_id}][%d] getBuildStatusV2 default  %+v", o._statusCode, o.Payload)
}

func (o *GetBuildStatusV2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
