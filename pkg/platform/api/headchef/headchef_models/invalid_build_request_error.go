// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvalidBuildRequestError REST API invalid build request error body
//
// A error for when invalid input is supplied to the build request endpoint.
// swagger:model invalidBuildRequestError
type InvalidBuildRequestError struct {

	// The IDs of the artifacts that caused the error (if applicable for this error code)
	ArtifactIds []strfmt.UUID `json:"artifact_ids"`

	// An error code for the type of error that occurred
	// Required: true
	// Enum: [err_dependency_cycle err_disallowed_dependency err_invalid_annotations_schema err_invalid_camel_version err_invalid_patch_uri err_missing_artifact_id err_missing_builder err_missing_builder_dependency err_missing_image err_missing_ingredient_dependency err_missing_output err_missing_recipe err_missing_source err_missing_steps err_multiple_builders err_multiple_outputs err_multiple_sources err_recipe_id_not_found err_unbuildable_build_plan err_unbuildable_hybrid_recipe err_unsupported_dependency_mimetype err_unsupported_input_type err_unsupported_target_type]
	Code *string `json:"code"`

	// A diagnostic message about the error. Not intended for user presentation
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this invalid build request error
func (m *InvalidBuildRequestError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidBuildRequestError) validateArtifactIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactIds) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactIds); i++ {

		if err := validate.FormatOf("artifact_ids"+"."+strconv.Itoa(i), "body", "uuid", m.ArtifactIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var invalidBuildRequestErrorTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["err_dependency_cycle","err_disallowed_dependency","err_invalid_annotations_schema","err_invalid_camel_version","err_invalid_patch_uri","err_missing_artifact_id","err_missing_builder","err_missing_builder_dependency","err_missing_image","err_missing_ingredient_dependency","err_missing_output","err_missing_recipe","err_missing_source","err_missing_steps","err_multiple_builders","err_multiple_outputs","err_multiple_sources","err_recipe_id_not_found","err_unbuildable_build_plan","err_unbuildable_hybrid_recipe","err_unsupported_dependency_mimetype","err_unsupported_input_type","err_unsupported_target_type"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invalidBuildRequestErrorTypeCodePropEnum = append(invalidBuildRequestErrorTypeCodePropEnum, v)
	}
}

const (

	// InvalidBuildRequestErrorCodeErrDependencyCycle captures enum value "err_dependency_cycle"
	InvalidBuildRequestErrorCodeErrDependencyCycle string = "err_dependency_cycle"

	// InvalidBuildRequestErrorCodeErrDisallowedDependency captures enum value "err_disallowed_dependency"
	InvalidBuildRequestErrorCodeErrDisallowedDependency string = "err_disallowed_dependency"

	// InvalidBuildRequestErrorCodeErrInvalidAnnotationsSchema captures enum value "err_invalid_annotations_schema"
	InvalidBuildRequestErrorCodeErrInvalidAnnotationsSchema string = "err_invalid_annotations_schema"

	// InvalidBuildRequestErrorCodeErrInvalidCamelVersion captures enum value "err_invalid_camel_version"
	InvalidBuildRequestErrorCodeErrInvalidCamelVersion string = "err_invalid_camel_version"

	// InvalidBuildRequestErrorCodeErrInvalidPatchURI captures enum value "err_invalid_patch_uri"
	InvalidBuildRequestErrorCodeErrInvalidPatchURI string = "err_invalid_patch_uri"

	// InvalidBuildRequestErrorCodeErrMissingArtifactID captures enum value "err_missing_artifact_id"
	InvalidBuildRequestErrorCodeErrMissingArtifactID string = "err_missing_artifact_id"

	// InvalidBuildRequestErrorCodeErrMissingBuilder captures enum value "err_missing_builder"
	InvalidBuildRequestErrorCodeErrMissingBuilder string = "err_missing_builder"

	// InvalidBuildRequestErrorCodeErrMissingBuilderDependency captures enum value "err_missing_builder_dependency"
	InvalidBuildRequestErrorCodeErrMissingBuilderDependency string = "err_missing_builder_dependency"

	// InvalidBuildRequestErrorCodeErrMissingImage captures enum value "err_missing_image"
	InvalidBuildRequestErrorCodeErrMissingImage string = "err_missing_image"

	// InvalidBuildRequestErrorCodeErrMissingIngredientDependency captures enum value "err_missing_ingredient_dependency"
	InvalidBuildRequestErrorCodeErrMissingIngredientDependency string = "err_missing_ingredient_dependency"

	// InvalidBuildRequestErrorCodeErrMissingOutput captures enum value "err_missing_output"
	InvalidBuildRequestErrorCodeErrMissingOutput string = "err_missing_output"

	// InvalidBuildRequestErrorCodeErrMissingRecipe captures enum value "err_missing_recipe"
	InvalidBuildRequestErrorCodeErrMissingRecipe string = "err_missing_recipe"

	// InvalidBuildRequestErrorCodeErrMissingSource captures enum value "err_missing_source"
	InvalidBuildRequestErrorCodeErrMissingSource string = "err_missing_source"

	// InvalidBuildRequestErrorCodeErrMissingSteps captures enum value "err_missing_steps"
	InvalidBuildRequestErrorCodeErrMissingSteps string = "err_missing_steps"

	// InvalidBuildRequestErrorCodeErrMultipleBuilders captures enum value "err_multiple_builders"
	InvalidBuildRequestErrorCodeErrMultipleBuilders string = "err_multiple_builders"

	// InvalidBuildRequestErrorCodeErrMultipleOutputs captures enum value "err_multiple_outputs"
	InvalidBuildRequestErrorCodeErrMultipleOutputs string = "err_multiple_outputs"

	// InvalidBuildRequestErrorCodeErrMultipleSources captures enum value "err_multiple_sources"
	InvalidBuildRequestErrorCodeErrMultipleSources string = "err_multiple_sources"

	// InvalidBuildRequestErrorCodeErrRecipeIDNotFound captures enum value "err_recipe_id_not_found"
	InvalidBuildRequestErrorCodeErrRecipeIDNotFound string = "err_recipe_id_not_found"

	// InvalidBuildRequestErrorCodeErrUnbuildableBuildPlan captures enum value "err_unbuildable_build_plan"
	InvalidBuildRequestErrorCodeErrUnbuildableBuildPlan string = "err_unbuildable_build_plan"

	// InvalidBuildRequestErrorCodeErrUnbuildableHybridRecipe captures enum value "err_unbuildable_hybrid_recipe"
	InvalidBuildRequestErrorCodeErrUnbuildableHybridRecipe string = "err_unbuildable_hybrid_recipe"

	// InvalidBuildRequestErrorCodeErrUnsupportedDependencyMimetype captures enum value "err_unsupported_dependency_mimetype"
	InvalidBuildRequestErrorCodeErrUnsupportedDependencyMimetype string = "err_unsupported_dependency_mimetype"

	// InvalidBuildRequestErrorCodeErrUnsupportedInputType captures enum value "err_unsupported_input_type"
	InvalidBuildRequestErrorCodeErrUnsupportedInputType string = "err_unsupported_input_type"

	// InvalidBuildRequestErrorCodeErrUnsupportedTargetType captures enum value "err_unsupported_target_type"
	InvalidBuildRequestErrorCodeErrUnsupportedTargetType string = "err_unsupported_target_type"
)

// prop value enum
func (m *InvalidBuildRequestError) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, invalidBuildRequestErrorTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvalidBuildRequestError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

func (m *InvalidBuildRequestError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvalidBuildRequestError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvalidBuildRequestError) UnmarshalBinary(b []byte) error {
	var res InvalidBuildRequestError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
