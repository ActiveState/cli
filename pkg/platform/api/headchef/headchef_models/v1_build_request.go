// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BuildRequest Build Request V1
//
// A build request (v1) which is submitted to the Head Chef REST API. A build request may contain either a full recipe or just the ID of a recipe stored in the inventory API.
// swagger:model v1BuildRequest
type V1BuildRequest struct {

	// The version of camel to use when running setup-builds.pl. NOTE: this is temporary until the camel version is included in the recipe.
	CamelCommit string `json:"camel_commit,omitempty"`

	// A list of additional command-line parameters to pass to setup-builds.pl. NOTE: this is a temporary feature to expose some camel features before build options are implemented.
	// Unique: true
	CamelFlags []string `json:"camel_flags"`

	// NOTE: This field is deprecated and will be removed in the future.
	// Enum: [7zip dmg msi raw tarball zip]
	Format *string `json:"format,omitempty"`

	// recipe
	Recipe *V1BuildRequestRecipe `json:"recipe,omitempty"`

	// The ID of a recipe solved using the inventory API solutions endpoint
	// Format: uuid
	RecipeID strfmt.UUID `json:"recipe_id,omitempty"`

	// requester
	Requester *V1BuildRequestRequester `json:"requester,omitempty"`
}

// Validate validates this v1 build request
func (m *V1BuildRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCamelFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1BuildRequestCamelFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["--dynamic-core","--python-debug","--tcl-debug","--tcl-disable-threads"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1BuildRequestCamelFlagsItemsEnum = append(v1BuildRequestCamelFlagsItemsEnum, v)
	}
}

func (m *V1BuildRequest) validateCamelFlagsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1BuildRequestCamelFlagsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1BuildRequest) validateCamelFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.CamelFlags) { // not required
		return nil
	}

	if err := validate.UniqueItems("camel_flags", "body", m.CamelFlags); err != nil {
		return err
	}

	for i := 0; i < len(m.CamelFlags); i++ {

		// value enum
		if err := m.validateCamelFlagsItemsEnum("camel_flags"+"."+strconv.Itoa(i), "body", m.CamelFlags[i]); err != nil {
			return err
		}

	}

	return nil
}

var v1BuildRequestTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["7zip","dmg","msi","raw","tarball","zip"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1BuildRequestTypeFormatPropEnum = append(v1BuildRequestTypeFormatPropEnum, v)
	}
}

const (

	// V1BuildRequestFormatNr7zip captures enum value "7zip"
	V1BuildRequestFormatNr7zip string = "7zip"

	// V1BuildRequestFormatDmg captures enum value "dmg"
	V1BuildRequestFormatDmg string = "dmg"

	// V1BuildRequestFormatMsi captures enum value "msi"
	V1BuildRequestFormatMsi string = "msi"

	// V1BuildRequestFormatRaw captures enum value "raw"
	V1BuildRequestFormatRaw string = "raw"

	// V1BuildRequestFormatTarball captures enum value "tarball"
	V1BuildRequestFormatTarball string = "tarball"

	// V1BuildRequestFormatZip captures enum value "zip"
	V1BuildRequestFormatZip string = "zip"
)

// prop value enum
func (m *V1BuildRequest) validateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1BuildRequestTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1BuildRequest) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *V1BuildRequest) validateRecipe(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipe) { // not required
		return nil
	}

	if m.Recipe != nil {
		if err := m.Recipe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipe")
			}
			return err
		}
	}

	return nil
}

func (m *V1BuildRequest) validateRecipeID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeID) { // not required
		return nil
	}

	if err := validate.FormatOf("recipe_id", "body", "uuid", m.RecipeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1BuildRequest) validateRequester(formats strfmt.Registry) error {

	if swag.IsZero(m.Requester) { // not required
		return nil
	}

	if m.Requester != nil {
		if err := m.Requester.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requester")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BuildRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BuildRequest) UnmarshalBinary(b []byte) error {
	var res V1BuildRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
