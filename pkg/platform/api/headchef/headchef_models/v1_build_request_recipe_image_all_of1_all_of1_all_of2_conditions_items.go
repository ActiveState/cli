// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems Condition
//
// A feature that must be present in a recipe for the containing entity to apply. If nothing in the recipe matches this condition, the containing entity is disable/cannot be used.
// swagger:model v1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems
type V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems struct {

	// What feature must be present for the containing entity to apply
	// Required: true
	Feature *string `json:"feature"`

	// The namespace the conditional feature is contained in
	// Required: true
	Namespace *string `json:"namespace"`

	// Requirements
	//
	// The version constraints that an ingredient version's requirement or condition puts on a feature
	// Required: true
	// Min Items: 1
	Requirements []*V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItemsRequirementsItems `json:"requirements"`
}

// Validate validates this v1 build request recipe image all of1 all of1 all of2 conditions items
func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	return nil
}

func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	iRequirementsSize := int64(len(m.Requirements))

	if err := validate.MinItems("requirements", "body", iRequirementsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems) UnmarshalBinary(b []byte) error {
	var res V1BuildRequestRecipeImageAllOf1AllOf1AllOf2ConditionsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
