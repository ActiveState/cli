// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobComplete JobComplete
//
// A Job reports status details from the scheduler API.
//
// swagger:model jobComplete
type JobComplete struct {

	// Unique identifier for the job.
	// Required: true
	// Format: uuid
	JobID *strfmt.UUID `json:"job_id"`

	// The state of the job at time of completion.
	// Required: true
	// Enum: [Completed Error Failed Pending Running]
	State *string `json:"state"`

	// The timestamp for when this job completed.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this job complete
func (m *JobComplete) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobComplete) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	if err := validate.FormatOf("job_id", "body", "uuid", m.JobID.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobCompleteTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Completed","Error","Failed","Pending","Running"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobCompleteTypeStatePropEnum = append(jobCompleteTypeStatePropEnum, v)
	}
}

const (

	// JobCompleteStateCompleted captures enum value "Completed"
	JobCompleteStateCompleted string = "Completed"

	// JobCompleteStateError captures enum value "Error"
	JobCompleteStateError string = "Error"

	// JobCompleteStateFailed captures enum value "Failed"
	JobCompleteStateFailed string = "Failed"

	// JobCompleteStatePending captures enum value "Pending"
	JobCompleteStatePending string = "Pending"

	// JobCompleteStateRunning captures enum value "Running"
	JobCompleteStateRunning string = "Running"
)

// prop value enum
func (m *JobComplete) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobCompleteTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobComplete) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *JobComplete) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobComplete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobComplete) UnmarshalBinary(b []byte) error {
	var res JobComplete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
