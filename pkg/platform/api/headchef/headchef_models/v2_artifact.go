// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Artifact Artifact (V2)
//
// An output of a build step
// swagger:model V2Artifact
type V2Artifact struct {

	// Artifact ID
	// Required: true
	// Format: uuid
	ArtifactID *strfmt.UUID `json:"artifact_id"`

	// The artifact IDs of other artifacts in this build that must be built before this one.
	BuildDependencyIds []strfmt.UUID `json:"build_dependency_ids"`

	// Indicates where in the build process the artifact currently is.
	// Required: true
	// Enum: [blocked doomed failed ready running skipped starting succeeded]
	BuildState *string `json:"build_state"`

	// Timestamp of the most recent change to the build state of this artifact
	// Required: true
	// Format: date-time
	BuildTimestamp *strfmt.DateTime `json:"build_timestamp"`

	// checksum
	Checksum string `json:"checksum,omitempty"`

	// The error that happened which caused the artifact to fail to build. Only non-null if 'build_state' is 'failed'.
	Error string `json:"error,omitempty"`

	// URI for the storage location of the artifact's build log. Will be non-null if 'build_state' is 'succeeded' and possibly non-null if 'build_state' is 'failed' (depending on the nature of the failure).
	// Format: uri
	LogURI strfmt.URI `json:"log_uri,omitempty"`

	// The MIME type of the file stored at the artifact's URI.
	// Required: true
	MimeType *string `json:"mime_type"`

	// UUID of the platform this artifact is built on
	// Required: true
	// Format: uuid
	PlatformID *strfmt.UUID `json:"platform_id"`

	// source
	Source *V2BuildStatusResponseArtifactsItemsSource `json:"source,omitempty"`

	// URI for the storage location of the artifact. Only non-null if 'build_state' is 'succeeded'.
	// Format: uri
	URI strfmt.URI `json:"uri,omitempty"`
}

// Validate validates this v2 artifact
func (m *V2Artifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildDependencyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMimeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Artifact) validateArtifactID(formats strfmt.Registry) error {

	if err := validate.Required("artifact_id", "body", m.ArtifactID); err != nil {
		return err
	}

	if err := validate.FormatOf("artifact_id", "body", "uuid", m.ArtifactID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validateBuildDependencyIds(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildDependencyIds) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildDependencyIds); i++ {

		if err := validate.FormatOf("build_dependency_ids"+"."+strconv.Itoa(i), "body", "uuid", m.BuildDependencyIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var v2ArtifactTypeBuildStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blocked","doomed","failed","ready","running","skipped","starting","succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2ArtifactTypeBuildStatePropEnum = append(v2ArtifactTypeBuildStatePropEnum, v)
	}
}

const (

	// V2ArtifactBuildStateBlocked captures enum value "blocked"
	V2ArtifactBuildStateBlocked string = "blocked"

	// V2ArtifactBuildStateDoomed captures enum value "doomed"
	V2ArtifactBuildStateDoomed string = "doomed"

	// V2ArtifactBuildStateFailed captures enum value "failed"
	V2ArtifactBuildStateFailed string = "failed"

	// V2ArtifactBuildStateReady captures enum value "ready"
	V2ArtifactBuildStateReady string = "ready"

	// V2ArtifactBuildStateRunning captures enum value "running"
	V2ArtifactBuildStateRunning string = "running"

	// V2ArtifactBuildStateSkipped captures enum value "skipped"
	V2ArtifactBuildStateSkipped string = "skipped"

	// V2ArtifactBuildStateStarting captures enum value "starting"
	V2ArtifactBuildStateStarting string = "starting"

	// V2ArtifactBuildStateSucceeded captures enum value "succeeded"
	V2ArtifactBuildStateSucceeded string = "succeeded"
)

// prop value enum
func (m *V2Artifact) validateBuildStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v2ArtifactTypeBuildStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V2Artifact) validateBuildState(formats strfmt.Registry) error {

	if err := validate.Required("build_state", "body", m.BuildState); err != nil {
		return err
	}

	// value enum
	if err := m.validateBuildStateEnum("build_state", "body", *m.BuildState); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validateBuildTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("build_timestamp", "body", m.BuildTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("build_timestamp", "body", "date-time", m.BuildTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validateLogURI(formats strfmt.Registry) error {

	if swag.IsZero(m.LogURI) { // not required
		return nil
	}

	if err := validate.FormatOf("log_uri", "body", "uri", m.LogURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validateMimeType(formats strfmt.Registry) error {

	if err := validate.Required("mime_type", "body", m.MimeType); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platform_id", "body", m.PlatformID); err != nil {
		return err
	}

	if err := validate.FormatOf("platform_id", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2Artifact) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *V2Artifact) validateURI(formats strfmt.Registry) error {

	if swag.IsZero(m.URI) { // not required
		return nil
	}

	if err := validate.FormatOf("uri", "body", "uri", m.URI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Artifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Artifact) UnmarshalBinary(b []byte) error {
	var res V2Artifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
