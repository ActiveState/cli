// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildStatusResponse Build Status Response
//
// A response describing status of a build: started, completed or failed.
//
// swagger:model BuildStatusResponse
type BuildStatusResponse struct {

	// An array containing all the artifacts that make up this build. When 'build_engine' is 'camel', this array is empty for all response types other than 'build_completed'
	Artifacts []*Artifact `json:"artifacts"`

	// Name of the system that orchestrates the build
	// Required: true
	// Enum: [alternative camel hybrid]
	BuildEngine *string `json:"build_engine"`

	// build request id
	// Required: true
	// Format: uuid
	BuildRequestID SubSchemaBuildRequestID `json:"build_request_id"`

	// All of the errors from the failed build. Will be null unless 'type' is 'build_failed'. Note that these errors may not be suitable for presenting to users and should simply be logged for further investigation.
	Errors []string `json:"errors"`

	// If true this failed build can be retried and it may succeed. If false, retrying this failed build will not change the outcome. This field's value is only valid when 'type' is 'build_failed'.
	// Required: true
	IsRetryable bool `json:"is_retryable"`

	// An S3 URI containing the log for this build. Always null for builds where 'build_engine' is not 'camel'
	// Format: uri
	LogURI strfmt.URI `json:"log_uri,omitempty"`

	// A user-facing message describing the build results.
	Message string `json:"message,omitempty"`

	// recipe id
	// Required: true
	// Format: uuid
	RecipeID *strfmt.UUID `json:"recipe_id"`

	// The timestamp for the message.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// Indicates the type of the contained message.
	// Required: true
	// Enum: [build_completed build_failed build_started]
	Type *string `json:"type"`
}

// Validate validates this build status response
func (m *BuildStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRetryable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildStatusResponse) validateArtifacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Artifacts); i++ {
		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {
			if err := m.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var buildStatusResponseTypeBuildEnginePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alternative","camel","hybrid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildStatusResponseTypeBuildEnginePropEnum = append(buildStatusResponseTypeBuildEnginePropEnum, v)
	}
}

const (

	// BuildStatusResponseBuildEngineAlternative captures enum value "alternative"
	BuildStatusResponseBuildEngineAlternative string = "alternative"

	// BuildStatusResponseBuildEngineCamel captures enum value "camel"
	BuildStatusResponseBuildEngineCamel string = "camel"

	// BuildStatusResponseBuildEngineHybrid captures enum value "hybrid"
	BuildStatusResponseBuildEngineHybrid string = "hybrid"
)

// prop value enum
func (m *BuildStatusResponse) validateBuildEngineEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, buildStatusResponseTypeBuildEnginePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BuildStatusResponse) validateBuildEngine(formats strfmt.Registry) error {

	if err := validate.Required("build_engine", "body", m.BuildEngine); err != nil {
		return err
	}

	// value enum
	if err := m.validateBuildEngineEnum("build_engine", "body", *m.BuildEngine); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatusResponse) validateBuildRequestID(formats strfmt.Registry) error {

	if err := m.BuildRequestID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("build_request_id")
		}
		return err
	}

	return nil
}

func (m *BuildStatusResponse) validateIsRetryable(formats strfmt.Registry) error {

	if err := validate.Required("is_retryable", "body", bool(m.IsRetryable)); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatusResponse) validateLogURI(formats strfmt.Registry) error {

	if swag.IsZero(m.LogURI) { // not required
		return nil
	}

	if err := validate.FormatOf("log_uri", "body", "uri", m.LogURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatusResponse) validateRecipeID(formats strfmt.Registry) error {

	if err := validate.Required("recipe_id", "body", m.RecipeID); err != nil {
		return err
	}

	if err := validate.FormatOf("recipe_id", "body", "uuid", m.RecipeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatusResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var buildStatusResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build_completed","build_failed","build_started"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildStatusResponseTypeTypePropEnum = append(buildStatusResponseTypeTypePropEnum, v)
	}
}

const (

	// BuildStatusResponseTypeBuildCompleted captures enum value "build_completed"
	BuildStatusResponseTypeBuildCompleted string = "build_completed"

	// BuildStatusResponseTypeBuildFailed captures enum value "build_failed"
	BuildStatusResponseTypeBuildFailed string = "build_failed"

	// BuildStatusResponseTypeBuildStarted captures enum value "build_started"
	BuildStatusResponseTypeBuildStarted string = "build_started"
)

// prop value enum
func (m *BuildStatusResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, buildStatusResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BuildStatusResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildStatusResponse) UnmarshalBinary(b []byte) error {
	var res BuildStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
