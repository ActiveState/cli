// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2BuildStatusResponse Build Status Response (V2)
//
// A snapshot of the current state of a particular build plan-driven build
// swagger:model V2BuildStatusResponse
type V2BuildStatusResponse struct {

	// An array containing all the artifacts output from all the steps in this build, post-ordered from the build dependency graph.
	// Required: true
	Artifacts []*V2Artifact `json:"artifacts"`

	// The ID of build plan for this build
	// Required: true
	// Format: uuid
	BuildPlanID *strfmt.UUID `json:"build_plan_id"`

	// Current state of the build's execution.
	// Required: true
	// Enum: [build_failed build_running build_succeeded]
	BuildState *string `json:"build_state"`
}

// Validate validates this v2 build status response
func (m *V2BuildStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2BuildStatusResponse) validateArtifacts(formats strfmt.Registry) error {

	if err := validate.Required("artifacts", "body", m.Artifacts); err != nil {
		return err
	}

	for i := 0; i < len(m.Artifacts); i++ {
		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {
			if err := m.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2BuildStatusResponse) validateBuildPlanID(formats strfmt.Registry) error {

	if err := validate.Required("build_plan_id", "body", m.BuildPlanID); err != nil {
		return err
	}

	if err := validate.FormatOf("build_plan_id", "body", "uuid", m.BuildPlanID.String(), formats); err != nil {
		return err
	}

	return nil
}

var v2BuildStatusResponseTypeBuildStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build_failed","build_running","build_succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2BuildStatusResponseTypeBuildStatePropEnum = append(v2BuildStatusResponseTypeBuildStatePropEnum, v)
	}
}

const (

	// V2BuildStatusResponseBuildStateBuildFailed captures enum value "build_failed"
	V2BuildStatusResponseBuildStateBuildFailed string = "build_failed"

	// V2BuildStatusResponseBuildStateBuildRunning captures enum value "build_running"
	V2BuildStatusResponseBuildStateBuildRunning string = "build_running"

	// V2BuildStatusResponseBuildStateBuildSucceeded captures enum value "build_succeeded"
	V2BuildStatusResponseBuildStateBuildSucceeded string = "build_succeeded"
)

// prop value enum
func (m *V2BuildStatusResponse) validateBuildStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v2BuildStatusResponseTypeBuildStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V2BuildStatusResponse) validateBuildState(formats strfmt.Registry) error {

	if err := validate.Required("build_state", "body", m.BuildState); err != nil {
		return err
	}

	// value enum
	if err := m.validateBuildStateEnum("build_state", "body", *m.BuildState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2BuildStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2BuildStatusResponse) UnmarshalBinary(b []byte) error {
	var res V2BuildStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
