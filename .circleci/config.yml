version: 2.1
defaults:
  steps:
    prepareEnv: &prepareEnv
      run:
        name: Prepare Environment
        command: |
          set -e
          mkdir -p $TEST_RESULTS
          GOFLAGSTMP=$GOFLAGS
          GOFLAGS=""

          # Don't run from project dir as that will pull in deps we don't need
          pushd ~
          $GOROOT/bin/go get github.com/jstemmer/go-junit-report
          $GOROOT/bin/go get github.com/gobuffalo/packr/packr
          popd

          ./public/install.sh -n -b master

          GOFLAGS=$GOFLAGSTMP
          $GOROOT/bin/go run scripts/constants-generator/main.go -- internal/constants/generated.go

          echo "export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $BASH_ENV
          echo "export PATH=\$HOME/.local/bin:\$GOROOT/bin:\$GOPATH/bin:\$PATH" >> $BASH_ENV
          echo "export PS1='> '" >> $BASH_ENV
          source $BASH_ENV

          $GOROOT/bin/go version
    runTests: &runTests
      run:
        name: Run unit tests
        command: |
          # We have to get a little creative here because we don't want to exit before the test results have been reported
          set +e 
          $GOROOT/bin/go test -v -covermode=atomic -coverprofile=c.out `$GOROOT/bin/go list ./... | grep -v api | grep -v integration | grep -v expect` > out
          EXITCODE=$?
          set -e 
          cat out | tee ${TEST_RESULTS}/go-test.out
          $GOBIN/go-junit-report < ${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml
          exit $EXITCODE
    buildCli: &buildCli
      run:
        name: Build the CLI
        no_output_timeout: 2m
        command: |
          set -e
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$BRANCH" == "master" ]]; then
            export BRANCH_OVERRIDE=unstable
          fi
          state run build
          state run generate-update
    runIntegrationTests: &runIntegrationTests
      run:
        name: Run integration tests
        command: |
          set -e
          go test -timeout 20m ./test/integration -v
    deployBits: &deployBits
      run:
        name: Deploy bits
        command: |
          set -e
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$BRANCH" == "master" ]]; then
            state run deploy-updates
          fi
          state run deploy-version
    storeArtifacts: &storeArtifacts
      store_artifacts:
        path: /tmp/test-results
        destination: raw-test-output
    storeTestResults: &storeTestResults
      store_test_results:
        path: /tmp/test-results
orbs:
  win: circleci/windows@1.0.0
jobs:
  build-linux:
    environment:
      TEST_RESULTS: /tmp/test-results
      GOBIN: /go/bin
      GOPATH: /go
      GOROOT: /usr/local/go
      GOFLAGS: -p=8 -mod=vendor
      SHELL: bash
      GO_BUILD_TAGS: CI
    docker:
      - image: circleci/golang:1.13
    resource_class: large
    working_directory: /home/circleci/workdir/github.com/ActiveState/cli
    steps:
      - checkout
      - <<: *prepareEnv
      - <<: *runTests
      - <<: *buildCli
      - <<: *deployBits
      - <<: *storeArtifacts
      - <<: *storeTestResults
  build-windows:
    environment:
      GOBIN: /go/bin
      GOPATH: /go
      GOROOT: /c/go
      GOFLAGS: -p=8 -mod=vendor
      TEST_RESULTS: /c/tmp/test-results
      GO_BUILD_TAGS: CI
    executor:
      name: win/vs2019
      shell: bash.exe
    working_directory: /workdir/github.com/ActiveState/cli
    steps:
      - checkout
      - <<: *prepareEnv
      - <<: *runTests
      - <<: *buildCli
      - run:
          name: Run integration tests
          # circleci's cmd.exe integration does not accept multi line input
          command: set PATH=C:\Users\circleci\.local\bin;%PATH% && set SHELL=cmd.exe && cd C:\workdir\github.com\ActiveState\cli && state run integration-tests
          shell: cmd.exe
      - <<: *deployBits
      - store_artifacts:
          path: C:\tmp\test-results
          destination: raw-test-output
      - store_test_results:
          path: C:\tmp\test-results
  build-macos:
    environment:
      TEST_RESULTS: /tmp/test-results
      GOPATH: /private/tmp/gohome
      GOBIN: /private/tmp/gohome/bin
      GOROOT: /private/tmp/go
      GOFLAGS: -p=8 -mod=vendor
      SHELL: bash
      GO_BUILD_TAGS: CI
    macos:
      xcode: 9.3.0
    resource_class: large
    working_directory: /private/tmp/workdir/github.com/ActiveState/cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            pushd /private/tmp
            curl https://dl.google.com/go/go1.13.9.darwin-amd64.tar.gz -o golang.tar.gz
            tar -xzf golang.tar.gz
            popd
      - <<: *prepareEnv
      - <<: *runTests
      - <<: *buildCli
      - <<: *deployBits
      - <<: *storeArtifacts
      - <<: *storeTestResults
  test-linux:
    environment:
      TEST_RESULTS: /tmp/test-results
      GOBIN: /go/bin
      GOPATH: /go
      GOROOT: /usr/local/go
      GOFLAGS: -p=8 -mod=vendor
      SHELL: bash
      GO_BUILD_TAGS: CI
    docker:
      - image: circleci/golang:1.13
    resource_class: large
    working_directory: /home/circleci/workdir/github.com/ActiveState/cli
    steps:
      - checkout
      - <<: *prepareEnv
      - <<: *buildCli
      - <<: *runIntegrationTests
  test-macos:
    environment:
      TEST_RESULTS: /tmp/test-results
      GOPATH: /private/tmp/gohome
      GOBIN: /private/tmp/gohome/bin
      GOROOT: /private/tmp/go
      GOFLAGS: -p=8 -mod=vendor
      SHELL: bash
    macos:
      xcode: 9.3.0
    resource_class: large
    working_directory: /private/tmp/workdir/github.com/ActiveState/cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            pushd /private/tmp
            curl https://dl.google.com/go/go1.13.9.darwin-amd64.tar.gz -o golang.tar.gz
            tar -xzf golang.tar.gz
            popd
      - <<: *prepareEnv
      - <<: *buildCli
      - <<: *runIntegrationTests
workflows:
  version: 2
  CI-test-build-deploy:
    jobs:
      - build-linux:
          filters:
            branches:
              ignore:
                - clas
      # - build-windows
      #     filters:
      #       branches:
      #         ignore:
      #           - clas
      - build-macos:
          filters:
            branches:
              ignore:
                - clas
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-linux
      - test-macos
