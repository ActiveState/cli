steps:
  - checkout: self
    fetchDepth: 1
  - script: |
      mkdir $(System.DefaultWorkingDirectory)/bin
      ./public/install.sh -b master -n -t $(System.DefaultWorkingDirectory)/bin
      echo "##vso[task.prependpath]$(System.DefaultWorkingDirectory)/bin"
    displayName: Install State Tool
  - script: cc-test-reporter before-build
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Prepare Code Climate
  - script: |
      state run preprocess

      # Run tests and convert output to junit format
      #go test -parallel 12 -covermode=atomic -coverprofile=c.out `go list ./... | grep -vE "(secrets-)?api/(client|model)"` | tee go-test.out
      go test -covermode=atomic -coverprofile=c.out github.com/ActiveState/cli/internal/virtualenvironment | tee go-test.out
      go-junit-report < go-test.out > go-test-report.xml

      # Tests appear to be breaking the authentication, so re-authenticate
      state auth --token $PLATFORM_API_TOKEN
    displayName: Unit Tests
  - script: cc-test-reporter after-build --coverage-input-type gocov --prefix github.com/ActiveState/cli/
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Report to Code Climate
  - script: cat go-test-report.xml
  - script: |
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
      if [[ "$BRANCH" == "master" ]]; then
        echo "Building for external use"
        APIENV=prod BRANCH_OVERRIDE=unstable state run build-external
      fi

      echo "Building for internal use"
      APIENV=prod state run build
    displayName: 'Build'
  - script: |
      cd test/integration
      pip3 install -r requirements.txt
      cd ../../
      build/state run integration-tests
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Integration Tests
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: go-test-report.xml
      failTaskOnFailedTests: true