steps:
  - script: printenv
    displayName: Environment Info
  - script: |
      set -e

      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(BINPATH)'

      mkdir -p $BINPATH
      mkdir -p $GOPATH
      mkdir -p $GOBIN
      mkdir -p $MODPATH

      go get -v github.com/gobuffalo/packr/packr
      go get -v github.com/jstemmer/go-junit-report

      shopt -s dotglob nullglob
      mv "$(system.defaultWorkingDirectory)/"* $MODPATH
    displayName: Prepare Environment
  - script: |
      ./public/install.sh -b master -n -t $BINPATH
    workingDirectory: $(MODPATH)
    displayName: Install State Tool
  - script: cc-test-reporter before-build
    env: 
      CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)
    workingDirectory: $(MODPATH)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Prepare Code Climate
  - script: |
      set -e
      export GOFLAGS=-mod=vendor
      state run preprocess

      # Run tests and convert output to junit format
      go test -v -parallel 12 -covermode=atomic -coverprofile=c.out `go list ./... | grep -vE "(secrets-)?api/(client|model)"` | tee go-test.out
      go-junit-report < go-test.out > $(Agent.OS)-tests.xml

      # Tests appear to be breaking the authentication, so re-authenticate
      state auth --token $PLATFORM_API_TOKEN
    env:
      PLATFORM_API_TOKEN: $(PLATFORM_API_TOKEN)
    workingDirectory: $(MODPATH)
    displayName: Unit Tests
  - script: cc-test-reporter after-build --coverage-input-type gocov --prefix github.com/ActiveState/cli/
    env: 
      CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)
    workingDirectory: $(MODPATH)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Report to Code Climate
  - script: |
      set -e
      export GOFLAGS=-mod=vendor
      
      if [[ "$BUILD_SOURCEBRANCHNAME" == "master" ]]; then
        echo "Building for external use"
        APIENV=prod BRANCH_OVERRIDE=origin/unstable state run build-external
      fi

      echo "Building for internal use"
      APIENV=prod state run build
    workingDirectory: $(MODPATH)
    displayName: 'Build'
  - script: |
      set -e
      cd test/integration
      pip3 install -r requirements.txt
      cd ../../
      build/state run integration-tests
    workingDirectory: $(MODPATH)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Integration Tests
  - task: PublishTestResults@2
    inputs:
      searchFolder: $(MODPATH)
      testResultsFormat: JUnit
      testResultsFiles: '*-tests.xml'
      failTaskOnFailedTests: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(MODPATH)/public
      parallel: true
      parallelCount: 8