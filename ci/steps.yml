steps:
  - bash: printenv
    displayName: Environment Info
  - bash: |
      set -e

      mkdir -p $(BINPATH)
      mkdir -p $(GOPATH)
      mkdir -p $(GOBIN)
      mkdir -p $(MODPATH)

      shopt -s dotglob nullglob
      mv "$(system.defaultWorkingDirectory)/"* $(MODPATH)

      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(BINPATH)'
      echo '##vso[task.prependpath]$(MODPATH)/ci/$(Agent.OS)/bin'
    displayName: Prepare Environment
  - bash: |
      ./public/install.sh -b master -n -t $(BINPATH)
    workingDirectory: $(WORKDIR)
    displayName: Install State Tool
  - bash: cc-test-reporter before-build
    env: 
      CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)
    workingDirectory: $(WORKDIR)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Prepare Code Climate
  - bash: |
      set -e
      state run preprocess

      # Run tests and convert output to junit format
      go test -v -parallel 12 -covermode=atomic -coverprofile=c.out `go list ./... | grep -vE "(secrets-)?api/(client|model)"` | tee go-test.out
      go-junit-report < go-test.out > $(Agent.OS)-tests.xml
      cp go-test.out public/$(Agent.OS)-tests.out
      cp $(Agent.OS)-tests.xml public

      # Tests appear to be breaking the authentication, so re-authenticate
      state auth --token $(PLATFORM_API_TOKEN)
    workingDirectory: $(WORKDIR)
    displayName: Unit Tests
  - bash: cc-test-reporter after-build --coverage-input-type gocov --prefix github.com/ActiveState/cli/
    env: 
      CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)
    workingDirectory: $(WORKDIR)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Report to Code Climate
  - bash: |
      set -e
      
      if [[ "$BUILD_SOURCEBRANCHNAME" == "master" ]]; then
        echo "Building for external use"
        APIENV=prod BRANCH_OVERRIDE=origin/unstable state run build-external
      fi

      echo "Building for internal use"
      APIENV=prod state run build
    workingDirectory: $(WORKDIR)
    displayName: 'Build'
  - bash: |
      set -e
      cd test/integration
      pip3 install -r requirements.txt
      cd ../../
      build/state run integration-tests
    workingDirectory: $(WORKDIR)
    condition: eq(variables['Agent.OS'],'Linux')
    displayName: Integration Tests
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(WORKDIR)/public
      parallel: true
      parallelCount: 8
  - task: PublishTestResults@2
    inputs:
      searchFolder: $(WORKDIR)
      testResultsFormat: JUnit
      testResultsFiles: '*-tests.xml'
      failTaskOnFailedTests: true