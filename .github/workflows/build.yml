name: Build-Test-Deploy
"on":
  push:
    branches:
    - master
    - beta
    - release
  pull_request:
    types:
    - labeled
    - opened
    - synchronize
    - reopened
jobs:
  build:
    name: Build
    strategy:
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        printenv
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Build CLI
      shell: bash
      run: state run build
    - name: Build Service
      shell: bash
      run: state run build-svc
    - name: Build Tray App
      shell: bash
      if: runner.os != 'Linux'
      run: |
        state run build-tray
    - name: Build Tray App (linux)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libgtk-3-dev libappindicator3-dev -y
        state run build-tray
    - name: Build Installer
      shell: bash
      run: state run build-installer
    - name: Build CLI (32bit)
      shell: bash
      if: runner.os == 'Windows'
      run: GOARCH=386 state run build
    - name: Build Service (32bit)
      shell: bash
      if: runner.os == 'Windows'
      run: GOARCH=386 state run build-svc
    - name: Build Tray App (32bit)
      shell: bash
      if: runner.os == 'Windows'
      run: GOARCH=386 state run build-tray
    - name: Build Installer (32bit)
      shell: bash
      if: runner.os == 'Windows'
      run: GOARCH=386 state run build-installer
    - name: Build Install Scripts
      shell: bash
      run: state run build-install-scripts
    - name: Sign
      shell: bash
      if: runner.os == 'Windows'
      run: "echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12\nexport PATH=/c/Program\\
        Files\\ \\(x86\\)/WiX\\ Toolset\\ v3.11/bin/:/c/Program\\ Files\\ \\(x86\\)/Windows\\
        Kits/10/bin/10.0.16299.0/x86/:$PATH\n\nsigntool.exe sign -d \"ActiveState
        State Tool\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD} ./build/state.exe \nsigntool.exe
        sign -d \"ActiveState State Service\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD}
        ./build/state-svc.exe \nsigntool.exe sign -d \"ActiveState State Tray\" -f
        \"Cert.p12\" -p ${CODE_SIGNING_PASSWD} ./build/state-tray.exe \nsigntool.exe
        sign -d \"ActiveState State Installer\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD}
        ./build/state-installer.exe \nsigntool.exe sign -d \"ActiveState State Tool
        (32bit)\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD} ./build/386/state.exe
        \nsigntool.exe sign -d \"ActiveState State Service (32bit)\" -f \"Cert.p12\"
        -p ${CODE_SIGNING_PASSWD} ./build/386/state-svc.exe \nsigntool.exe sign -d
        \"ActiveState State Tray (32bit)\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD}
        ./build/386/state-tray.exe \nsigntool.exe sign -d \"ActiveState State Installer
        (32bit)\" -f \"Cert.p12\" -p ${CODE_SIGNING_PASSWD} ./build/386/state-installer.exe
        \n"
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Sign install.PS1
      if: runner.os == 'Windows' && contains(fromJSON('["refs/heads/master", "refs/heads/beta",
        "refs/heads/release"]'), github.ref)
      shell: powershell
      run: |
        $branchInfix = $Env:GITHUB_REF.Replace("refs/heads/", "").Replace("release", "")
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import('Cert.p12',$env:CODE_SIGNING_PASSWD,'DefaultKeySet')
        Set-AuthenticodeSignature -FilePath build\installers\$branchInfix\install.ps1 -Certificate $cert
        Set-AuthenticodeSignature -FilePath build\installers\$branchInfix\legacy-install.ps1 -Certificate $cert
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
    - name: Generate Update
      shell: bash
      run: state run generate-update
    - name: Generate Update (32bit)
      shell: bash
      if: runner.os == 'Windows'
      run: GOARCH=386 state run generate-update
    - name: Build State MSI
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
        export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
        export SHELL=bash
        state run build-msi-state
        signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} build/msi/state_tool.msi
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Build Languages MSI
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
        export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
        export SHELL=bash
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.26 5.26.3001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.28 5.28.1001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
        state run build-base-language-msi
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Upload Session Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: session-build-${{ matrix.platform }}
        path: build/
  unittest:
    name: Unit Test
    strategy:
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        printenv
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Unit Tests
      shell: bash
      run: |
        go test `go list ./... | grep -v api | grep -v integration | grep -v expect | grep -v state-tray | grep -v state-svc`
  inttest_critical:
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/beta' && github.ref
      != 'refs/heads/release'
    name: Critical Integration Test
    strategy:
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        printenv
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Build CLI
      shell: bash
      run: state run build
    - name: Build Service
      shell: bash
      run: state run build-svc
    - name: Build Tray App
      shell: bash
      if: runner.os != 'Linux'
      run: |
        state run build-tray
    - name: Build Tray App (linux)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libgtk-3-dev libappindicator3-dev -y
        state run build-tray
    - name: Build Installer
      shell: bash
      run: state run build-installer
    - name: Generate Update
      shell: bash
      run: state run generate-update
    - name: Generate Test Update
      shell: bash
      run: state run generate-test-update
    - name: Build Languages MSI
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
        export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
        export SHELL=bash
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.26 5.26.3001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.28 5.28.1001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
        state run build-base-language-msi
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Critical Integration Tests
      shell: bash
      run: |
        export SHELL=''
        set +e
        go test -timeout 10m github.com/ActiveState/cli/test/integration -test.v -test.run "^TestLanguageMsiActivePerl|TestDeployIntegrationTestSuite|TestInitIntegrationTestSuite|TestPushIntegrationTestSuite|TestUpdateIntegrationTestSuite|PrepareIntegrationTestSuite|InstallScriptsIntegrationTestSuite|ShowIntegrationTestSuite$"
        testCode=$?
        head -n-0 build/*log 2>/dev/null
        exit ${testCode}
      env:
        INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
        INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
        PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
  inttest:
    if: contains(github.event.pull_request.labels.*.name, 'run integration tests')
    name: Integration Test
    strategy:
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        printenv
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Build CLI
      shell: bash
      run: state run build
    - name: Build Service
      shell: bash
      run: state run build-svc
    - name: Generate Update
      shell: bash
      run: state run generate-update
    - name: Build Languages MSI
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
        export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
        export SHELL=bash
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.26 5.26.3001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.28 5.28.1001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
        state run build-base-language-msi
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Integration Tests
      shell: bash
      run: |
        LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
        IFS=',' read -r -a TESTS <<< "$LABELS"
        TEST_SUITE_TAGS=""
        for i in "${TESTS[@]}"
        do
          :
          START=${i%:*}
          if [ "$START" == "run-int-test-only" ]; then
            TEST_SUITE=${i##*:}
            TEST_SUITE_TAGS="$TEST_SUITE:$TEST_SUITE_TAGS"
          fi
        done

        export TEST_SUITE_TAGS="$TEST_SUITE_TAGS"
        SHELL='' go test -timeout 20m ./test/integration -v
      env:
        INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
        INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
        PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  deploy:
    name: Deploy
    needs:
    - build
    - unittest
    runs-on: ubuntu-20.04
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        printenv
    - name: Download All Session Artifacts
      uses: actions/download-artifact@v2
      with:
        path: build/
    - name: Sanitize All Session Artifacts
      shell: bash
      run: |
        cd build
        rm -Rf session-shared-build
        find . -mindepth 2 -maxdepth 2 -print0 | xargs -0 -I file rsync -av file .
        rm -Rf session*
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Cleanup Build Dir
      shell: bash
      run: rm build/state* || true
    - name: Deploy
      shell: bash
      if: contains(fromJSON('["refs/heads/master", "refs/heads/beta", "refs/heads/release"]'),
        github.ref)
      run: |
        state run deploy-updates
        state run deploy-installers
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Cleanup Session Artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: |
          session-shared-build
          session-build-ubuntu-18.04
          session-build-macos-latest
          session-build-windows-latest
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build/
