name: Build-Test-Deploy

# === Triggers ===
"on":
  push:
    branches:
      - master
      - beta
      - release
  pull_request:
    types:
      - labeled
      - opened
      - synchronize
      - reopened

# === JOBS ===
jobs:

  # === OS Specific Job (runs on each OS) ===
  os_specific:
    name: ${{ matrix.platform }}
    strategy:
      matrix:
        go-version:
          - 1.16.x
        platform:
          - ubuntu-20.04
          - macos-latest
          - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10

    # === OS Specific Steps ===
    steps:

      - # Checkout Code
        name: Checkout code
        uses: actions/checkout@v2

      - # === Install Go ===
        name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - # === Setup ===
        name: Setup
        shell: bash
        run: |
          bin=$(pwd)/.github/deps/${{ runner.os }}/bin
          echo "Adding $bin to PATH"
          echo "$bin" >> $GITHUB_PATH

          if [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update
            sudo apt-get install libgtk-3-dev libappindicator3-dev libwebkit2gtk-4.0-dev -y
          fi

          printenv

      - # === Setup Windows ===
        name: Setup (Windows)
        shell: pwsh
        run: |
          echo "${PSScriptRoot}/.github/deps/${{ runner.os }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - # === Preprocess ===
        name: Preprocess
        shell: bash
        run: state run preprocess

      - # === Parallel Tasks ===
        name: Parallel Tasks
        shell: bash
        run: |
          export PATH="$(pwd)/.github/deps/${{ runner.os }}/bin:$PATH"
          parallelize "$(cat <<'EOF'
          [
            {
                "ID": "Unit-Tests",
                "Args": ["state", "run", "test"]
            },
            {
                "ID": "Build-CLI",
                "Args": ["state", "run", "build"]
            },
            {
                "ID": "Build-Service",
                "Args": ["state", "run", "build-svc"]
            },
            {
                "ID": "Build-Tray",
                "Args": ["state", "run", "build-tray"]
            },
            {
                "ID": "Build-Systray-App",
                "Args": ["state", "run", "build-systray-app"],
                "If": "eq .OS.Name \"MacOS\""
            },
            {
                "ID": "Build-Installer",
                "Args": ["state", "run", "build-installer"]
            },
            {
                "ID": "Build-Install-Scripts",
                "Args": ["state", "run", "build-install-scripts"]
            },
            {
                "ID": "Build-Languages-MSI",
                "Args": ["state", "run", "ci-build-languages-msi"],
                "If": "eq .OS.Name \"Windows\""
            }
          ]
          EOF
          )"
        env:
          CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
          MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}

      - # === Unit Tests ===
        name: Unit Tests
        shell: bash
        run: parallelize results Unit-Tests | gotestfmt

      - # === "Build: CLI" ===
        name: "Build: CLI"
        shell: bash
        run: parallelize results Build-CLI

      - # === "Build: Service" ===
        name: "Build: Service"
        shell: bash
        run: parallelize results Build-Service

      - # === "Build: Tray App" ===
        name: "Build: Tray App"
        shell: bash
        run: parallelize results Build-Tray

      - # === "Build: Installer" ===
        name: "Build: Installer"
        shell: bash
        run: parallelize results Build-Installer

      - # === "Build: Install Scripts" ===
        name: "Build: Install Scripts"
        shell: bash
        run: parallelize results Build-Install-Scripts

      - # === "Build: Systray App" ===
        name: "Build: Systray App"
        shell: bash
        if: runner.os == 'macOS'
        run: parallelize results Build-Systray-App

      - # === "Build: Languages MSI" ===
        name: "Build: Languages MSI"
        if: runner.os == 'Windows'
        shell: bash
        run: parallelize results Build-Languages-MSI

      - # === Sign Binaries (Windows only) ===
        name: Sign Binaries (Windows only)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
          export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH

          signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state.exe
          signtool.exe sign -d "ActiveState State Service" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state-svc.exe
          signtool.exe sign -d "ActiveState State Tray" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state-tray.exe
          signtool.exe sign -d "ActiveState State Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state-installer.exe
        env:
          CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
          MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}

      - # === Sign Install Scripts (Windows only) ===
        name: Sign Install Scripts (Windows only)
        shell: powershell
        if: runner.os == 'Windows'
        run: |
          $branchInfix = $Env:GITHUB_HEAD_REF.Replace("refs/heads/", "").Replace("release", "")
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import('Cert.p12',$env:CODE_SIGNING_PASSWD,'DefaultKeySet')
          Set-AuthenticodeSignature -FilePath build\installers\$branchInfix\install.ps1 -Certificate $cert
          Set-AuthenticodeSignature -FilePath build\installers\$branchInfix\install-latest.ps1 -Certificate $cert
          Set-AuthenticodeSignature -FilePath build\installers\$branchInfix\legacy-install.ps1 -Certificate $cert
        env:
          CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
          MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}

      - # === Generate Update ===
        name: Generate Update
        shell: bash
        run: state run generate-update

      - # === Deploy for Integration Tests # NEVER run this against production branches. This is meant for PR deployments. ===
        name: Deploy for Integration Tests # NEVER run this against production branches. This is meant for PR deployments.
        if: github.ref != 'refs/heads/release'
        shell: bash
        run: |
          echo 1
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          echo 2
          LABELCHECK=$(echo $LABELS | grep "Test:")
          echo 3
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo 4
          if [ "$LABELCHECK" == "" ] && [ "$TARGET_BRANCH" != "beta" ] && [ "$TARGET_BRANCH" != "release" ]; then
            echo "Not running because no test labels were set nor beta or release were targeted."
            exit 0
          fi
          echo 5
          state run deploy-updates
          state run deploy-installers
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - # === Integration Tests ===
        name: Integration Tests
        if: github.ref != 'refs/heads/release'
        shell: bash
        run: |
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          IFS=',' read -r -a TESTS <<< "$LABELS"
          TEST_SUITE_TAGS=""
          for i in "${TESTS[@]}"; do
            START=${i%:*}
            if [ "$START" == "Test" ]; then
              TAG=${i##*:}
              TAG=$(echo $TAG | xargs)
              TEST_SUITE_TAGS="$TAG:$TEST_SUITE_TAGS"
            fi
          done

          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Target branch: $TARGET_BRANCH"

          if [ "$TEST_SUITE_TAGS" == "" ] && [ "$TARGET_BRANCH" != "beta" ] && [ "$TARGET_BRANCH" != "release" ]; then
            echo "Not running because no test labels were set nor beta or release were targeted."
            exit 0
          fi

          echo "Running integration tests with tags: $TEST_SUITE_TAGS (empty means everything)"

          export TEST_SUITE_TAGS="$TEST_SUITE_TAGS"
          SHELL='' go test -v `go list ./... | grep integration` | gotestfmt
        env:
          INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
          INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
          PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - # === Upload Session Artifacts ===
        name: Upload Session Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: session-build-${{ matrix.platform }}
          path: build/

  # === Deploy job (runs once with combined artifacts from OS specific job) ===
  deploy:
    name: Deploy
    needs:
      - os_specific
    runs-on: ubuntu-20.04
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10
    if: contains(fromJSON('["refs/heads/master", "refs/heads/beta", "refs/heads/release"]'), github.ref)

    # === Deploy Steps ===
    steps:

      - # === Checkout code ===
        name: Checkout code
        uses: actions/checkout@v2

      - # === Install Go ===
        name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - # === Setup ===
        name: Setup
        shell: bash
        run: |
          bin=$(pwd)/.github/deps/${{ runner.os }}/bin
          echo "Adding $bin to PATH"
          echo "$bin" >> $GITHUB_PATH
          ls -ahl $bin
          printenv

      - # === Download All Build Session Artifacts ===
        name: Download All Build Session Artifacts
        uses: actions/download-artifact@v2
        with:
          path: build/

      - # === Sanitize All Session Artifacts ===
        name: Sanitize All Session Artifacts
        shell: bash
        run: |
          cd build
          rm -Rf session-shared-build
          find . -mindepth 2 -maxdepth 2 -print0 | xargs -0 -I file rsync -av file .
          rm -Rf session*

      - # === Preprocess ===
        name: Preprocess
        shell: bash
        run: state run preprocess

      - # === Cleanup Build Dir ===
        name: Cleanup Build Dir
        shell: bash
        run: rm build/state* || true

      - # === Deploy ===
        name: Deploy
        shell: bash
        run: |
          state run deploy-updates
          state run deploy-installers
          state run deploy-msi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - # === Cleanup Session Artifacts ===
        name: Cleanup Session Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            session-shared-build
            session-build-ubuntu-20.04
            session-build-macos-latest
            session-build-windows-latest

      - # === Upload Artifacts ===
        name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/
