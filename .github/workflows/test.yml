name: Test

# === Triggers ===
'on':
  workflow_run:
    workflows: [Build]
    types:
      - completed
  schedule:
    - cron: 0 0 * * *

# === Workflow Permissions ===
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

# === Workflow-level environment variables ===
env:
  AWS_REGION: us-east-1
  AWS_ROLE_SESSION_NAME: gha-activestate-cli

# === JOBS ===
jobs:
  # === OS Specific Job (runs on each OS) ===
  os_specific:
    name: ${{ matrix.sys.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        go-version:
          - 1.20.x
        sys:
          - { os: ubuntu-20.04 }
          - { os: macos-11, shell: zsh }
          - { os: windows-2019 }
      fail-fast: false
    runs-on: ${{ matrix.sys.os }}
    env:
      ACTIVESTATE_CI: true
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    concurrency:
      group: ${{ github.ref }}-${{ github.event_name }}-${{ matrix.sys.os }}
      cancel-in-progress: true

    # === OS Specific Steps ===
    steps:
      - # === Disable Windows Defender as it slows things down significantly ===
        name: Disabling Windows Defender
        if: runner.os == 'Windows'
        shell: powershell
        run: Set-MpPreference -DisableRealtimeMonitoring $true

      - # === Checkout Code ===
        name: Checkout code
        uses: actions/checkout@v2

      - # === Install Go ===
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      # === Install gotestfmt ===
      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - # === Setup ===
        name: Setup
        shell: bash
        run: |
          bin=$(pwd)/.github/deps/${{ runner.os }}/bin
          echo "Adding $bin to PATH"
          echo "$bin" >> $GITHUB_PATH

          if [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update
            sudo apt-get install fish zsh tcsh -y
            # Prevent zsh insecure directory warning.
            sudo chmod -R 755 /usr/share/zsh/vendor-completions /usr/share/zsh
            sudo chown -R root:root /usr/share/zsh/vendor-completions /usr/share/zsh
            touch ~/.zshrc
          fi

          printenv

      - # === Setup Windows ===
        name: Setup (Windows)
        shell: pwsh
        run: |
          echo "${PSScriptRoot}/.github/deps/${{ runner.os }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - # == Setup macOS ==
        name: Setup (macOS)
        shell: bash
        run: brew install fish
        if: runner.os == 'macOS'

      - # === Download All Build Session Artifacts ===
        name: Download All Build Session Artifacts
        uses: actions/download-artifact@v2
        with:
          path: build/

      - # === Parallel Tasks ===
        name: Parallel Tasks
        shell: bash
        timeout-minutes: 15
        run: |
          export PATH="$(pwd)/.github/deps/${{ runner.os }}/bin:$PATH"
          parallelize "$(cat <<'EOF'
          [
            {
                "ID": "Unit-Tests",
                "Args": ["state", "run", "test", "-json", "2>&1"]
            }
          ]
          EOF
          )"
        env:
          CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
          MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JIRA_USERNAME: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}

      - # === Unit Tests ===
        name: Unit Tests
        id: unit_tests
        shell: bash
        run: parallelize results Unit-Tests | gotestfmt -hide empty-packages
        continue-on-error: ${{ github.event_name != 'schedule' }}

      - # === Integration Tests ===
        name: Integration Tests
        id: integration_tests
        if: '!contains(fromJSON(''["refs/heads/beta", "refs/heads/release", "refs/heads/LTS"]''), github.ref)'
        shell: bash
        run: |
          if [ "$GITHUB_EVENT_NAME" != "schedule" ]; then
            LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
            IFS=',' read -r -a TESTS <<< "$LABELS"
            TEST_SUITE_TAGS=""
            for i in "${TESTS[@]}"; do
              START=${i%:*}
              if [ "$START" == "Test" ]; then
                TAG=${i##*:}
                TAG=$(echo $TAG | xargs)
                if [[ "$TEST_SUITE_TAGS" == "" ]]; then
                  TEST_SUITE_TAGS=$TAG
                else
                  TEST_SUITE_TAGS="$TAG:$TEST_SUITE_TAGS"
                fi
              fi
            done

            TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "Target branch: $TARGET_BRANCH"

            if [ "$TEST_SUITE_TAGS" == "" ] && [ "$TARGET_BRANCH" != "master" ] && [ "$TARGET_BRANCH" != "beta" ] && [ "$TARGET_BRANCH" != "release" ] && [ "$TARGET_BRANCH" != "lts-release" ]; then
              echo "Not running because no test labels were set nor master, beta or release were targeted."
              exit 0
            fi
          else
            TEST_SUITE_TAGS="all"
          fi

          echo "Running integration tests with tags: $TEST_SUITE_TAGS (empty means every test not specifically tagged)"

          export TEST_SUITE_TAGS="$TEST_SUITE_TAGS"
          TIMEOUT=30m
          if [[ "$TEST_SUITE_TAGS" == "all" ]]; then
            TIMEOUT=60m
          fi
          SHELL='${{ matrix.sys.shell }}' go test -timeout $TIMEOUT -v `go list ./... | grep "integration"` -json 2>&1 | gotestfmt -hide empty-packages
        continue-on-error: ${{ github.event_name == 'schedule' }}
        env:
          INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
          INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
          INTEGRATION_TEST_TOKEN: ${{ secrets.INTEGRATION_TEST_TOKEN }}
          PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}

      - # === Fail If Unscheduled Unit Tests Failed (Expand 'Unit Tests' above for more information) ===
        name: Fail If Unscheduled Unit Tests Failed
        if: github.event_name != 'schedule' && steps.unit_tests.outcome == 'failure'
        shell: bash
        run: exit 1

      - # === Notify Slack of Nightly Integration Test Failures ===
        name: Notify Slack of Nightly Integration Test Failures
        if: github.event_name == 'schedule' && steps.integration_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "text": "Nightly integration test failure(s) on ${{ runner.os }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "Nightly integration test failure(s) on ${{ runner.os }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "Select the '${{ matrix.sys.os }}' job and expand 'Integration Tests' to inspect the failures."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - # === Fail If Nightly Integration Tests Failed (Expand 'Integration Tests' above for more information) ===
        name: Fail If Nightly Integration Tests Failed
        if: github.event_name == 'schedule' && steps.integration_tests.outcome == 'failure'
        shell: bash
        run: exit 1
