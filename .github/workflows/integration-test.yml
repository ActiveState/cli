name: Integration Test
"on":
  schedule:
  - cron: 0 0 * * *
jobs:
  inttest:
    name: Integration Test
    strategy:
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
      fail-fast: false
    needs:
    - deploy_versioned
    runs-on: ${{ matrix.platform }}
    env:
      ACTIVESTATE_CLI_DISABLE_RUNTIME: true
      GOFLAGS: -mod=vendor
      SHELL: bash
      GITHUB_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup
      shell: bash
      run: |
        bin=$(pwd)/.github/deps/${{ runner.os }}/bin
        echo "Adding $bin to PATH"
        echo "$bin" >> $GITHUB_PATH
        mkdir reports
        printenv
    - name: Preprocess
      shell: bash
      run: |
        state run preprocess
    - name: Build CLI
      shell: bash
      run: state run build
    - name: Build Service
      shell: bash
      run: state run build-svc
    - name: Build Tray App
      shell: bash
      run: |
        state run build-tray
    - name: Build Update Dialog (Linux & Mac)
      if: runner.os != 'Windows'
      shell: bash
      run: state run build-updlg prod
    - name: Build Update Dialog (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: C:\msys64\usr\bin\bash.exe -c "state run build-updlg prod"
    - name: Build Installer
      shell: bash
      run: state run build-installer
    - name: Build Systray App
      shell: bash
      if: runner.os == 'macOS'
      run: state run build-systray-app
    - name: Generate Update
      shell: bash
      run: |
        state run generate-update
    - name: Generate Test Update
      shell: bash
      run: state run generate-test-update
    - name: Build Languages MSI
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
        export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
        export SHELL=bash
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.26 5.26.3001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
        state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.28 5.28.1001
        signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
        state run build-base-language-msi
      env:
        CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
        MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
    - name: Integration Tests
      shell: bash
      run: |
        LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
        IFS=',' read -r -a TESTS <<< "$LABELS"
        TEST_SUITE_TAGS=""
        for i in "${TESTS[@]}"
        do
          :
          START=${i%:*}
          if [ "$START" == "run-int-test-only" ]; then
            TEST_SUITE=${i##*:}
            TEST_SUITE_TAGS="$TEST_SUITE:$TEST_SUITE_TAGS"
          fi
        done

        export TEST_SUITE_TAGS="$TEST_SUITE_TAGS"
        GOFLAGS="" go install github.com/jstemmer/go-junit-report@latest
        REPORT_FILE=reports/report-inttest-${{ matrix.platform }}.xml
        touch $REPORT_FILE
        SHELL='' go test -v -timeout 20m ./test/integration -v | tee >(go-junit-report > $REPORT_FILE)
      env:
        INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
        INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
        PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Upload Report Artifacts
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: session-build-${{ matrix.platform }}
        path: |
          reports/
  report:
    name: Report
    needs:
    - unittest
    - inttest_critical
    - inttest
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    if: always()
    steps:
    - name: Download Report Session Artifacts
      uses: actions/download-artifact@v2
      with:
        path: reports/
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        check_name: Test Results
        files: reports/**/*.xml
