#@ def steps_genversion():
name: "Generate Version"
shell: bash
run: state run generate-version
#@ end
---
#@ def steps_build():
name: Build
shell: bash
run: state run build
#@ end
---
#@ def steps_build_32bit():
name: Build (32bit)
shell: bash
if: runner.os == 'Windows'
run: state run build-32bit
#@ end
---
#@ def steps_build_installscripts():
name: Build Install Scripts
shell: bash
run: state run build-install-scripts
#@ end
---
#@ def steps_sign():
name: Sign
shell: bash
if: runner.os == 'Windows'
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH

  signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state.exe 
  signtool.exe sign -d "ActiveState State Tool (32bit)" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/state32.exe 
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_sign_installscript():
name: "Sign install.PS1"
if: runner.os == 'Windows'
shell: powershell
run: |
   $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
   $cert.Import('Cert.p12',$env:CODE_SIGNING_PASSWD,'DefaultKeySet')
   Set-AuthenticodeSignature -FilePath build\install.ps1 -Certificate $cert
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
#@ end
---
#@ def steps_genupdate():
name: "Generate Update"
shell: bash
run: state run generate-update
#@ end
---
#@ def steps_genupdate_32bit():
name: "Generate Update (32bit)"
shell: bash
if: runner.os == 'Windows'
run: state run generate-update-32bit
#@ end
---
#@ def steps_installgo():
name: "Install Go"
uses: actions/setup-go@v2
with:
  go-version: ${{ matrix.go-version }}
#@ end
---
#@ def steps_setup():
name: "Setup"
shell: bash
run: |
  bin=$(pwd)/.github/deps/${{ runner.os }}/bin
  echo "Adding $bin to PATH"
  echo "$bin" >> $GITHUB_PATH
  printenv
#@ end
---
#@ def steps_preprocess():
name: "Preprocess"
shell: bash
run: |
  if [[ "${GITHUB_REF##*/}" == "master" ]]; then
    export BRANCH_OVERRIDE=unstable
  fi
  state run preprocess
#@ end
---
#@ def steps_test():
name: "Unit Tests"
shell: bash
run: |
  go test `go list ./... | grep -v api | grep -v integration | grep -v expect`
#@ end
---
#@ def steps_inttestcrit():
name: "Critical Integration Tests"
shell: bash
run: |
  export SHELL=''
  set +e
  go test -timeout 10m github.com/ActiveState/cli/test/integration -test.v -test.run "^TestLanguageMsiActivePerl|TestDeployIntegrationTestSuite|TestInitIntegrationTestSuite|TestPushIntegrationTestSuite|TestUpdateIntegrationTestSuite|PrepareIntegrationTestSuite$"
  testCode=$?
  head -n-0 build/*log 2>/dev/null
  exit ${testCode}
env:
  INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
  INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
  PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
#@ end
---
#@ def steps_inttest():
name: "Integration Tests"
shell: bash
run: |
  LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
  IFS=',' read -r -a TESTS <<< "$LABELS"
  TEST_SUITE_TAGS=""
  for i in "${TESTS[@]}"
  do
    :
    START=${i%:*}
    if [ "$START" == "run-int-test-only" ]; then
      TEST_SUITE=${i##*:}
      TEST_SUITE_TAGS="$TEST_SUITE:$TEST_SUITE_TAGS"
    fi
  done

  export TEST_SUITE_TAGS="$TEST_SUITE_TAGS"
  SHELL='' go test -timeout 20m ./test/integration -v
env:
  INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
  INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
  PLATFORM_API_TOKEN: ${{ secrets.PLATFORM_API_TOKEN }}
  # Note: The AWS access tokens are needed to download temporary artifacts in alternative_int_test.go
  # Remove these lines, once these changes are not necessary anymore.  
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#@ end
---
#@ def steps_uploadsharedartifacts():
name: "Upload Shared Artifacts"
uses: actions/upload-artifact@v2
with:
  name: session-shared-build
  path: build/
#@ end
---
#@ def steps_uploadsessartifacts():
name: "Upload Session Artifacts"
uses: actions/upload-artifact@v2
with:
  name: session-build-${{ matrix.platform }}
  path: build/
#@ end
---
#@ def steps_uploadartifacts():
name: "Upload Artifacts"
uses: actions/upload-artifact@v2
with:
  name: build
  path: build/
#@ end
---
#@ def steps_downloadsharedartifacts():
name: "Download Shared Artifacts"
uses: actions/download-artifact@v2
with:
  name: session-shared-build
  path: build/
#@ end
---
#@ def steps_downloadallsessartifacts():
name: "Download All Session Artifacts"
uses: actions/download-artifact@v2
with:
  path: build/
#@ end
---
#@ def steps_sanitizeallsessartifacts():
name: "Sanitize All Session Artifacts"
shell: bash
run: |
  cd build
  rm -Rf session-shared-build
  find . -mindepth 2 -maxdepth 2 -print0 | xargs -0 -I file rsync -av file .
  rm -Rf session*
#@ end
---
#@ def steps_downloadsessartifacts():
name: "Download Session Artifacts"
uses: actions/download-artifact@v2
with:
  name: session-build-${{ matrix.platform }}
  path: build/
#@ end
---
#@ def steps_deletesessartifacts():
name: "Cleanup Session Artifacts"
uses: geekyeggo/delete-artifact@v1
with:
  name: |
    session-shared-build
    session-build-ubuntu-latest
    session-build-macos-latest
    session-build-windows-latest
#@ end
---
#@ def steps_validate():
name: "Validate"
shell: bash
run: |
  if [ "${GITHUB_REF##*/}" != "master" ] && [ "${{ contains(toJson(github.event.pull_request.labels), 'version:') }}" != "true" ]; then
    echo "Version label must be set"
    exit 1
  fi
#@ end
---
#@ def steps_deploy():
name: "Deploy"
shell: bash
if: github.ref == 'refs/heads/master'
run: |
  state run deploy-updates
  state run deploy-installers
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#@ end
---
#@ def steps_build_state_msi():
name: "Build State MSI"
if: runner.os == 'Windows'
shell: bash
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
  export SHELL=bash
  state run build-msi-state
  signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} build/msi/state_tool.msi
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_build_languages_msi():
name: "Build Languages MSI"
if: runner.os == 'Windows'
shell: bash
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
  export SHELL=bash
  state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.26 5.26.3001
  signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
  state run build-msi-language ActivePerl Public ActiveState/ActivePerl-5.28 5.28.1001
  signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
  state run build-base-language-msi
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_cleanbuild():
name: "Cleanup Build Dir"
shell: bash
run: rm build/state* || true
#@ end
