#@ def steps_genversion():
name: "Generate Version"
shell: bash
run: state run generate-version
#@ end
---
#@ def steps_build():
name: Build
shell: bash
run: state run build
#@ end
---
#@ def steps_sign():
name: Sign
shell: bash
if: matrix.os == 'windows-latest'
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
  signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} build/state.exe
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_genupdate():
name: "Generate Update"
shell: bash
run: state run generate-update
#@ end
---
#@ def steps_installgo():
name: "Install Go"
uses: actions/setup-go@v2
with:
  go-version: ${{ matrix.go-version }}
#@ end
---
#@ def steps_setup():
name: "Setup"
shell: bash
run: |
  bin=$(pwd)/.github/deps/${{ runner.os }}/bin
  echo "Adding $bin to PATH"
  echo "::add-path::$bin"
  printenv
#@ end
---
#@ def steps_preprocess():
name: "Preprocess"
shell: bash
run: |
  if [[ "${GITHUB_REF##*/}" == "master" ]]; then
    export BRANCH_OVERRIDE=unstable
  fi
  state run preprocess
#@ end
---
#@ def steps_test():
name: "Unit Tests"
shell: bash
run: |
  go test `go list ./... | grep -v api | grep -v integration | grep -v expect`
#@ end
---
#@ def steps_inttest():
name: "Integration Tests"
shell: bash
run: |
  ls -l ./build/msi
  go test --run="TestActivePerl/.*" --timeout 20m ./test/integration -v
env:
  INTEGRATION_TEST_USERNAME: ${{ secrets.INTEGRATION_TEST_USERNAME }}
  INTEGRATION_TEST_PASSWORD: ${{ secrets.INTEGRATION_TEST_PASSWORD }}
#@ end
---
#@ def steps_uploadsessartifacts():
name: "Upload Session Artifacts"
uses: actions/upload-artifact@v2
with:
  name: session-build
  path: build/
#@ end
---
#@ def steps_uploadartifacts():
name: "Upload Artifacts"
uses: actions/upload-artifact@v2
with:
  name: build
  path: build/
#@ end
---
#@ def steps_downloadsessartifacts():
name: "Download Session Artifacts"
uses: actions/download-artifact@v2
with:
  name: session-build
  path: build/
#@ end
---
#@ def steps_downloadartifacts():
name: "Download Artifacts"
uses: actions/download-artifact@v2
with:
  name: build
  path: build/
#@ end
---
#@ def steps_deletesessartifacts():
name: "Cleanup Session Artifacts"
uses: geekyeggo/delete-artifact@v1
if: always()
with:
  name: session-build
#@ end
---
#@ def steps_validate():
name: "Validate"
shell: bash
run: |
  if [ "${GITHUB_REF##*/}" != "master" ] && [ "${{ contains(toJson(github.event.pull_request.labels), 'version:') }}" != "true" ]; then
    echo "Version label must be set"
    exit 1
  fi
#@ end
---
#@ def steps_deploy():
name: "Deploy"
shell: bash
if: github.ref == 'refs/heads/master'
run: |
  state run deploy-updates
  state run deploy-installers
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#@ end
---
#@ def steps_build_state_msi():
name: "Build State MSI"
shell: bash
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
  export SHELL=bash
  state run build-msi-state
  signtool.exe sign -d "ActiveState State Tool" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} build/msi/state_tool.msi
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_build_languages_msi():
name: "Build Languages MSI"
shell: bash
run: |
  echo $MSI_CERT_BASE64 | base64 --decode > Cert.p12
  export PATH=/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/:$PATH
  export SHELL=bash
  state run build-msi-language ActiveState/ActivePerl-5.26 5.26.3001 http://docs.activestate.com/activeperl/5.26/get/relnotes/ PerlCritic,CmdPrompt
  signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.26.msi
  state run build-msi-language ActiveState/ActivePerl-5.28 5.28.1001 http://docs.activestate.com/activeperl/5.28/get/relnotes/ PerlCritic,CmdPrompt
  signtool.exe sign -d "ActiveState Language Installer" -f "Cert.p12" -p ${CODE_SIGNING_PASSWD} ./build/msi/ActivePerl-5.28.msi
  state run build-base-language-msi
env:
  CODE_SIGNING_PASSWD: ${{ secrets.CODE_SIGNING_PASSWD }}
  MSI_CERT_BASE64: ${{ secrets.MSI_CERT_BASE64 }}
#@ end
---
#@ def steps_cleanbuild():
name: "Cleanup Build Dir"
shell: bash
run: rm build/state* || true
#@ end
