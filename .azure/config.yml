trigger:
  - master

jobs:
  - job: build_windows_azure
    pool:
      vmImage: vs2017-win2016
    variables:
      - group: Secrets
      - name: SHELL
        value: /c/Program\ Files/Git/bin/bash.exe
      - name: CI
        value: azure
      - name: GOPATH
        value: /c/Users/VssAdministrator/go
      - name: GOBIN
        value: /c/Users/VssAdministrator/go/bin
      - name: BINPATH
        value: /c/Users/VssAdministrator/bin
      - name: ACTIVESTATE_CLI_DISABLE_RUNTIME
        value: "true"
      - name: ACTIVESTATE_CLI_DISABLE_UPDATES
        value: "true"
    steps:
      - bash: |
          set -e
          mkdir -p $(BINPATH)
          mkdir -p $(GOPATH)
          mkdir -p $(GOBIN)
          shopt -s dotglob nullglob
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(BINPATH)'
          echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)/.azure'

          go version
          printenv
        displayName: Prepare Environment
      - bash: |
          ./public/install.sh -b master -n -t $(BINPATH)
        displayName: Install State Tool
      - bash: |
          set -e

          export GOFLAGS=-mod=vendor

          state auth --token $(PLATFORM_API_TOKEN)
          state run preprocess

          go test -v -parallel 12 -covermode=atomic -coverprofile=c.out `go list ./... | grep -vE "(secrets-)?api/(client|model)"` | tee go-test.out
          go-junit-report < go-test.out > $(Agent.OS)-tests.xml
          cp go-test.out public/$(Agent.OS)-tests.out
          cp $(Agent.OS)-tests.xml public
        displayName: Unit Tests
      - bash: |
          set -e
          export GOFLAGS=-mod=vendor
          state auth --token $(PLATFORM_API_TOKEN)
          if [[ "$BUILD_SOURCEBRANCHNAME" == "master" ]]; then
            echo "Building for external use"
            BRANCH_OVERRIDE=origin/unstable state run build-external
          fi
          echo "Building for internal use"
          state run build
        displayName: Build
      - script: |
          set SHELL=
          cd test\integration
          pip3 install -r requirements.txt
          python -m unittest discover -p "*_test.py"
        displayName: Windows Integration Tests
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: public
          parallel: true
          parallelCount: 8
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: "*-tests.xml"
          failTaskOnFailedTests: true
