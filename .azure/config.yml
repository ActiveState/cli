trigger:
  - master

jobs:
  - job: build_windows_azure
    pool:
      vmImage: windows-2019
    variables:
      - group: Secrets
      - name: SHELL
        value: /c/Program\ Files/Git/bin/bash.exe
      - name: CI
        value: azure
      - name: GOPATH
        value: /c/Users/VssAdministrator/go
      - name: GOBIN
        value: /c/Users/VssAdministrator/go/bin
      - name: BINPATH
        value: /c/Users/VssAdministrator/bin
      - name: ACTIVESTATE_CLI_DISABLE_RUNTIME
        value: "true"
      - name: ACTIVESTATE_CLI_DISABLE_UPDATES
        value: "true"
    steps:
      - bash: |
          set -e
          mkdir -p $(BINPATH)
          mkdir -p $(GOPATH)
          mkdir -p $(GOBIN)
          shopt -s dotglob nullglob
          echo '##vso[task.prependpath]$(GOBIN)'
          echo '##vso[task.prependpath]$(BINPATH)'
          echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)/.azure'

          mkdir -p /c/Users/VssAdministrator/.aws/
          AWS_CONFIG=/c/Users/VssAdministrator/.aws/credentials
          touch $AWS_CONFIG

          echo '[default]' >> $AWS_CONFIG
          echo 'aws_access_key_id = $(AWS_ACCESS_KEY_ID)' >> $AWS_CONFIG
          echo 'aws_secret_access_key = $(AWS_SECRET_ACCESS_KEY)' >> $AWS_CONFIG

          go version
          printenv
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        displayName: Prepare Environment
      - bash: |
          ./public/install.sh -b master -n -t $(BINPATH)
        displayName: Install State Tool
      - bash: |
          set -e

          export GOFLAGS=-mod=vendor

          state auth --token $(PLATFORM_API_TOKEN)
          state run preprocess

          go test -v -parallel 12 -covermode=atomic -coverprofile=c.out `go list ./... | grep -vE "(secrets-)?api/(client|model)" | grep -v "integration"` | grep -v "expect" | tee go-test.out
          go-junit-report < go-test.out > $(Agent.OS)-tests.xml
          cp go-test.out public/$(Agent.OS)-tests.out
          cp $(Agent.OS)-tests.xml public
        env:
          GITHUB_REPO_TOKEN: $(GITHUB_REPO_TOKEN)
        displayName: Unit Tests
      - bash: |
          set -e
          export GOFLAGS=-mod=vendor
          state auth --token $(PLATFORM_API_TOKEN)
          if [[ "$BUILD_SOURCEBRANCHNAME" == "master" ]]; then
            echo "Building for external use"
            BRANCH_OVERRIDE=unstable state run build-external
            BRANCH_OVERRIDE=unstable state run generate-update
          fi
          echo "Building for internal use"
          state run build
          state run generate-update
        env:
          GITHUB_REPO_TOKEN: $(GITHUB_REPO_TOKEN)
        displayName: Build
      - script: |
          SET GOPATH="C:\Users\VssAdministrator\go"
          SET GOFLAGS=-mod=vendor
          SET SHELL=
          go test .\pkg\expect
          go test -v -parallel 6 .\test\integration
        env:
          GIT_BRANCH: $(Build.SourceBranch)
          PLATFORM_API_TOKEN: $(PLATFORM_API_TOKEN)
        displayName: Windows Integration Tests
        condition: eq(variables['Build.Reason'], 'Schedule')
      - task: DownloadSecureFile@1
        name: msiCert
        displayName: 'Download ActiveState .p12 file'
        inputs:
          secureFile: 'Comodo-ActiveState-2020-10-09.p12'
      - bash: |
          export GOFLAGS=-mod=vendor
          state auth --token $(PLATFORM_API_TOKEN)

          state run build-wix

          mkdir .azure/wix
          unzip .azure/wix311-binaries.zip -d .azure/wix

          .azure/wix/candle.exe ./public/wix/install.wxs -o ./public/wix/install.wixobj -ext WixUIExtension -ext WixUtilExtension
          .azure/wix/light.exe ./public/wix/install.wixobj -o ./public/wix/state_tool_setup.msi -sice:ICE91 -sice:ICE64 -ext WixUIExtension -ext WixUtilExtension

          /c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.16299.0/x86/signtool.exe sign -d "ActiveState State Tool" -f "$(msiCert.secureFilePath)" -p $(CODE_SIGNING_PASSWD) ./public/wix/state_tool_setup.msi
        env:
          CODE_SIGNING_PASSWD: $(CODE_SIGNING_PASSWD)
        displayName: Build Windows MSI
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: public
          parallel: true
          parallelCount: 8
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: "*-tests.xml"
          failTaskOnFailedTests: true
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master