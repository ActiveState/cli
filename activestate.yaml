project: https://platform.activestate.com/ActiveState/cli?commitID=0ba549cb-e0af-4334-8d47-dcd245956ad2
constants:
  - name: CLI_BUILDFLAGS
    value: -ldflags="-s -w"
  - name: CLI_PKGS
    value: ./cmd/state
  - name: BUILD_TARGET
    if: ne .OS.Name "Windows"
    value: ./build/state
  - name: BUILD_TARGET_32BIT
    if: ne .OS.Name "Windows"
    value: ./build/state32
  - name: SET_ENV
    description: The environment settings used throughout our project
    value: |
      GOFLAGS='-mod=vendor'
      GOPATH="${GOPATH:=`go env GOPATH`}"
      GOROOT="${GOROOT:=`go env GOROOT`}"
      PATH="${GOROOT}/bin:${GOPATH}/bin:${PATH}"
      if [ "$CI" == "true" ]
      then
        GO_BUILD_TAGS="CI"
      fi
scripts:
  - name: preprocess
    language: bash
    description: Generates assets required by the project that aren't just specific to the build
    value: |
      set -e
      if ! type "packr" &> /dev/null; then
        echo "packr was not found on your PATH, installing .."
        pushd ~
        go get -u github.com/gobuffalo/packr/...
        popd
      fi
      $constants.SET_ENV
      packr
      go run scripts/constants-generator/main.go -- internal/constants/generated.go
      mkdir -p build/msi
  - name: packr
    language: bash
    value: packr
  - name: build
    language: bash
    description: Builds the project with the host OS as the target OS.
    value: |
      set -e
      $constants.SET_ENV

      go build -tags "$GO_BUILD_TAGS" -o $constants.BUILD_TARGET $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: build-32bit
    language: bash
    description: Builds the project with the host OS as the target OS for 32-bit architecture.
    value: |
      set -e
      $constants.SET_ENV
      export GOARCH=386
      go build -tags "$GO_BUILD_TAGS" -o $constants.BUILD_TARGET_32BIT $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: build-for
    language: bash
    description: Builds the project with the specified OS as the target OS. (valid values darwin, linux, windows)
    value: |
      set -e
      $constants.SET_ENV
      export GOOS=${1}
      [ -z "${2}" ] && >&2 echo "must provide output file as 2nd arg" && exit 1
      go build -tags "internal $GO_BUILD_TAGS" -o ${2} $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: install
    language: bash
    description: Installs the current HEAD version into GOBIN
    value: |
      $constants.SET_ENV
      go install $constants.CLI_BUILDFLAGS $CLI_PKGS
  - name: deploy-updates
    language: bash
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    value: |
      set -e
      go run scripts/s3-deployer/main.go build/update ca-central-1 cli-update update/state
  - name: build-install-scripts
    language: bash
    standalone: true
    if: ne .OS.Name "Windows"
    description: Copies install scripts to build dir, this script exists for transparency with CI behavior
    value: |
      cp installers/install.sh build/install.sh
  - name: deploy-installers
    language: bash
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    value: |
      go run scripts/s3-deployer/main.go build/install.sh ca-central-1 cli-update update/state/install.sh
      go run scripts/s3-deployer/main.go build/install.ps1 ca-central-1 cli-update update/state/install.ps1
      go run scripts/s3-deployer/main.go build/msi us-east-1 cli-msi /
  - name: build-workflows
    language: bash
    description: Generates our github workflows
    value: |
      set -e
      if ! type "ytt" &> /dev/null; then
        pushd ~
        go get github.com/k14s/ytt/cmd/ytt
        popd
      fi
      pwd
      mv .github/workflows/README.md /tmp # ytt deletes all files in target dir -- https://github.com/k14s/ytt/issues/145
      ytt -f .github/workflows-src/ --ignore-unknown-comments --output-files .github/workflows
      mv /tmp/README.md .github/workflows

      $scripts.build-for.path() "windows" ./.github/deps/Windows/bin/state.exe
      $scripts.build-for.path() "linux" ./.github/deps/Linux/bin/state
      $scripts.build-for.path() "darwin" ./.github/deps/macOS/bin/state
  - name: test
    language: bash
    description: Runs unit tests (not integration tests)
    value: |
      ACTIVESTATE_PROJECT="" go test -parallel 12 "$@" $(go list ./... | grep -v /test/integration)
    standalone: true
  - name: integration-tests
    language: bash
    description: Runs integration tests.
    value: |
      unset ACTIVESTATE_ACTIVATED
      export INTEGRATION_TEST_USERNAME=$secrets.project.INTEGRATION_TEST_USERNAME
      export INTEGRATION_TEST_PASSWORD=$secrets.project.INTEGRATION_TEST_PASSWORD
      go test ./test/integration -v "${@:1}" -timeout 20m
  - name: clean
    language: bash
    description: Cleans out the build dir.
    value: |
      go clean
      rm -Rf build
  - name: run
    language: bash
    description: Builds the State Tool and runs it with `--help`
    value: |
      $scripts.build
      build/state --help
  - name: debug
    language: bash
    description: "Runs a remote debugger, that can be hooked into from your IDE, example usage: `state run debug activate` (will debug `state activate`)"
    standalone: true
    value: dlv debug --headless --listen=:2346 --api-version=2 github.com/ActiveState/cli/cmd/state -- $@
events:
  - name: activate
    if: ne .Shell "cmd"
    value: |
      if ! type "go" &> /dev/null; then
        echo "go is not installed. Please install Go version 1.11 or above."
        exit 1
      fi
      $scripts.preprocess
      git config core.hooksPath .githooks
      if ! type "swagger" &> /dev/null; then
        echo "swagger was not found on your PATH, installing .."
        pushd ~
        go get -u github.com/go-swagger/go-swagger/cmd/swagger
        popd
      fi
      set +e # Take care not to run the shell too aggressively
  - name: file-changed
    scope: [ ".github/workflows-src" ]
    value: build-workflows
  - name: file-changed
    scope: [ "locale" ]
    value: packr
