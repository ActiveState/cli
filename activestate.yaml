project: https://platform.activestate.com/ActiveState/cli?commitID=0ba549cb-e0af-4334-8d47-dcd245956ad2
constants:
  - name: CLI_BUILDFLAGS
    value: -ldflags="-s -w"
  - name: CLI_PKGS
    value: ./cmd/state
  - name: BUILD_TARGET
    constraints:
      os: macos,linux
    value: ./build/state
  - name: BUILD_TARGET
    constraints:
      os: windows
    value: ./build/state.exe
  - name: SET_ENV
    description: The environment settings used throughout our project
    value: |
      GOFLAGS='-mod=vendor'
      GOPATH="${GOPATH:=`go env GOPATH`}"
      GOROOT="${GOROOT:=`go env GOROOT`}"
      PATH="${GOROOT}/bin:${GOPATH}/bin:${PATH}"
scripts:
  - name: preprocess
    description: Generates assets required by the project that aren't just specific to the build
    value: |
      $constants.SET_ENV
      packr
      go run scripts/constants-generator/main.go -- internal/constants/generated.go
      mkdir -p build
  - name: build
    description: Builds the project with the host OS as the target OS.
    value: |
      $scripts.preprocess
      go build -tags "$GO_BUILD_TAGS" -o $constants.BUILD_TARGET $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: build-for
    description: Builds the project with the specified OS as the target OS. (valid values darwin, linux, windows)
    value: |
      $scripts.preprocess
      export GOOS=${1}
      go build -tags "internal $GO_BUILD_TAGS" -o $constants.BUILD_TARGET $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: generate-update
    description: Generate update files
    value: |
      $scripts.preprocess
      mkdir -p build/update
      go run scripts/update-generator/main.go -o build/update $constants.BUILD_TARGET
  - name: install
    description: Installs the current HEAD version into GOBIN
    value: |
      $scripts.preprocess
      go install $constants.CLI_BUILDFLAGS $CLI_PKGS
  - name: deploy-updates
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    constraints:
      os: linux,macos
    value: |
      go run scripts/s3-deployer/main.go build/update ca-central-1 cli-update update/state
      go run scripts/s3-deployer/main.go installers/install.sh ca-central-1 cli-update update/state/install.sh
  - name: deploy-updates
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    constraints:
      os: windows
    value: |
      go run scripts/s3-deployer/main.go build/update ca-central-1 cli-update update/state
      go run scripts/s3-deployer/main.go installers/install.ps1 ca-central-1 cli-update update/state/install.ps1
  - name: generate-api-client
    description: Generates the mono-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/mono
      swagger generate client -f ${WD}/../TheHomeRepot/service/api/swagger/swagger.yaml -A mono -a mono_operations -m mono_models -c mono_client
      popd
  - name: generate-secrets-client
    description: Generates the secrets-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/secrets
      swagger generate client -f ${WD}/../TheHomeRepot/service/secrets/api/swagger.yaml -A secrets -a secrets_operations -m secrets_models -c secrets_client
      popd
  - name: generate-headchef-client
    description: Generates the headchef-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/headchef
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/head-chef/swagger.json -A headchef -a headchef_operations -m headchef_models -c headchef_client
      popd
  - name: generate-inventory-client
    description: Generates the inventory-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/inventory
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/inventory-api-v1/swagger.json -A inventory -a inventory_operations -m inventory_models -c inventory_client
      popd
  - name: generate-clients
    description: Generates all api clients
    value: |
      $scripts.generate-api-client
      $scripts.generate-secrets-client
      $scripts.generate-headchef-client
      $scripts.generate-inventory-client
  - name: generate-locale
    description: Detects new localisation calls and generates placeholder entries in en-us.yaml
    value: python3 scripts/locale-generator.py
  - name: build-msi-state
    description: Build the state tool MSI, requires that you have wixtools installed and on PATH
    standalone: true
    constraints:
      os: windows
    value: |
      export GOFLAGS='-mod=vendor'
      go build -o ./installers/msi-state/rmpath/rmpath.exe $constants.CLI_BUILDFLAGS ./installers/msi-state/rmpath/main.go
      candle.exe ./installers/msi-state/install.wxs -o ./installers/msi-state/install.wixobj -ext WixUIExtension -ext WixUtilExtension
      light.exe ./installers/msi-state/install.wixobj -o ./build/state_tool.msi -sice:ICE91 -sice:ICE64 -ext WixUIExtension -ext WixUtilExtension
  - name: build-msi-language
    description: Builds the language MSI, requires that you have .NET 4.x installed and on PATH
    standalone: true
    constraints:
      os: windows
    value: |
      set -e
      if [ "$#" -ne 3 ]; then
        echo "Required Arguments: <Project Name> <Release Notes URL> (must be under the ActiveState org) <Shortcuts> (comma-separated list of shortcuts to build)"
        exit 1
      fi
      export GOFLAGS='-mod=vendor'
      dir=$(cmd //C echo %CD%)
      cp installers/msi-language/Product.p.wxs installers/msi-language/Product.wxs
      sed -i "s^{{PROJECT}}^${1}^g" installers/msi-language/Product.wxs
      sed -i "s^{{REL_NOTES}}^${2}^g" installers/msi-language/Product.wxs
      sed -i "s^{{SHORTCUTS}}^${3}^g" installers/msi-language/Product.wxs
      sed -i "s^{{ID}}^$(go run scripts/uuid-generator/main.go $1)^g" installers/msi-language/Product.wxs

      msbuild.exe installers/msi-language/Deploy.wixproj /target:Build "//p:Configuration=Release;Platform=x64;RunWixToolsOutOfProc=true;OutDir=$dir\\build\\msi-language\\"
      echo "Copying MSI to build/${1}.msi"
      cp build/msi-language/en-us/Deploy.msi "build/${1}.msi"
  - name: test
    description: Runs unit tests (not integration tests)
    value: |
      ACTIVESTATE_PROJECT="" go test -parallel 12 $(go list ./... | grep -v /test/integration)
    standalone: true
  - name: integration-tests
    description: Runs integration tests.
    value: |
      unset ACTIVESTATE_ACTIVATED
      export INTEGRATION_TEST_USERNAME=$secrets.project.INTEGRATION_TEST_USERNAME
      export INTEGRATION_TEST_PASSWORD=$secrets.project.INTEGRATION_TEST_PASSWORD
      go test ./test/integration -v
  - name: clean
    description: Cleans out the build dir.
    value: |
      go clean
      rm -Rf build
  - name: run
    description: Builds the State Tool and runs it with `--help`
    value: |
      $scripts.build
      build/state --help
  - name: debug
    description: "Runs a remote debugger, that can be hooked into from your IDE, example usage: `state run debug activate` (will debug `state activate`)"
    standalone: true
    value: dlv debug --headless --listen=:2346 --api-version=2 github.com/ActiveState/cli/cmd/state -- $@
events:
  - name: ACTIVATE
    value: |
      if ! type "go" &> /dev/null; then
        echo "go is not installed. Please install Go version 1.11 or above."
        exit 1
      fi
      $scripts.preprocess
      git config core.hooksPath .githooks
      if ! type "packr" &> /dev/null; then
        echo "packr was not found on your PATH, installing .."
        go get -u github.com/gobuffalo/packr/...
      fi
      if ! type "swagger" &> /dev/null; then
        echo "swagger was not found on your PATH, installing .."
        go get -u github.com/go-swagger/go-swagger/cmd/swagger
      fi
