project: https://platform.activestate.com/ActiveState/cli?commitID=0ba549cb-e0af-4334-8d47-dcd245956ad2
constants:
  - name: CLI_BUILDFLAGS
    value: -ldflags="-s -w"
  - name: CLI_PKGS
    value: ./cmd/state
  - name: BUILD_TARGET
    if: eq .OS.Name "Windows"
    value: ./build/state.exe
  - name: BUILD_TARGET
    if: ne .OS.Name "Windows"
    value: ./build/state
  - name: SET_ENV
    description: The environment settings used throughout our project
    value: |
      GOFLAGS='-mod=vendor'
      GOPATH="${GOPATH:=`go env GOPATH`}"
      GOROOT="${GOROOT:=`go env GOROOT`}"
      PATH="${GOROOT}/bin:${GOPATH}/bin:${PATH}"
scripts:
  - name: preprocess
    language: bash
    description: Generates assets required by the project that aren't just specific to the build
    value: |
      set -e
      if ! type "packr" &> /dev/null; then
        echo "packr was not found on your PATH, installing .."
        pushd ~
        go get -u github.com/gobuffalo/packr/...
        popd
      fi
      $constants.SET_ENV
      packr
      go run scripts/constants-generator/main.go -- internal/constants/generated.go
      mkdir -p build/msi
  - name: build
    language: bash
    description: Builds the project with the host OS as the target OS.
    value: |
      set -e
      $constants.SET_ENV
      go build -tags "$GO_BUILD_TAGS" -o $constants.BUILD_TARGET $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: build-for
    language: bash
    description: Builds the project with the specified OS as the target OS. (valid values darwin, linux, windows)
    value: |
      set -e
      $constants.SET_ENV
      export GOOS=${1}
      go build -tags "internal $GO_BUILD_TAGS" -o ${2} $constants.CLI_BUILDFLAGS $constants.CLI_PKGS
  - name: generate-version
    language: bash
    description: Generate version file
    value: |
      set -e
      $constants.SET_ENV
      mkdir -p build/
      go run scripts/version-generator/main.go build/update
  - name: generate-update
    language: bash
    description: Generate update files
    value: |
      set -e
      $constants.SET_ENV
      mkdir -p build/update
      go run scripts/update-generator/main.go -o build/update $constants.BUILD_TARGET
  - name: install
    language: bash
    description: Installs the current HEAD version into GOBIN
    value: |
      $constants.SET_ENV
      go install $constants.CLI_BUILDFLAGS $CLI_PKGS
  - name: deploy-updates
    language: bash
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    value: |
      set -e
      go run scripts/s3-deployer/main.go build/update ca-central-1 cli-update update/state
  - name: deploy-installers
    language: bash
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    value: |
      go run scripts/s3-deployer/main.go installers/install.sh ca-central-1 cli-update update/state/install.sh
      go run scripts/s3-deployer/main.go installers/install.ps1 ca-central-1 cli-update update/state/install.ps1
      go run scripts/s3-deployer/main.go build/msi us-east-1 cli-msi /
  - name: generate-api-client
    language: bash
    description: Generates the mono-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/mono
      swagger generate client -f ${WD}/../TheHomeRepot/service/api/swagger/swagger.yaml -A mono -a mono_operations -m mono_models -c mono_client
      popd
  - name: generate-secrets-client
    language: bash
    description: Generates the secrets-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/secrets
      swagger generate client -f ${WD}/../TheHomeRepot/service/secrets/api/swagger.yaml -A secrets -a secrets_operations -m secrets_models -c secrets_client
      popd
  - name: generate-headchef-client
    language: bash
    description: Generates the headchef-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/headchef
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/head-chef/swagger.json -A headchef -a headchef_operations -m headchef_models -c headchef_client
      popd
  - name: generate-inventory-client
    language: bash
    description: Generates the inventory-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/inventory
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/inventory-api-v1/swagger.json -A inventory -a inventory_operations -m inventory_models -c inventory_client
      popd
  - name: generate-clients
    language: bash
    description: Generates all api clients
    value: |
      $scripts.generate-api-client
      $scripts.generate-secrets-client
      $scripts.generate-headchef-client
      $scripts.generate-inventory-client
  - name: generate-locale
    language: bash
    description: Detects new localisation calls and generates placeholder entries in en-us.yaml
    value: python3 scripts/locale-generator.py
  - name: build-msi-state
    language: bash
    description: Build the state tool MSI, requires that you have wixtools installed and on PATH
    standalone: true
    if: eq .OS.Name "Windows"
    value: |
      export GOFLAGS='-mod=vendor'
      go build -o ./installers/msi-state/rmpath/rmpath.exe $constants.CLI_BUILDFLAGS ./installers/msi-state/rmpath/main.go
      candle.exe ./installers/msi-state/install.wxs -o ./installers/msi-state/install.wixobj -ext WixUIExtension -ext WixUtilExtension
      light.exe ./installers/msi-state/install.wixobj -o ./build/msi/state_tool.msi -sice:ICE91 -sice:ICE64 -ext WixUIExtension -ext WixUtilExtension
      rm ./build/msi/state_tool.wixpdb || true
  - name: build-msi-language
    language: bash
    description: Builds the language MSI, requires that you have .NET 4.x installed and on PATH
    standalone: true
    if: eq .OS.Name "Windows"
    value: |
      set -e
      if [ "$#" -ne 4 ]; then
        echo "Required Arguments: <Owner/Name> <Version> <Release Notes URL> <Shortcuts> (comma-separated list of shortcuts to build)"
        exit 1
      fi

      export GOFLAGS='-mod=vendor'
      dir=$(cmd //C echo %CD%)
      cp installers/msi-language/Product.p.wxs installers/msi-language/Product.wxs

      pad () {
        string=$1

        # Use base length that avoids string overflow warnings from wix
        # Subtract string length and brackets
        padLength=$((246-${#string}-4))
        printf -v pad '%*s' "$padLength"
        padded=$(printf '%s' $1)$(echo ${pad// /-})
        echo $padded
      }

      # Use both Org and project name for this replacement
      sed -i "s^{{$(pad PROJECT_OWNER_AND_NAME)}}^${1}^g" installers/msi-language/Product.wxs

      # Only use the project name for this replacement
      sed -i "s^{{$(pad PROJECT_NAME)}}^${1##*/}^g" installers/msi-language/Product.wxs

      sed -i "s^{{VERSION}}^${2}^g" installers/msi-language/Product.wxs
      sed -i "s^{{$(pad REL_NOTES)}}^${3}^g" installers/msi-language/Product.wxs
      sed -i "s^{{$(pad SHORTCUTS)}}^${4}^g" installers/msi-language/Product.wxs
      sed -i "s^{{ID}}^$(go run scripts/uuid-generator/main.go $1)^g" installers/msi-language/Product.wxs
      sed -i "s^{{ICON}}^./assets/perl.ico^g" installers/msi-language/Product.wxs

      msbuild.exe installers/msi-language/Deploy.wixproj /target:Build "//p:Configuration=Release;Platform=x64;RunWixToolsOutOfProc=true;OutDir=$dir\\build\\msi-language\\"
      echo "Copying MSI to build/msi/${1##*/}.msi"
      cp build/msi-language/en-us/Deploy.msi "build/msi/${1##*/}.msi"
  - name: build-base-language-msi
    description: |
      Builds the language MSI with no project information, requires that you have .NET 4.x installed and on PATH.
      The resulting MSI requires project information be injected in order to be functional.
    standalone: true
    language: bash
    if: eq .OS.Name "Windows"
    value: |
      set -e

      export GOFLAGS='-mod=vendor'
      dir=$(cmd //C echo %CD%)
      cp installers/msi-language/Product.p.wxs installers/msi-language/Product.wxs

      # We require a product ID in order to build an MSI
      sed -i "s^{{ID}}^{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}^g" installers/msi-language/Product.wxs
      sed -i "s^{{VERSION}}^255.255.255^g" installers/msi-language/Product.wxs
      sed -i "s^{{ICON}}^./assets/as.ico^g" installers/msi-language/Product.wxs

      msbuild.exe installers/msi-language/Deploy.wixproj /target:Build "//p:Configuration=Release;Platform=x64;RunWixToolsOutOfProc=true;OutDir=$dir\\build\\msi-language\\"
      echo "Copying MSI to build/msi/base.msi"
      cp build/msi-language/en-us/Deploy.msi "build/msi/base.msi"
  - name: build-workflows
    language: bash
    description: Generates our github workflows
    value: |
      if ! type "ytt" &> /dev/null; then
        pushd ~
        go get github.com/k14s/ytt/cmd/ytt
        popd
      fi
      pwd
      mv .github/workflows/README.md /tmp # ytt deletes all files in target dir -- https://github.com/k14s/ytt/issues/145
      ytt -f .github/workflows-src/ --ignore-unknown-comments --output-files .github/workflows
      mv /tmp/README.md .github/workflows

      $scripts.build-for.path() "windows" ./.github/deps/Windows/bin/state.exe
      $scripts.build-for.path() "linux" ./.github/deps/Linux/bin/state
      $scripts.build-for.path() "darwin" ./.github/deps/macOS/bin/state
  - name: test
    language: bash
    description: Runs unit tests (not integration tests)
    value: |
      ACTIVESTATE_PROJECT="" go test -parallel 12 $(go list ./... | grep -v /test/integration)
    standalone: true
  - name: integration-tests
    language: bash
    description: Runs integration tests.
    value: |
      unset ACTIVESTATE_ACTIVATED
      export INTEGRATION_TEST_USERNAME=$secrets.project.INTEGRATION_TEST_USERNAME
      export INTEGRATION_TEST_PASSWORD=$secrets.project.INTEGRATION_TEST_PASSWORD
      go test ./test/integration -v "${@:1}"
  - name: clean
    language: bash
    description: Cleans out the build dir.
    value: |
      go clean
      rm -Rf build
  - name: run
    language: bash
    description: Builds the State Tool and runs it with `--help`
    value: |
      $scripts.build
      build/state --help
  - name: debug
    language: bash
    description: "Runs a remote debugger, that can be hooked into from your IDE, example usage: `state run debug activate` (will debug `state activate`)"
    standalone: true
    value: dlv debug --headless --listen=:2346 --api-version=2 github.com/ActiveState/cli/cmd/state -- $@
events:
  - name: ACTIVATE
    if: ne .Shell "cmd"
    value: |
      if ! type "go" &> /dev/null; then
        echo "go is not installed. Please install Go version 1.11 or above."
        exit 1
      fi
      $scripts.preprocess
      git config core.hooksPath .githooks
      if ! type "swagger" &> /dev/null; then
        echo "swagger was not found on your PATH, installing .."
        pushd ~
        go get -u github.com/go-swagger/go-swagger/cmd/swagger
        popd
      fi
      set +e # Take care not to run the shell too aggressively
