project: https://platform.activestate.com/ActiveState/cli?commitID=0ba549cb-e0af-4334-8d47-dcd245956ad2
scripts:
  - name: SET_ENV
    description: The environment settings used throughout our project
    value: |
      CLI_PKGS=./cmd/state
      CLI_BUILDFLAGS='-ldflags="-s -w"'
      GOFLAGS='-mod=vendor'
      GOPATH="${GOPATH:=`go env GOPATH`}"
      GOROOT="${GOROOT:=`go env GOROOT`}"
      PATH="${GOROOT}/bin:${GOPATH}/bin:${PATH}"
      function buildProject() {
        local type=${1-internal}
        [[ ! $type =~ ^(internal|external)$ ]] && >&2 echo "'$type' is not a supported build type" && return 2
        local goos=${2-$(go env GOHOSTOS)}
        [[ ! $goos =~ ^(windows|darwin|linux)$ ]] && >&2 echo "'$goos' is not a supported build target" && return 2
        local out=./build/state
        [[ $goos == windows ]] && out=${out}.exe
        export GOOS=$goos
        eval go build -tags $type -o $out $CLI_BUILDFLAGS $CLI_PKGS
        unset GOOS
        echo ${out}
      }
  - name: preprocess
    description: Generates assets required by the project that aren't just specific to the build
    value: |
      $scripts.SET_ENV
      packr
      go run scripts/constants-generator/main.go -- internal/constants/generated.go
  - name: build
    description: Builds the project. One argument may be provided to set the build target OS (windows|darwin|linux).
    value: |
      $scripts.preprocess
      outFile=$(buildProject internal ${1}) || exit $?
      mkdir -p public/update
      go run scripts/update-generator/main.go -o public/update $outFile
  - name: build-external
    description: Builds the project for external use (limiting its feature-set). One argument may be provided to set the build target OS (windows|darwin|linux).
    value: |
      $scripts.preprocess
      outFile=$(buildProject external ${1}) || exit $?
      mkdir -p public/update
      go run scripts/update-generator/main.go -o public/update $outFile
  - name: install
    description: Installs the current HEAD version into GOBIN
    value: |
      $scripts.preprocess
      eval go install $CLI_BUILDFLAGS $CLI_PKGS
  - name: deploy-updates
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    constraints:
      os: linux,macos
    value: |
      go run scripts/s3-deployer/main.go public/update ca-central-1 cli-update update/state
      go run scripts/s3-deployer/main.go public/install.sh ca-central-1 cli-update update/state/install.sh
  - name: deploy-updates
    description: Deploys update files to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    constraints:
      os: windows
    value: |
      go run scripts/s3-deployer/main.go public/update ca-central-1 cli-update update/state
      go run scripts/s3-deployer/main.go public/install.ps1 ca-central-1 cli-update update/state/install.ps1
  - name: deploy-version
    description: Deploy the version file to S3. This steps is automated by CI and should never be ran manually unless you KNOW WHAT YOU'RE DOING.
    constraints:
    value: |
      go run scripts/s3-deployer/main.go public/update/versions ca-central-1 cli-update update/state/versions
  - name: generate-api-client
    description: Generates the mono-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/mono
      swagger generate client -f ${WD}/../TheHomeRepot/service/api/swagger/swagger.yaml -A mono -a mono_operations -m mono_models -c mono_client
      popd
  - name: generate-secrets-client
    description: Generates the secrets-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/secrets
      swagger generate client -f ${WD}/../TheHomeRepot/service/secrets/api/swagger.yaml -A secrets -a secrets_operations -m secrets_models -c secrets_client
      popd
  - name: generate-headchef-client
    description: Generates the headchef-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/headchef
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/head-chef/swagger.json -A headchef -a headchef_operations -m headchef_models -c headchef_client
      popd
  - name: generate-inventory-client
    description: Generates the inventory-api client files
    value: |
      WD=$(pwd)
      pushd pkg/platform/api/inventory
      swagger generate client --with-flatten full -f ${WD}/../TheHomeRepot/service/inventory-api-v1/swagger.json -A inventory -a inventory_operations -m inventory_models -c inventory_client
      popd
  - name: generate-clients
    description: Generates all api clients
    value: |
      $scripts.generate-api-client
      $scripts.generate-secrets-client
      $scripts.generate-headchef-client
      $scripts.generate-inventory-client
  - name: generate-locale
    description: Detects new localisation calls and generates placeholder entries in en-us.yaml
    value: python3 scripts/locale-generator.py
  - name: test
    description: Runs unit tests (not integration tests)
    value: |
      ACTIVESTATE_PROJECT="" go test -parallel 12 $(go list ./... | grep -v /test/integration)
    standalone: true
  - name: integration-tests
    description: Runs integration tests.
    value: go test ./test/integration
  - name: clean
    description: Cleans out the build dir.
    value: |
      go clean
      rm -Rf build
  - name: run
    description: Builds the state tool and runs it with `--help`
    value: |
      $scripts.build
      build/state --help
events:
  - name: ACTIVATE
    value: |
      if ! type "go" &> /dev/null; then
        echo "go is not installed. Please install Go version 1.11 or above."
        exit 1
      fi
      $scripts.SET_ENV
      $scripts.preprocess
      git config core.hooksPath .githooks
      if ! type "packr" &> /dev/null; then
        echo "packr was not found on your PATH, installing .."
        go get -u github.com/gobuffalo/packr/...
      fi
      if ! type "swagger" &> /dev/null; then
        echo "swagger was not found on your PATH, installing .."
        go get -u github.com/go-swagger/go-swagger/cmd/swagger
      fi
