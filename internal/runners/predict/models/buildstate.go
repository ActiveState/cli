// Code generated by "enumer -type=BuildState -transform=kebab buildstate.go"; DO NOT EDIT.

//
package models

import (
	"fmt"
)

const _BuildStateName = "doomedblockedreadystartingrunningfailedsucceededskipped"

var _BuildStateIndex = [...]uint8{0, 6, 13, 18, 26, 33, 39, 48, 55}

func (i BuildState) String() string {
	i -= 1
	if i < 0 || i >= BuildState(len(_BuildStateIndex)-1) {
		return fmt.Sprintf("BuildState(%d)", i+1)
	}
	return _BuildStateName[_BuildStateIndex[i]:_BuildStateIndex[i+1]]
}

var _BuildStateValues = []BuildState{1, 2, 3, 4, 5, 6, 7, 8}

var _BuildStateNameToValueMap = map[string]BuildState{
	_BuildStateName[0:6]:   1,
	_BuildStateName[6:13]:  2,
	_BuildStateName[13:18]: 3,
	_BuildStateName[18:26]: 4,
	_BuildStateName[26:33]: 5,
	_BuildStateName[33:39]: 6,
	_BuildStateName[39:48]: 7,
	_BuildStateName[48:55]: 8,
}

// BuildStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BuildStateString(s string) (BuildState, error) {
	if val, ok := _BuildStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BuildState values", s)
}

// BuildStateValues returns all values of the enum
func BuildStateValues() []BuildState {
	return _BuildStateValues
}

// IsABuildState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BuildState) IsABuildState() bool {
	for _, v := range _BuildStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// BuildState represents what state in the artifact build workflow this
// artifact is currently in
type BuildState int

const (
	_ BuildState = iota
	// Doomed means the artifact has not been built and cannot ever be built
	// because one or more of its dependencies either failed to build or is also
	// doomed.
	Doomed
	// Blocked means the artifact has not been built and building cannot yet
	// start because one or more of its dependencies haven't finished building
	// yet.
	Blocked
	// Ready mean ready to be built as soon as the build_at timestamp is
	// reached.
	Ready
	// Starting means Head Chef has select this artifact for building imminently
	// but has not yet received confirmation that the build has begun.
	Starting
	// Running means the artifact's build is currently running.
	Running
	// Failed means the artifact's build ended in a failure and no attempt
	// should be made to build it again.
	Failed
	// Succeeded means the artifact's build ended successfully.
	Succeeded
	// Skipped means the artifact will not be built. Head Chef puts DOOMED
	// artifacts in this state once it has sent Kafka message communicating they
	// will not be built.
	Skipped
)

// Scan implements the sql.Scanner interface so string values coming from a SQL
// result set can be ready directly into a BuildState
func (bs *BuildState) Scan(value interface{}) error {
	strValue, ok := value.([]byte)
	if !ok {
		return fmt.Errorf("Cannot convert value of type %T to a build state", value)
	}

	parsed, err := BuildStateString(string(strValue))
	if err != nil {
		return err
	}

	*bs = parsed
	return nil
}
