// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetInfo tests method for developer testing

Helpful for testing JWT operation
*/
func (a *Client) GetInfo(params *GetInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil

}

/*
ConfigFile downloads a sample config file

Your own personal config file
*/
func (a *Client) ConfigFile(params *ConfigFileParams, authInfo runtime.ClientAuthInfoWriter) (*ConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configFile",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigFileOK), nil

}

/*
ListActivities recents zeridian activity

List of recent user and application activity
*/
func (a *Client) ListActivities(params *ListActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listActivities",
		Method:             "GET",
		PathPattern:        "/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListActivitiesOK), nil

}

/*
PythonPlugins availables python plugin installers

Listing of available Python plugin installer files (sorted by version, descending)
*/
func (a *Client) PythonPlugins(params *PythonPluginsParams, authInfo runtime.ClientAuthInfoWriter) (*PythonPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPythonPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pythonPlugins",
		Method:             "GET",
		PathPattern:        "/plugins/python",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PythonPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PythonPluginsOK), nil

}

/*
Usage reports platform usage statistics

Active users by date range
*/
func (a *Client) Usage(params *UsageParams, authInfo runtime.ClientAuthInfoWriter) (*UsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "usage",
		Method:             "GET",
		PathPattern:        "/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsageOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
