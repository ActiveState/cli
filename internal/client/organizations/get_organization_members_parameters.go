// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrganizationMembersParams creates a new GetOrganizationMembersParams object
// with the default values initialized.
func NewGetOrganizationMembersParams() *GetOrganizationMembersParams {
	var ()
	return &GetOrganizationMembersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationMembersParamsWithTimeout creates a new GetOrganizationMembersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrganizationMembersParamsWithTimeout(timeout time.Duration) *GetOrganizationMembersParams {
	var ()
	return &GetOrganizationMembersParams{

		timeout: timeout,
	}
}

// NewGetOrganizationMembersParamsWithContext creates a new GetOrganizationMembersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrganizationMembersParamsWithContext(ctx context.Context) *GetOrganizationMembersParams {
	var ()
	return &GetOrganizationMembersParams{

		Context: ctx,
	}
}

// NewGetOrganizationMembersParamsWithHTTPClient creates a new GetOrganizationMembersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrganizationMembersParamsWithHTTPClient(client *http.Client) *GetOrganizationMembersParams {
	var ()
	return &GetOrganizationMembersParams{
		HTTPClient: client,
	}
}

/*GetOrganizationMembersParams contains all the parameters to send to the API endpoint
for the get organization members operation typically these are written to a http.Request
*/
type GetOrganizationMembersParams struct {

	/*OrganizationName
	  organizationName of desired organization

	*/
	OrganizationName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get organization members params
func (o *GetOrganizationMembersParams) WithTimeout(timeout time.Duration) *GetOrganizationMembersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization members params
func (o *GetOrganizationMembersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization members params
func (o *GetOrganizationMembersParams) WithContext(ctx context.Context) *GetOrganizationMembersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization members params
func (o *GetOrganizationMembersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization members params
func (o *GetOrganizationMembersParams) WithHTTPClient(client *http.Client) *GetOrganizationMembersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization members params
func (o *GetOrganizationMembersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationName adds the organizationName to the get organization members params
func (o *GetOrganizationMembersParams) WithOrganizationName(organizationName string) *GetOrganizationMembersParams {
	o.SetOrganizationName(organizationName)
	return o
}

// SetOrganizationName adds the organizationName to the get organization members params
func (o *GetOrganizationMembersParams) SetOrganizationName(organizationName string) {
	o.OrganizationName = organizationName
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationMembersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organizationName
	if err := r.SetPathParam("organizationName", o.OrganizationName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
