// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListPackagesParams creates a new ListPackagesParams object
// with the default values initialized.
func NewListPackagesParams() *ListPackagesParams {
	var ()
	return &ListPackagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListPackagesParamsWithTimeout creates a new ListPackagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPackagesParamsWithTimeout(timeout time.Duration) *ListPackagesParams {
	var ()
	return &ListPackagesParams{

		timeout: timeout,
	}
}

// NewListPackagesParamsWithContext creates a new ListPackagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPackagesParamsWithContext(ctx context.Context) *ListPackagesParams {
	var ()
	return &ListPackagesParams{

		Context: ctx,
	}
}

// NewListPackagesParamsWithHTTPClient creates a new ListPackagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPackagesParamsWithHTTPClient(client *http.Client) *ListPackagesParams {
	var ()
	return &ListPackagesParams{
		HTTPClient: client,
	}
}

/*ListPackagesParams contains all the parameters to send to the API endpoint
for the list packages operation typically these are written to a http.Request
*/
type ListPackagesParams struct {

	/*NameFilter
	  Match package names based on this regexp

	*/
	NameFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list packages params
func (o *ListPackagesParams) WithTimeout(timeout time.Duration) *ListPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list packages params
func (o *ListPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list packages params
func (o *ListPackagesParams) WithContext(ctx context.Context) *ListPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list packages params
func (o *ListPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list packages params
func (o *ListPackagesParams) WithHTTPClient(client *http.Client) *ListPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list packages params
func (o *ListPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNameFilter adds the nameFilter to the list packages params
func (o *ListPackagesParams) WithNameFilter(nameFilter *string) *ListPackagesParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the list packages params
func (o *ListPackagesParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WriteToRequest writes these params to a swagger request
func (o *ListPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string
		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {
			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
