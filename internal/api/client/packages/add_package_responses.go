// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddPackageReader is a Reader for the AddPackage structure.
type AddPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddPackageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddPackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddPackageOK creates a AddPackageOK with default headers values
func NewAddPackageOK() *AddPackageOK {
	return &AddPackageOK{}
}

/*AddPackageOK handles this case with default header values.

Package Created
*/
type AddPackageOK struct {
	Payload *models.Package
}

func (o *AddPackageOK) Error() string {
	return fmt.Sprintf("[POST /packages][%d] addPackageOK  %+v", 200, o.Payload)
}

func (o *AddPackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Package)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPackageBadRequest creates a AddPackageBadRequest with default headers values
func NewAddPackageBadRequest() *AddPackageBadRequest {
	return &AddPackageBadRequest{}
}

/*AddPackageBadRequest handles this case with default header values.

Bad Request
*/
type AddPackageBadRequest struct {
	Payload *models.Message
}

func (o *AddPackageBadRequest) Error() string {
	return fmt.Sprintf("[POST /packages][%d] addPackageBadRequest  %+v", 400, o.Payload)
}

func (o *AddPackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
