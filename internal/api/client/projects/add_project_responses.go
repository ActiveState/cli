// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddProjectReader is a Reader for the AddProject structure.
type AddProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddProjectOK creates a AddProjectOK with default headers values
func NewAddProjectOK() *AddProjectOK {
	return &AddProjectOK{}
}

/*AddProjectOK handles this case with default header values.

Project Added
*/
type AddProjectOK struct {
	Payload *models.Project
}

func (o *AddProjectOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects][%d] addProjectOK  %+v", 200, o.Payload)
}

func (o *AddProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddProjectBadRequest creates a AddProjectBadRequest with default headers values
func NewAddProjectBadRequest() *AddProjectBadRequest {
	return &AddProjectBadRequest{}
}

/*AddProjectBadRequest handles this case with default header values.

Bad Request
*/
type AddProjectBadRequest struct {
	Payload *models.Message
}

func (o *AddProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects][%d] addProjectBadRequest  %+v", 400, o.Payload)
}

func (o *AddProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddProjectConflict creates a AddProjectConflict with default headers values
func NewAddProjectConflict() *AddProjectConflict {
	return &AddProjectConflict{}
}

/*AddProjectConflict handles this case with default header values.

Conflict
*/
type AddProjectConflict struct {
	Payload *models.Message
}

func (o *AddProjectConflict) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects][%d] addProjectConflict  %+v", 409, o.Payload)
}

func (o *AddProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
