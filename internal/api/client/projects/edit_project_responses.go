// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// EditProjectReader is a Reader for the EditProject structure.
type EditProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEditProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEditProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewEditProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEditProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewEditProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditProjectOK creates a EditProjectOK with default headers values
func NewEditProjectOK() *EditProjectOK {
	return &EditProjectOK{}
}

/*EditProjectOK handles this case with default header values.

Project updated
*/
type EditProjectOK struct {
	Payload *models.Project
}

func (o *EditProjectOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}][%d] editProjectOK  %+v", 200, o.Payload)
}

func (o *EditProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditProjectBadRequest creates a EditProjectBadRequest with default headers values
func NewEditProjectBadRequest() *EditProjectBadRequest {
	return &EditProjectBadRequest{}
}

/*EditProjectBadRequest handles this case with default header values.

Bad Request
*/
type EditProjectBadRequest struct {
	Payload *models.Message
}

func (o *EditProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}][%d] editProjectBadRequest  %+v", 400, o.Payload)
}

func (o *EditProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditProjectForbidden creates a EditProjectForbidden with default headers values
func NewEditProjectForbidden() *EditProjectForbidden {
	return &EditProjectForbidden{}
}

/*EditProjectForbidden handles this case with default header values.

Unauthorized
*/
type EditProjectForbidden struct {
	Payload *models.Message
}

func (o *EditProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}][%d] editProjectForbidden  %+v", 403, o.Payload)
}

func (o *EditProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditProjectNotFound creates a EditProjectNotFound with default headers values
func NewEditProjectNotFound() *EditProjectNotFound {
	return &EditProjectNotFound{}
}

/*EditProjectNotFound handles this case with default header values.

Not Found
*/
type EditProjectNotFound struct {
	Payload *models.Message
}

func (o *EditProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}][%d] editProjectNotFound  %+v", 404, o.Payload)
}

func (o *EditProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditProjectInternalServerError creates a EditProjectInternalServerError with default headers values
func NewEditProjectInternalServerError() *EditProjectInternalServerError {
	return &EditProjectInternalServerError{}
}

/*EditProjectInternalServerError handles this case with default header values.

Server Error
*/
type EditProjectInternalServerError struct {
	Payload *models.Message
}

func (o *EditProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}][%d] editProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *EditProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
