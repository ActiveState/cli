// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddReleaseReader is a Reader for the AddRelease structure.
type AddReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddReleaseOK creates a AddReleaseOK with default headers values
func NewAddReleaseOK() *AddReleaseOK {
	return &AddReleaseOK{}
}

/*AddReleaseOK handles this case with default header values.

Release Added
*/
type AddReleaseOK struct {
	Payload *models.Release
}

func (o *AddReleaseOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/releases][%d] addReleaseOK  %+v", 200, o.Payload)
}

func (o *AddReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Release)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddReleaseBadRequest creates a AddReleaseBadRequest with default headers values
func NewAddReleaseBadRequest() *AddReleaseBadRequest {
	return &AddReleaseBadRequest{}
}

/*AddReleaseBadRequest handles this case with default header values.

Bad Request
*/
type AddReleaseBadRequest struct {
	Payload *models.Message
}

func (o *AddReleaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/releases][%d] addReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *AddReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddReleaseForbidden creates a AddReleaseForbidden with default headers values
func NewAddReleaseForbidden() *AddReleaseForbidden {
	return &AddReleaseForbidden{}
}

/*AddReleaseForbidden handles this case with default header values.

Unauthorized
*/
type AddReleaseForbidden struct {
	Payload *models.Message
}

func (o *AddReleaseForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/releases][%d] addReleaseForbidden  %+v", 403, o.Payload)
}

func (o *AddReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddReleaseInternalServerError creates a AddReleaseInternalServerError with default headers values
func NewAddReleaseInternalServerError() *AddReleaseInternalServerError {
	return &AddReleaseInternalServerError{}
}

/*AddReleaseInternalServerError handles this case with default header values.

Server Error
*/
type AddReleaseInternalServerError struct {
	Payload *models.Message
}

func (o *AddReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationName}/projects/{projectName}/releases][%d] addReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *AddReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
