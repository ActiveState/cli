// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// PostLoginReader is a Reader for the PostLogin structure.
type PostLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 449:
		result := NewPostLoginRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostLoginOK creates a PostLoginOK with default headers values
func NewPostLoginOK() *PostLoginOK {
	return &PostLoginOK{}
}

/*PostLoginOK handles this case with default header values.

Success
*/
type PostLoginOK struct {
	Payload *models.JWT
}

func (o *PostLoginOK) Error() string {
	return fmt.Sprintf("[POST /login][%d] postLoginOK  %+v", 200, o.Payload)
}

func (o *PostLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JWT)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLoginBadRequest creates a PostLoginBadRequest with default headers values
func NewPostLoginBadRequest() *PostLoginBadRequest {
	return &PostLoginBadRequest{}
}

/*PostLoginBadRequest handles this case with default header values.

Bad Request
*/
type PostLoginBadRequest struct {
	Payload *models.Message
}

func (o *PostLoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /login][%d] postLoginBadRequest  %+v", 400, o.Payload)
}

func (o *PostLoginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLoginUnauthorized creates a PostLoginUnauthorized with default headers values
func NewPostLoginUnauthorized() *PostLoginUnauthorized {
	return &PostLoginUnauthorized{}
}

/*PostLoginUnauthorized handles this case with default header values.

Invalid credentials
*/
type PostLoginUnauthorized struct {
	Payload *models.Message
}

func (o *PostLoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /login][%d] postLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *PostLoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLoginRetryWith creates a PostLoginRetryWith with default headers values
func NewPostLoginRetryWith() *PostLoginRetryWith {
	return &PostLoginRetryWith{}
}

/*PostLoginRetryWith handles this case with default header values.

TOTP Required
*/
type PostLoginRetryWith struct {
	Payload *models.Message
}

func (o *PostLoginRetryWith) Error() string {
	return fmt.Sprintf("[POST /login][%d] postLoginRetryWith  %+v", 449, o.Payload)
}

func (o *PostLoginRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
