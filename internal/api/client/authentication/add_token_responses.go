// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddTokenReader is a Reader for the AddToken structure.
type AddTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddTokenOK creates a AddTokenOK with default headers values
func NewAddTokenOK() *AddTokenOK {
	return &AddTokenOK{}
}

/*AddTokenOK handles this case with default header values.

Success
*/
type AddTokenOK struct {
	Payload *models.NewToken
}

func (o *AddTokenOK) Error() string {
	return fmt.Sprintf("[POST /apikeys][%d] addTokenOK  %+v", 200, o.Payload)
}

func (o *AddTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NewToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTokenBadRequest creates a AddTokenBadRequest with default headers values
func NewAddTokenBadRequest() *AddTokenBadRequest {
	return &AddTokenBadRequest{}
}

/*AddTokenBadRequest handles this case with default header values.

Bad Request
*/
type AddTokenBadRequest struct {
	Payload *models.Message
}

func (o *AddTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /apikeys][%d] addTokenBadRequest  %+v", 400, o.Payload)
}

func (o *AddTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
