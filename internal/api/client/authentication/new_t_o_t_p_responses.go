// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// NewTOTPReader is a Reader for the NewTOTP structure.
type NewTOTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NewTOTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNewTOTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNewTOTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNewTOTPOK creates a NewTOTPOK with default headers values
func NewNewTOTPOK() *NewTOTPOK {
	return &NewTOTPOK{}
}

/*NewTOTPOK handles this case with default header values.

New TOTP Key
*/
type NewTOTPOK struct {
	Payload *models.TOTPKey
}

func (o *NewTOTPOK) Error() string {
	return fmt.Sprintf("[GET /totp][%d] newTOTPOK  %+v", 200, o.Payload)
}

func (o *NewTOTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TOTPKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewTOTPBadRequest creates a NewTOTPBadRequest with default headers values
func NewNewTOTPBadRequest() *NewTOTPBadRequest {
	return &NewTOTPBadRequest{}
}

/*NewTOTPBadRequest handles this case with default header values.

Bad Request
*/
type NewTOTPBadRequest struct {
	Payload *models.Message
}

func (o *NewTOTPBadRequest) Error() string {
	return fmt.Sprintf("[GET /totp][%d] newTOTPBadRequest  %+v", 400, o.Payload)
}

func (o *NewTOTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
