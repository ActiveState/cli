// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSession gets a single session record

Retrieve the session by ID
*/
func (a *Client) GetSession(params *GetSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSession",
		Method:             "GET",
		PathPattern:        "/sessions/{sessionID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSessionOK), nil

}

/*
ListSessions lists of all matching sessions

Retrieve all sessions from the system that the user has access to
*/
func (a *Client) ListSessions(params *ListSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSessions",
		Method:             "GET",
		PathPattern:        "/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSessionsOK), nil

}

/*
TerminateSession terminates an orphaned session

If you believe a session is erroneously active this will mark it as complete
*/
func (a *Client) TerminateSession(params *TerminateSessionParams, authInfo runtime.ClientAuthInfoWriter) (*TerminateSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "terminateSession",
		Method:             "POST",
		PathPattern:        "/sessions/{sessionID}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TerminateSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TerminateSessionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
