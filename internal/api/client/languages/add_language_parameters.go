// Code generated by go-swagger; DO NOT EDIT.

package languages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// NewAddLanguageParams creates a new AddLanguageParams object
// with the default values initialized.
func NewAddLanguageParams() *AddLanguageParams {
	var ()
	return &AddLanguageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddLanguageParamsWithTimeout creates a new AddLanguageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddLanguageParamsWithTimeout(timeout time.Duration) *AddLanguageParams {
	var ()
	return &AddLanguageParams{

		timeout: timeout,
	}
}

// NewAddLanguageParamsWithContext creates a new AddLanguageParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddLanguageParamsWithContext(ctx context.Context) *AddLanguageParams {
	var ()
	return &AddLanguageParams{

		Context: ctx,
	}
}

// NewAddLanguageParamsWithHTTPClient creates a new AddLanguageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddLanguageParamsWithHTTPClient(client *http.Client) *AddLanguageParams {
	var ()
	return &AddLanguageParams{
		HTTPClient: client,
	}
}

/*AddLanguageParams contains all the parameters to send to the API endpoint
for the add language operation typically these are written to a http.Request
*/
type AddLanguageParams struct {

	/*Language
	  Language to add

	*/
	Language *models.Language

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add language params
func (o *AddLanguageParams) WithTimeout(timeout time.Duration) *AddLanguageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add language params
func (o *AddLanguageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add language params
func (o *AddLanguageParams) WithContext(ctx context.Context) *AddLanguageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add language params
func (o *AddLanguageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add language params
func (o *AddLanguageParams) WithHTTPClient(client *http.Client) *AddLanguageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add language params
func (o *AddLanguageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLanguage adds the language to the add language params
func (o *AddLanguageParams) WithLanguage(language *models.Language) *AddLanguageParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the add language params
func (o *AddLanguageParams) SetLanguage(language *models.Language) {
	o.Language = language
}

// WriteToRequest writes these params to a swagger request
func (o *AddLanguageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Language != nil {
		if err := r.SetBodyParam(o.Language); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
