// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ActiveState/cli/internal/api/client/authentication"
	"github.com/ActiveState/cli/internal/api/client/components"
	"github.com/ActiveState/cli/internal/api/client/identities"
	"github.com/ActiveState/cli/internal/api/client/languages"
	"github.com/ActiveState/cli/internal/api/client/licenses"
	"github.com/ActiveState/cli/internal/api/client/organizations"
	"github.com/ActiveState/cli/internal/api/client/packages"
	"github.com/ActiveState/cli/internal/api/client/platforms"
	"github.com/ActiveState/cli/internal/api/client/projects"
	"github.com/ActiveState/cli/internal/api/client/scans"
	"github.com/ActiveState/cli/internal/api/client/sessions"
	"github.com/ActiveState/cli/internal/api/client/status"
	"github.com/ActiveState/cli/internal/api/client/users"
)

// Default API client HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new API client HTTP client.
func NewHTTPClient(formats strfmt.Registry) *APIClient {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new API client HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *APIClient {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new API client client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *APIClient {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(APIClient)
	cli.Transport = transport

	cli.Authentication = authentication.New(transport, formats)

	cli.Components = components.New(transport, formats)

	cli.Identities = identities.New(transport, formats)

	cli.Languages = languages.New(transport, formats)

	cli.Licenses = licenses.New(transport, formats)

	cli.Organizations = organizations.New(transport, formats)

	cli.Packages = packages.New(transport, formats)

	cli.Platforms = platforms.New(transport, formats)

	cli.Projects = projects.New(transport, formats)

	cli.Scans = scans.New(transport, formats)

	cli.Sessions = sessions.New(transport, formats)

	cli.Status = status.New(transport, formats)

	cli.Users = users.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// APIClient is a client for API client
type APIClient struct {
	Authentication *authentication.Client

	Components *components.Client

	Identities *identities.Client

	Languages *languages.Client

	Licenses *licenses.Client

	Organizations *organizations.Client

	Packages *packages.Client

	Platforms *platforms.Client

	Projects *projects.Client

	Scans *scans.Client

	Sessions *sessions.Client

	Status *status.Client

	Users *users.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *APIClient) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Authentication.SetTransport(transport)

	c.Components.SetTransport(transport)

	c.Identities.SetTransport(transport)

	c.Languages.SetTransport(transport)

	c.Licenses.SetTransport(transport)

	c.Organizations.SetTransport(transport)

	c.Packages.SetTransport(transport)

	c.Platforms.SetTransport(transport)

	c.Projects.SetTransport(transport)

	c.Scans.SetTransport(transport)

	c.Sessions.SetTransport(transport)

	c.Status.SetTransport(transport)

	c.Users.SetTransport(transport)

}
