// Code generated by go-swagger; DO NOT EDIT.

package platforms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddPlatformReader is a Reader for the AddPlatform structure.
type AddPlatformReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPlatformReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddPlatformOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddPlatformBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddPlatformForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddPlatformConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddPlatformOK creates a AddPlatformOK with default headers values
func NewAddPlatformOK() *AddPlatformOK {
	return &AddPlatformOK{}
}

/*AddPlatformOK handles this case with default header values.

Platform Created
*/
type AddPlatformOK struct {
	Payload *models.Platform
}

func (o *AddPlatformOK) Error() string {
	return fmt.Sprintf("[POST /platforms][%d] addPlatformOK  %+v", 200, o.Payload)
}

func (o *AddPlatformOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Platform)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPlatformBadRequest creates a AddPlatformBadRequest with default headers values
func NewAddPlatformBadRequest() *AddPlatformBadRequest {
	return &AddPlatformBadRequest{}
}

/*AddPlatformBadRequest handles this case with default header values.

Bad Request
*/
type AddPlatformBadRequest struct {
	Payload *models.Message
}

func (o *AddPlatformBadRequest) Error() string {
	return fmt.Sprintf("[POST /platforms][%d] addPlatformBadRequest  %+v", 400, o.Payload)
}

func (o *AddPlatformBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPlatformForbidden creates a AddPlatformForbidden with default headers values
func NewAddPlatformForbidden() *AddPlatformForbidden {
	return &AddPlatformForbidden{}
}

/*AddPlatformForbidden handles this case with default header values.

Forbidden
*/
type AddPlatformForbidden struct {
	Payload *models.Message
}

func (o *AddPlatformForbidden) Error() string {
	return fmt.Sprintf("[POST /platforms][%d] addPlatformForbidden  %+v", 403, o.Payload)
}

func (o *AddPlatformForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPlatformConflict creates a AddPlatformConflict with default headers values
func NewAddPlatformConflict() *AddPlatformConflict {
	return &AddPlatformConflict{}
}

/*AddPlatformConflict handles this case with default header values.

Conflict
*/
type AddPlatformConflict struct {
	Payload *models.Message
}

func (o *AddPlatformConflict) Error() string {
	return fmt.Sprintf("[POST /platforms][%d] addPlatformConflict  %+v", 409, o.Payload)
}

func (o *AddPlatformConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
