// Code generated by go-swagger; DO NOT EDIT.

package identities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// EditIdentityReader is a Reader for the EditIdentity structure.
type EditIdentityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditIdentityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEditIdentityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEditIdentityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEditIdentityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditIdentityOK creates a EditIdentityOK with default headers values
func NewEditIdentityOK() *EditIdentityOK {
	return &EditIdentityOK{}
}

/*EditIdentityOK handles this case with default header values.

Identity updated
*/
type EditIdentityOK struct {
	Payload *models.Identity
}

func (o *EditIdentityOK) Error() string {
	return fmt.Sprintf("[POST /identities/{identityID}][%d] editIdentityOK  %+v", 200, o.Payload)
}

func (o *EditIdentityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Identity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditIdentityBadRequest creates a EditIdentityBadRequest with default headers values
func NewEditIdentityBadRequest() *EditIdentityBadRequest {
	return &EditIdentityBadRequest{}
}

/*EditIdentityBadRequest handles this case with default header values.

Bad Request
*/
type EditIdentityBadRequest struct {
	Payload *models.Message
}

func (o *EditIdentityBadRequest) Error() string {
	return fmt.Sprintf("[POST /identities/{identityID}][%d] editIdentityBadRequest  %+v", 400, o.Payload)
}

func (o *EditIdentityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditIdentityNotFound creates a EditIdentityNotFound with default headers values
func NewEditIdentityNotFound() *EditIdentityNotFound {
	return &EditIdentityNotFound{}
}

/*EditIdentityNotFound handles this case with default header values.

Not Found
*/
type EditIdentityNotFound struct {
	Payload *models.Message
}

func (o *EditIdentityNotFound) Error() string {
	return fmt.Sprintf("[POST /identities/{identityID}][%d] editIdentityNotFound  %+v", 404, o.Payload)
}

func (o *EditIdentityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
