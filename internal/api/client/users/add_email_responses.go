// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// AddEmailReader is a Reader for the AddEmail structure.
type AddEmailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEmailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddEmailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddEmailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddEmailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddEmailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddEmailConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddEmailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddEmailOK creates a AddEmailOK with default headers values
func NewAddEmailOK() *AddEmailOK {
	return &AddEmailOK{}
}

/*AddEmailOK handles this case with default header values.

Email added
*/
type AddEmailOK struct {
	Payload *models.Email
}

func (o *AddEmailOK) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailOK  %+v", 200, o.Payload)
}

func (o *AddEmailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Email)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEmailBadRequest creates a AddEmailBadRequest with default headers values
func NewAddEmailBadRequest() *AddEmailBadRequest {
	return &AddEmailBadRequest{}
}

/*AddEmailBadRequest handles this case with default header values.

Bad Request
*/
type AddEmailBadRequest struct {
	Payload *models.Message
}

func (o *AddEmailBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailBadRequest  %+v", 400, o.Payload)
}

func (o *AddEmailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEmailForbidden creates a AddEmailForbidden with default headers values
func NewAddEmailForbidden() *AddEmailForbidden {
	return &AddEmailForbidden{}
}

/*AddEmailForbidden handles this case with default header values.

Forbidden
*/
type AddEmailForbidden struct {
	Payload *models.Message
}

func (o *AddEmailForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailForbidden  %+v", 403, o.Payload)
}

func (o *AddEmailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEmailNotFound creates a AddEmailNotFound with default headers values
func NewAddEmailNotFound() *AddEmailNotFound {
	return &AddEmailNotFound{}
}

/*AddEmailNotFound handles this case with default header values.

Not Found
*/
type AddEmailNotFound struct {
	Payload *models.Message
}

func (o *AddEmailNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailNotFound  %+v", 404, o.Payload)
}

func (o *AddEmailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEmailConflict creates a AddEmailConflict with default headers values
func NewAddEmailConflict() *AddEmailConflict {
	return &AddEmailConflict{}
}

/*AddEmailConflict handles this case with default header values.

Conflict
*/
type AddEmailConflict struct {
	Payload *models.Message
}

func (o *AddEmailConflict) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailConflict  %+v", 409, o.Payload)
}

func (o *AddEmailConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEmailInternalServerError creates a AddEmailInternalServerError with default headers values
func NewAddEmailInternalServerError() *AddEmailInternalServerError {
	return &AddEmailInternalServerError{}
}

/*AddEmailInternalServerError handles this case with default header values.

Server Error
*/
type AddEmailInternalServerError struct {
	Payload *models.Message
}

func (o *AddEmailInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{username}/emails][%d] addEmailInternalServerError  %+v", 500, o.Payload)
}

func (o *AddEmailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
