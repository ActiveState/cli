// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ActiveState/cli/internal/api/models"
)

// UniqueUsernameReader is a Reader for the UniqueUsername structure.
type UniqueUsernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UniqueUsernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUniqueUsernameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUniqueUsernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUniqueUsernameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUniqueUsernameOK creates a UniqueUsernameOK with default headers values
func NewUniqueUsernameOK() *UniqueUsernameOK {
	return &UniqueUsernameOK{}
}

/*UniqueUsernameOK handles this case with default header values.

Username available
*/
type UniqueUsernameOK struct {
	Payload *models.Message
}

func (o *UniqueUsernameOK) Error() string {
	return fmt.Sprintf("[GET /users/uniqueUsername/{username}][%d] uniqueUsernameOK  %+v", 200, o.Payload)
}

func (o *UniqueUsernameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUniqueUsernameBadRequest creates a UniqueUsernameBadRequest with default headers values
func NewUniqueUsernameBadRequest() *UniqueUsernameBadRequest {
	return &UniqueUsernameBadRequest{}
}

/*UniqueUsernameBadRequest handles this case with default header values.

Bad Request
*/
type UniqueUsernameBadRequest struct {
	Payload *models.Message
}

func (o *UniqueUsernameBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/uniqueUsername/{username}][%d] uniqueUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *UniqueUsernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUniqueUsernameConflict creates a UniqueUsernameConflict with default headers values
func NewUniqueUsernameConflict() *UniqueUsernameConflict {
	return &UniqueUsernameConflict{}
}

/*UniqueUsernameConflict handles this case with default header values.

Username Conflict
*/
type UniqueUsernameConflict struct {
	Payload *models.Message
}

func (o *UniqueUsernameConflict) Error() string {
	return fmt.Sprintf("[GET /users/uniqueUsername/{username}][%d] uniqueUsernameConflict  %+v", 409, o.Payload)
}

func (o *UniqueUsernameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
