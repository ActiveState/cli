// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Identity identity
// swagger:model Identity
type Identity struct {

	// added
	Added strfmt.DateTime `json:"added,omitempty"`

	// components
	Components []strfmt.UUID `json:"components"`

	// first scan
	FirstScan *strfmt.DateTime `json:"firstScan,omitempty"`

	// first session
	FirstSession *strfmt.DateTime `json:"firstSession,omitempty"`

	// identity ID
	IdentityID strfmt.UUID `json:"identityID,omitempty"`

	// last scan
	LastScan *strfmt.DateTime `json:"lastScan,omitempty"`

	// last session
	LastSession *strfmt.DateTime `json:"lastSession,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization ID
	OrganizationID strfmt.UUID `json:"organizationID,omitempty"`
}

// Validate validates this identity
func (m *Identity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstScan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstSession(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdentityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastScan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastSession(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Identity) validateAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.Added) { // not required
		return nil
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {

		if err := validate.FormatOf("components"+"."+strconv.Itoa(i), "body", "uuid", m.Components[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Identity) validateFirstScan(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstScan) { // not required
		return nil
	}

	if err := validate.FormatOf("firstScan", "body", "date-time", m.FirstScan.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateFirstSession(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstSession) { // not required
		return nil
	}

	if err := validate.FormatOf("firstSession", "body", "date-time", m.FirstSession.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateIdentityID(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentityID) { // not required
		return nil
	}

	if err := validate.FormatOf("identityID", "body", "uuid", m.IdentityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateLastScan(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScan) { // not required
		return nil
	}

	if err := validate.FormatOf("lastScan", "body", "date-time", m.LastScan.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateLastSession(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSession) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSession", "body", "date-time", m.LastSession.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateOrganizationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organizationID", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Identity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Identity) UnmarshalBinary(b []byte) error {
	var res Identity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
