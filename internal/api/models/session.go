// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Session session
// swagger:model Session
type Session struct {

	// ended
	Ended *strfmt.DateTime `json:"ended,omitempty"`

	// hostname
	Hostname *string `json:"hostname,omitempty"`

	// identity ID
	IdentityID strfmt.UUID `json:"identityID,omitempty"`

	// ip list
	IPList []string `json:"ipList"`

	// language
	Language *string `json:"language,omitempty"`

	// platform
	Platform *string `json:"platform,omitempty"`

	// session ID
	SessionID strfmt.UUID `json:"sessionID,omitempty"`

	// source IP
	SourceIP string `json:"sourceIP,omitempty"`

	// started
	Started strfmt.DateTime `json:"started,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this session
func (m *Session) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdentityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Session) validateEnded(formats strfmt.Registry) error {

	if swag.IsZero(m.Ended) { // not required
		return nil
	}

	if err := validate.FormatOf("ended", "body", "date-time", m.Ended.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateIdentityID(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentityID) { // not required
		return nil
	}

	if err := validate.FormatOf("identityID", "body", "uuid", m.IdentityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateIPList(formats strfmt.Registry) error {

	if swag.IsZero(m.IPList) { // not required
		return nil
	}

	return nil
}

func (m *Session) validateSessionID(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionID) { // not required
		return nil
	}

	if err := validate.FormatOf("sessionID", "body", "uuid", m.SessionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Session) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Session) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Session) UnmarshalBinary(b []byte) error {
	var res Session
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
