// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package locale

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiBvbmJlcGFhbGQKCnN0YXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbgphY3RpdmF0ZV9wcm9qZWN0OiAKICBvdGhlcjogYWN0aXZlZXIgZWVuIHByb2plY3QKdXNhZ2VfdHBsOiAKICBvdGhlcjogIgpHZWJydWlrOgogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0KICBbWy5Vc2VMaW5lXV0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNzZW46W1tCUl1dCiAgW1suTmFtZUFuZEFsaWFzZXNdXVtbZW5kXV0KCltbaWYgLkhhc0V4YW1wbGVdXQpbW0JSXV1bW0JSXV0KVm9vcmJlZWxkZW46W1tCUl1dCiAgW1suRXhhbXBsZV1dCltbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsZSBGbGFnczogCltbQlJdXVtbLkluaGVyaXRlZEZsYWdzLkZsYWdVc2FnZXMgfCB0cmltVHJhaWxpbmdXaGl0ZXNwYWNlc11dCltbZW5kXV0KCltbaWYgLkhhc0hlbHBTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpNZWVyZGVyZSBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KR2VicnVpayBcIltbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdIC0taGVscFwiIHZvb3IgbWVlciBpbmZvcm1hdGllIG92ZXIgZWVuIGNvbW1hbmQuW1tlbmRdXVtbQlJdXSIKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IExva2FsaXNhdGllCg==\"")
}
