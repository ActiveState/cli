// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Component component
// swagger:model Component
type Component struct {

	// cid
	Cid *strfmt.UUID `json:"cid,omitempty"`

	// component ID
	ComponentID strfmt.UUID `json:"componentID,omitempty"`

	// identities
	Identities []strfmt.UUID `json:"identities"`

	// latest date
	LatestDate *strfmt.DateTime `json:"latestDate,omitempty"`

	// latest version
	LatestVersion *string `json:"latestVersion,omitempty"`

	// license display
	LicenseDisplay *string `json:"licenseDisplay,omitempty"`

	// license type
	LicenseType *string `json:"licenseType,omitempty"`

	// licenses
	Licenses []strfmt.UUID `json:"licenses"`

	// matched
	Matched bool `json:"matched,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project homes
	ProjectHomes []string `json:"projectHomes"`

	// release date
	ReleaseDate *strfmt.DateTime `json:"releaseDate,omitempty"`

	// results time
	ResultsTime *strfmt.DateTime `json:"resultsTime,omitempty"`

	// scan time
	ScanTime *strfmt.DateTime `json:"scanTime,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// vid
	Vid *strfmt.UUID `json:"vid,omitempty"`

	// vulnerabilities
	Vulnerabilities []*Vulnerability `json:"vulnerabilities"`
}

// Validate validates this component
func (m *Component) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComponentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdentities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLatestDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProjectHomes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResultsTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScanTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Component) validateCid(formats strfmt.Registry) error {

	if swag.IsZero(m.Cid) { // not required
		return nil
	}

	if err := validate.FormatOf("cid", "body", "uuid", m.Cid.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateComponentID(formats strfmt.Registry) error {

	if swag.IsZero(m.ComponentID) { // not required
		return nil
	}

	if err := validate.FormatOf("componentID", "body", "uuid", m.ComponentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateIdentities(formats strfmt.Registry) error {

	if swag.IsZero(m.Identities) { // not required
		return nil
	}

	for i := 0; i < len(m.Identities); i++ {

		if err := validate.FormatOf("identities"+"."+strconv.Itoa(i), "body", "uuid", m.Identities[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Component) validateLatestDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestDate) { // not required
		return nil
	}

	if err := validate.FormatOf("latestDate", "body", "date-time", m.LatestDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateLicenses(formats strfmt.Registry) error {

	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {

		if err := validate.FormatOf("licenses"+"."+strconv.Itoa(i), "body", "uuid", m.Licenses[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Component) validateProjectHomes(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectHomes) { // not required
		return nil
	}

	return nil
}

func (m *Component) validateReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateResultsTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ResultsTime) { // not required
		return nil
	}

	if err := validate.FormatOf("resultsTime", "body", "date-time", m.ResultsTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateScanTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanTime) { // not required
		return nil
	}

	if err := validate.FormatOf("scanTime", "body", "date-time", m.ScanTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateVid(formats strfmt.Registry) error {

	if swag.IsZero(m.Vid) { // not required
		return nil
	}

	if err := validate.FormatOf("vid", "body", "uuid", m.Vid.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateVulnerabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Vulnerabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {

			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Component) UnmarshalBinary(b []byte) error {
	var res Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
