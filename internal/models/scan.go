// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Scan scan
// swagger:model Scan
type Scan struct {

	// components
	Components []strfmt.UUID `json:"components"`

	// end time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// identity ID
	IdentityID strfmt.UUID `json:"identityID,omitempty"`

	// scan ID
	ScanID strfmt.UUID `json:"scanID,omitempty"`

	// start time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// Validate validates this scan
func (m *Scan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdentityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScanID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scan) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {

		if err := validate.FormatOf("components"+"."+strconv.Itoa(i), "body", "uuid", m.Components[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Scan) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Scan) validateIdentityID(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentityID) { // not required
		return nil
	}

	if err := validate.FormatOf("identityID", "body", "uuid", m.IdentityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Scan) validateScanID(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanID) { // not required
		return nil
	}

	if err := validate.FormatOf("scanID", "body", "uuid", m.ScanID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Scan) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Scan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Scan) UnmarshalBinary(b []byte) error {
	var res Scan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
