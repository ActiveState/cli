<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rollbar</name>
    </assembly>
    <members>
        <member name="T:Rollbar.Classification.Classification">
            <summary>
            Class Classification.
            Implements the <see cref="T:Rollbar.Classification.IClassification" />
            </summary>
            <seealso cref="T:Rollbar.Classification.IClassification" />
        </member>
        <member name="F:Rollbar.Classification.Classification.classificationsByID">
            <summary>
            The classifications by identifier
            </summary>
        </member>
        <member name="M:Rollbar.Classification.Classification.MatchClassification(System.Object[])">
            <summary>
            Matches the classification.
            </summary>
            <param name="classifierObjects">The classifier objects.</param>
            <returns>Classification.</returns>
        </member>
        <member name="M:Rollbar.Classification.Classification.MatchClassification(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Matches the classification.
            </summary>
            <param name="classifierObjects">The classifier objects.</param>
            <returns>Classification.</returns>
        </member>
        <member name="M:Rollbar.Classification.Classification.MatchClassification(Rollbar.Classification.Classifier[])">
            <summary>
            Matches the classification.
            </summary>
            <param name="classifiers">The classifiers.</param>
            <returns>Classification.</returns>
        </member>
        <member name="M:Rollbar.Classification.Classification.MatchClassification(System.Collections.Generic.IEnumerable{Rollbar.Classification.Classifier})">
            <summary>
            Matches the classification.
            </summary>
            <param name="classifiers">The classifiers.</param>
            <returns>Classification.</returns>
        </member>
        <member name="F:Rollbar.Classification.Classification._classifiers">
            <summary>
            The classifiers
            </summary>
        </member>
        <member name="F:Rollbar.Classification.Classification._classifierTypes">
            <summary>
            The classifier types
            </summary>
        </member>
        <member name="M:Rollbar.Classification.Classification.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.Classification.Classification"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.Classification.Classification.#ctor(Rollbar.Classification.Classifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Classification.Classification"/> class.
            </summary>
            <param name="classifiers">The classifiers.</param>
        </member>
        <member name="M:Rollbar.Classification.Classification.#ctor(System.Collections.Generic.IEnumerable{Rollbar.Classification.Classifier})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Classification.Classification"/> class.
            </summary>
            <param name="classifiers">The classifiers.</param>
        </member>
        <member name="M:Rollbar.Classification.Classification.GenerateID(System.Collections.Generic.IEnumerable{Rollbar.Classification.Classifier})">
            <summary>
            Generates the identifier.
            </summary>
            <param name="classifiers">The classifiers.</param>
            <returns>System.String.</returns>
            <remarks>
            WARNING:
            This method is called from the type constructor.
            Make sure you know what you are doing when overriding it.
            </remarks>
        </member>
        <member name="P:Rollbar.Classification.Classification.ClassifiersCount">
            <summary>
            Gets the classifiers count.
            </summary>
            <value>The classifiers count.</value>
        </member>
        <member name="P:Rollbar.Classification.Classification.Classifiers">
            <summary>
            Gets the classifiers.
            </summary>
            <value>The classifiers.</value>
        </member>
        <member name="P:Rollbar.Classification.Classification.ClassifierTypes">
            <summary>
            Gets the classifier types.
            </summary>
            <value>The classifier types.</value>
        </member>
        <member name="P:Rollbar.Classification.Classification.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Rollbar.Classification.Classification.Rollbar#Classification#Identifiable#ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Rollbar.Classification.Classification.GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <value>All known IDs.</value>
        </member>
        <member name="M:Rollbar.Classification.Classification.Rollbar#Classification#Identifiable#GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
            <value>All known IDs.</value>
        </member>
        <member name="T:Rollbar.Classification.Classifier">
            <summary>
            Class Classifier.
            Implements the <see cref="T:Rollbar.Classification.IClassifier" />
            </summary>
            <seealso cref="T:Rollbar.Classification.IClassifier" />
        </member>
        <member name="F:Rollbar.Classification.Classifier.classifiersByID">
            <summary>
            The classifiers by identifier
            </summary>
        </member>
        <member name="M:Rollbar.Classification.Classifier.MatchClassifier(System.Object)">
            <summary>
            Matches the classifier.
            </summary>
            <param name="classifierObject">The classifier object.</param>
            <returns>Classifier.</returns>
        </member>
        <member name="M:Rollbar.Classification.Classifier.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.Classification.Classifier"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.Classification.Classifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Classification.Classifier"/> class.
            </summary>
            <param name="classifierObject">The classifier object.</param>
        </member>
        <member name="P:Rollbar.Classification.Classifier.ClassifierObject">
            <summary>
            Gets the classifier object.
            </summary>
            <value>The classifier object.</value>
        </member>
        <member name="P:Rollbar.Classification.Classifier.ClassifierType">
            <summary>
            Gets the type of the classifier.
            </summary>
            <value>The type of the classifier.</value>
        </member>
        <member name="P:Rollbar.Classification.Classifier.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Rollbar.Classification.Classifier.Rollbar#Classification#Identifiable#ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Rollbar.Classification.Classifier.GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
            <value>All known IDs.</value>
        </member>
        <member name="M:Rollbar.Classification.Classifier.Rollbar#Classification#Identifiable#GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
            <value>All known IDs.</value>
        </member>
        <member name="M:Rollbar.Classification.Classifier.GenerateClassifierID(System.Object)">
            <summary>
            Generates the classifier identifier.
            </summary>
            <param name="classifierObject">The classifier object.</param>
            <returns>System.String.</returns>
            <remarks>
            WARNING:
            This method is called from the type constructor.
            Make sure you know what you are doing when overriding it.
            </remarks>
        </member>
        <member name="T:Rollbar.Classification.IClassification">
            <summary>
            Interface IClassification
            Implements the <see cref="!:Rollbar.Classification.Identifiable&lt;System.String&gt;" />
            </summary>
            <seealso cref="!:Rollbar.Classification.Identifiable&lt;System.String&gt;" />
        </member>
        <member name="P:Rollbar.Classification.IClassification.ClassifiersCount">
            <summary>
            Gets the classifiers count.
            </summary>
            <value>The classifiers count.</value>
        </member>
        <member name="P:Rollbar.Classification.IClassification.Classifiers">
            <summary>
            Gets the classifiers.
            </summary>
            <value>The classifiers.</value>
        </member>
        <member name="P:Rollbar.Classification.IClassification.ClassifierTypes">
            <summary>
            Gets the classifier types.
            </summary>
            <value>The classifier types.</value>
        </member>
        <member name="T:Rollbar.Classification.IClassifier">
            <summary>
            Interface IClassifier
            Implements the <see cref="!:Rollbar.Classification.Identifiable&lt;System.String&gt;" />
            </summary>
            <seealso cref="!:Rollbar.Classification.Identifiable&lt;System.String&gt;" />
        </member>
        <member name="P:Rollbar.Classification.IClassifier.ClassifierType">
            <summary>
            Gets the type of the classifier.
            </summary>
            <value>The type of the classifier.</value>
        </member>
        <member name="P:Rollbar.Classification.IClassifier.ClassifierObject">
            <summary>
            Gets the classifier object.
            </summary>
            <value>The classifier object.</value>
        </member>
        <member name="T:Rollbar.Classification.Identifiable">
            <summary>
            Interface Identifiable
            </summary>
        </member>
        <member name="P:Rollbar.Classification.Identifiable.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Rollbar.Classification.Identifiable.GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <value>All known IDs.</value>
        </member>
        <member name="T:Rollbar.Classification.Identifiable`1">
            <summary>
            Interface Identifiable
            Implements the <see cref="T:Rollbar.Classification.Identifiable" />
            </summary>
            <typeparam name="TID">The type of the identifier.</typeparam>
            <seealso cref="T:Rollbar.Classification.Identifiable" />
        </member>
        <member name="P:Rollbar.Classification.Identifiable`1.ID">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Rollbar.Classification.Identifiable`1.GetAllKnownIDs">
            <summary>
            Gets all known IDs.
            </summary>
            <value>All known IDs.</value>
        </member>
        <member name="T:Rollbar.Common.CategorizedEntities`2">
            <summary>
            Class CategorizedEntities.
            Implements the <see cref="T:Rollbar.Common.ICategorizedEntities`2" />
            </summary>
            <typeparam name="TCategory">The type of the t category.</typeparam>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
            <seealso cref="T:Rollbar.Common.ICategorizedEntities`2" />
        </member>
        <member name="F:Rollbar.Common.CategorizedEntities`2._entitiesByCategorySyncRoot">
            <summary>
            The entities by category synchronize root
            </summary>
        </member>
        <member name="F:Rollbar.Common.CategorizedEntities`2._entitiesByCategory">
            <summary>
            The entities by category
            </summary>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.RegisterCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Registers the category with its corresponding initial set of entities.
            </summary>
            <param name="category">The category.</param>
            <param name="entities">The entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.RegisterCategory(`0)">
            <summary>
            Registers the category.
            </summary>
            <param name="category">The category.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.UnRegisterCategory(`0)">
            <summary>
            Unregisters category.
            </summary>
            <param name="category">The category.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.ExpandCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Expands the category.
            </summary>
            <param name="category">The category.</param>
            <param name="deltaEntities">The delta entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.ReduceCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Reduces the category.
            </summary>
            <param name="category">The category.</param>
            <param name="deltaEntities">The delta entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.ReplaceCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Replaces the category's entities.
            </summary>
            <param name="category">The category.</param>
            <param name="entities">The entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetCategoriesCount">
            <summary>
            Gets the categories count.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntities">
            <summary>
            Gets all the entities.
            </summary>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntities(System.Collections.Generic.ISet{`0})">
            <summary>
            Gets the entities.
            </summary>
            <param name="categories">The categories.</param>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntities(`0[])">
            <summary>
            Gets the entities.
            </summary>
            <param name="categories">The categories.</param>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntitiesCount">
            <summary>
            Gets the entities count.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntitiesCount(System.Collections.Generic.ISet{`0})">
            <summary>
            Gets the entities count.
            </summary>
            <param name="categories">The categories.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetEntitiesCount(`0[])">
            <summary>
            Gets the entities count.
            </summary>
            <param name="categories">The categories.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.GetCategories">
            <summary>
            Gets all the categories.
            </summary>
            <returns>ISet&lt;TCategory&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.CategorizedEntities`2.MergeSets``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.ISet{``0}})">
            <summary>
            Merges the sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setsToMerge">The sets to merge.</param>
            <returns>ISet&lt;T&gt;.</returns>
        </member>
        <member name="T:Rollbar.Common.CollectorCollection`1">
            <summary>
            Class CollectorCollection.
            Implements the <see cref="T:Rollbar.Common.ICollector`1" />
            Implements the <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Rollbar.Common.ICollector`1" />
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
        </member>
        <member name="F:Rollbar.Common.CollectorCollection`1._collection">
            <summary>
            The collection
            </summary>
        </member>
        <member name="P:Rollbar.Common.CollectorCollection`1.DefaultCollectionCapacity">
            <summary>
            Gets or sets the default collection capacity.
            </summary>
            <value>The default collection capacity.</value>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.CollectorCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.CollectorCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.CollectorCollection`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.CollectorCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Rollbar.Common.CollectorCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.Add(`0)">
            <summary>
            Adds the specified collection item.
            </summary>
            <param name="collectionItem">The collection item.</param>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified collection items.
            </summary>
            <param name="collectionItems">The collection items.</param>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Rollbar.Common.CollectorCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Rollbar.Common.DateTimeUtil">
            <summary>
            Utility class for date/time related conversions.
            </summary>
        </member>
        <member name="M:Rollbar.Common.DateTimeUtil.ConvertToUnixTimestampInMilliseconds(System.DateTime)">
            <summary>
            Converts to unix timestamp in milliseconds.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.DateTimeUtil.ConvertToUnixTimestampInSeconds(System.DateTime)">
            <summary>
            Converts to unix timestamp in seconds.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.DateTimeUtil.ConvertFromUnixTimestampInSeconds(System.Int64)">
            <summary>
            Converts from unix timestamp in seconds.
            </summary>
            <param name="unixTimestampInSeconds">The unix timestamp in seconds.</param>
            <returns>corresponding DateTimeOffset value</returns>
        </member>
        <member name="M:Rollbar.Common.DateTimeUtil.TryParseFromUnixTimestampInSecondsString(System.String,System.DateTimeOffset@)">
            <summary>
            Tries the parse from unix timestamp in seconds string.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="dateTimeOffset">The date time offset.</param>
            <returns><c>true</c> if was able to parse successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Rollbar.Common.DictionaryExtension">
            <summary>
            Class DictionaryExtension.
            </summary>
        </member>
        <member name="M:Rollbar.Common.DictionaryExtension.ToObjectDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts to object dictionary (where keys are strings and values are objects).
            </summary>
            <param name="stringDictionary">The string dictionary (where keys are strings and values are strings).</param>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:Rollbar.Common.DisposableAction">
            <summary>
            Models a disposable action that is guaranteed to be invoked 
            at least on disposal (if not explicitly invoked).
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Rollbar.Common.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Rollbar.Common.DisposableAction.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Rollbar.Common.DisposableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Rollbar.Common.EmptyDisposable">
            <summary>
            Implements empty/no-op disposable singleton.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Rollbar.Common.EmptyDisposable.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.Common.EmptyDisposable"/> class from being created.
            </summary>
        </member>
        <member name="P:Rollbar.Common.EmptyDisposable.Instance">
            <summary>
            Gets the singleton-like IRollbar instance.
            </summary>
            <value>
            The single shared IRollbar instance.
            </value>
        </member>
        <member name="M:Rollbar.Common.EmptyDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Rollbar.Common.EnumUtility">
            <summary>
            Class EnumUtility.
            </summary>
        </member>
        <member name="M:Rollbar.Common.EnumUtility.GetAllValues``1">
            <summary>
            Gets all values.
            </summary>
            <typeparam name="TEnum">The type of the Enum.</typeparam>
            <returns>TEnum[].</returns>
        </member>
        <member name="T:Rollbar.Common.ErrorCollector">
            <summary>
            Class ErrorCollector.
            Implements the <see cref="T:Rollbar.Common.IErrorCollector" />
            </summary>
            <seealso cref="T:Rollbar.Common.IErrorCollector" />
        </member>
        <member name="F:Rollbar.Common.ErrorCollector._exceptions">
            <summary>
            The exceptions
            </summary>
        </member>
        <member name="P:Rollbar.Common.ErrorCollector.Exceptions">
            <summary>
            Gets the collected exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:Rollbar.Common.ErrorCollector.Register(System.Exception)">
            <summary>
            Registers the specified exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Rollbar.Common.ExceptionUtility">
            <summary>
            Class ExceptionUtility.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ExceptionUtility.SnapLocalVariables(System.Exception)">
            <summary>
            Snaps the local variables.
            </summary>
            <param name="exception">The exception.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.ExceptionUtility.SnapLocalVariables(System.Diagnostics.StackTrace)">
            <summary>
            Snaps the local variables.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.Common.FileUtility">
            <summary>
            Class FileUtility.
            </summary>
        </member>
        <member name="M:Rollbar.Common.FileUtility.ApplicationFileExists(System.String)">
            <summary>
            Verifies if the specified application file (a file that is part of an application) exists.
            </summary>
            <param name="applicationRootRelativeFilePath">
            The application root relative file path.
            The relative path starting from the application root directory.
            </param>
            <returns><c>true</c> if exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.Common.FileUtility.GetAppConfigFileAlternatives">
            <summary>
            Gets known application configuration file alternatives.
            </summary>
            <returns>IReadOnlyCollection&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.FileUtility.AppConfigFilePresent">
            <summary>
            Applications the configuration file present.
            </summary>
            <returns><c>true</c> if present, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Rollbar.Common.HttpClientUtility">
            <summary>
            Class HttpClientUtility.
            </summary>
        </member>
        <member name="M:Rollbar.Common.HttpClientUtility.CreateHttpClient">
            <summary>
            Creates the HTTP client.
            </summary>
            <returns>HttpClient.</returns>
        </member>
        <member name="M:Rollbar.Common.HttpClientUtility.CreateHttpClient(System.String)">
            <summary>
            Creates the HTTP client.
            </summary>
            <param name="proxyAddress">The proxy address.</param>
            <returns>HttpClient.</returns>
        </member>
        <member name="M:Rollbar.Common.HttpClientUtility.CreateHttpClient(System.String,System.String,System.String)">
            <summary>
            Creates the HTTP client.
            </summary>
            <param name="proxyAddress">The proxy settings.</param>
            <param name="proxyUsername">The proxy user name.</param>
            <param name="proxyPassword">The proxy password.</param>
            <returns>HttpClient.</returns>
        </member>
        <member name="T:Rollbar.Common.HttpHeadersExtension">
            <summary>
            Class HttpHeadersExtension.
            </summary>
        </member>
        <member name="F:Rollbar.Common.HttpHeadersExtension.emptyResult">
            <summary>
            The shared empty result
            </summary>
        </member>
        <member name="M:Rollbar.Common.HttpHeadersExtension.GetHeaderValuesSafely(System.Net.Http.Headers.HttpHeaders,System.String)">
            <summary>
            Gets the header values safely.
            </summary>
            <param name="httpHeaders">The HTTP headers.</param>
            <param name="headerName">Name of the header.</param>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.HttpHeadersExtension.GetLastHeaderValueSafely(System.Net.Http.Headers.HttpHeaders,System.String)">
            <summary>
            Gets the last header value safely.
            </summary>
            <param name="httpHeaders">The HTTP headers.</param>
            <param name="headerName">Name of the header.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.HttpHeadersExtension.ParseHeaderValueSafelyIfAny``1(System.Net.Http.Headers.HttpHeaders,System.String,Rollbar.Common.StringUtility.TryParseHandler{``0})">
            <summary>
            Parses the header value safely if any.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpHeaders">The HTTP headers.</param>
            <param name="headerName">Name of the header.</param>
            <param name="tryParseHandler">The try parse handler.</param>
            <returns>System.Nullable&lt;T&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.HttpHeadersExtension.ParseHeaderValueSafelyOrDefault``1(System.Net.Http.Headers.HttpHeaders,System.String,Rollbar.Common.StringUtility.TryParseHandler{``0},``0)">
            <summary>
            Parses the header value safely or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpHeaders">The HTTP headers.</param>
            <param name="headerName">Name of the header.</param>
            <param name="tryParseHandler">The try parse handler.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="T:Rollbar.Common.ICategorizedEntities`2">
            <summary>
            Interface ICategorizedEntities
            </summary>
            <typeparam name="TCategory">The type of the t category.</typeparam>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.RegisterCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Registers the category with its corresponding initial set of entities.
            </summary>
            <param name="category">The category.</param>
            <param name="entities">The entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.RegisterCategory(`0)">
            <summary>
            Registers the category.
            </summary>
            <param name="category">The category.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.UnRegisterCategory(`0)">
            <summary>
            Unregisters category.
            </summary>
            <param name="category">The category.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.ExpandCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Expands the category.
            </summary>
            <param name="category">The category.</param>
            <param name="deltaEntities">The delta entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.ReduceCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Reduces the category.
            </summary>
            <param name="category">The category.</param>
            <param name="deltaEntities">The delta entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.ReplaceCategory(`0,System.Collections.Generic.ISet{`1})">
            <summary>
            Replaces the category's entities.
            </summary>
            <param name="category">The category.</param>
            <param name="entities">The entities.</param>
            <returns>ICategorizedEntities&lt;TCategory, TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetCategories">
            <summary>
            Gets all the categories.
            </summary>
            <returns>ISet&lt;TCategory&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetCategoriesCount">
            <summary>
            Gets the categories count.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntities">
            <summary>
            Gets all the entities.
            </summary>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntities(System.Collections.Generic.ISet{`0})">
            <summary>
            Gets the entities.
            </summary>
            <param name="categories">The categories.</param>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntities(`0[])">
            <summary>
            Gets the entities.
            </summary>
            <param name="categories">The categories.</param>
            <returns>ISet&lt;TEntity&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntitiesCount">
            <summary>
            Gets the entities count.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntitiesCount(System.Collections.Generic.ISet{`0})">
            <summary>
            Gets the entities count.
            </summary>
            <param name="categories">The categories.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Rollbar.Common.ICategorizedEntities`2.GetEntitiesCount(`0[])">
            <summary>
            Gets the entities count.
            </summary>
            <param name="categories">The categories.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="T:Rollbar.Common.ICollector`1">
            <summary>
            Interface ICollector
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rollbar.Common.ICollector`1.Add(`0)">
            <summary>
            Adds the specified collection item.
            </summary>
            <param name="collectionItem">The collection item.</param>
        </member>
        <member name="M:Rollbar.Common.ICollector`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified collection items.
            </summary>
            <param name="collectionItems">The collection items.</param>
        </member>
        <member name="T:Rollbar.Common.IErrorCollector">
            <summary>
            Interface IErrorCollector
            </summary>
        </member>
        <member name="P:Rollbar.Common.IErrorCollector.Exceptions">
            <summary>
            Gets the collected exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:Rollbar.Common.IErrorCollector.Register(System.Exception)">
            <summary>
            Registers the specified exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Rollbar.Common.IpAddressUtility">
            <summary>
            A utility class aiding in working with IP addresses.
            </summary>
        </member>
        <member name="M:Rollbar.Common.IpAddressUtility.Anonymize(System.String)">
            <summary>
            Anonymizes the given IP address.
            </summary>
            <param name="exactIpAddress">The specified IP address to anonymize.</param>
            <returns></returns>
        </member>
        <member name="T:Rollbar.Common.IReconfigurable`1">
            <summary>
            Defines generic IReconfigurable interface.
            
            Any type that supports its own reconfiguration based on a provided original
            configuration should implement this interface.
            </summary>
            <typeparam name="T">A type that supports its reconfiguration.</typeparam>
        </member>
        <member name="M:Rollbar.Common.IReconfigurable`1.Reconfigure(`0)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">
            The pre-configured instance to be cloned in terms of its configuration/settings.
            </param>
            <returns>Reconfigured instance.</returns>
        </member>
        <member name="E:Rollbar.Common.IReconfigurable`1.Reconfigured">
            <summary>
            Occurs when this instance reconfigured.
            </summary>
        </member>
        <member name="T:Rollbar.Common.IReconfigurable`2">
            <summary>
            Defines generic IReconfigurable interface.
            
            Any type that supports its own reconfiguration based on a provided original
            base configuration should implement this interface.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase">The type of the base.</typeparam>
        </member>
        <member name="M:Rollbar.Common.IReconfigurable`2.Reconfigure(`1)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">
            The pre-configured instance to be cloned in terms of its configuration/settings.
            </param>
            <returns>Reconfigured instance.</returns>
        </member>
        <member name="E:Rollbar.Common.IReconfigurable`2.Reconfigured">
            <summary>
            Occurs when this instance reconfigured.
            </summary>
        </member>
        <member name="T:Rollbar.Common.IValidatable">
            <summary>
            Interface IValidatable
            </summary>
        </member>
        <member name="M:Rollbar.Common.IValidatable.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>IReadOnlyCollection&lt;ValidationResult&gt; containing failed validation rules.</returns>
        </member>
        <member name="M:Rollbar.Common.IValidatable.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.Common.NameValueCollectionExtension">
            <summary>
            Class NameValueCollectionExtension.
            </summary>
        </member>
        <member name="M:Rollbar.Common.NameValueCollectionExtension.ToStringDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts to string dictionary (where keys are strings and values are strings).
            </summary>
            <param name="nvc">The NVC.</param>
            <returns>IDictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.NameValueCollectionExtension.ToObjectDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts to object dictionary (where keys are strings and values are objects).
            </summary>
            <param name="nvc">The NVC.</param>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:Rollbar.Common.ObjectExtension">
            <summary>
            Class ObjectExtension.
            </summary>
        </member>
        <member name="F:Rollbar.Common.ObjectExtension.defaultIndentation">
            <summary>
            The default indentation
            </summary>
        </member>
        <member name="M:Rollbar.Common.ObjectExtension.RenderAsString(System.Object)">
            <summary>
            Renders as string.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.ObjectExtension.RenderAsString(System.Object,System.String)">
            <summary>
            Renders as string.
            </summary>
            <param name="obj">The object.</param>
            <param name="indentation">The indentation.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.ObjectExtension.RenderAsString(System.Object,System.String,System.Text.StringBuilder)">
            <summary>
            Renders as a string.
            </summary>
            <param name="obj">The object.</param>
            <param name="indentation">The indentation.</param>
            <param name="stringBuilder">The string builder.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.ObjectExtension.RenderAsString(System.Web.HttpPostedFile)">
            <summary>
            Renders as string.
            </summary>
            <param name="httpPostedFile">The HTTP posted file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.ObjectExtension.RenderAsString(System.Web.HttpPostedFile,System.String)">
            <summary>
            Renders as string.
            </summary>
            <param name="httpPostedFile">The HTTP posted file.</param>
            <param name="indentation">The indentation.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.Common.ObjectUtility">
            <summary>
            Class ObjectUtility.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ObjectUtility.AreSimilarReferences(System.Object,System.Object)">
            <summary>
            Ares the similar references.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.Common.ObjectUtility.AreComparableViaProperties(System.Object,System.Object)">
            <summary>
            Ares the comparable via properties.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Rollbar.Common.ReconfigurableBase`1">
            <summary>
            An abstract base for implementing IReconfigurable types.
            Implements the <see cref="T:Rollbar.Common.ReconfigurableBase" />
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <typeparam name="T">A type that supports its reconfiguration.</typeparam>
            <seealso cref="T:Rollbar.Common.ReconfigurableBase" />
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:Rollbar.Common.IReconfigurable`1" />
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`1.Reconfigure(`0)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">The pre-configured instance to be cloned in terms of its configuration/settings.</param>
            <returns>
            Reconfigured instance.
            </returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Rollbar.Common.ReconfigurableBase`2">
            <summary>
            An abstract base for implementing IReconfigurable (based on a base type) types.
            Implements the <see cref="T:Rollbar.Common.ReconfigurableBase" />
            Implements the <see cref="T:Rollbar.Common.IReconfigurable`2" />
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase">The type of the base.</typeparam>
            <seealso cref="T:Rollbar.Common.ReconfigurableBase" />
            <seealso cref="T:Rollbar.Common.IReconfigurable`2" />
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:Rollbar.Common.IReconfigurable`1" />
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.ReconfigurableBase`2"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`2.Reconfigure(`1)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">The pre-configured instance to be cloned in terms of its configuration/settings.</param>
            <returns>
            Reconfigured instance.
            </returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`2.Equals(`1)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Rollbar.Common.ReconfigurableBase">
            <summary>
            Class ReconfigurableBase.
            Implements the <see cref="T:Rollbar.Common.ReconfigurableBase" />
            Implements the <see cref="T:Rollbar.Common.IReconfigurable`1" />
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:Rollbar.Common.ReconfigurableBase" />
            <seealso cref="T:Rollbar.Common.IReconfigurable`1" />
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:Rollbar.Common.ReconfigurableBase._thisInstanceType">
            <summary>
            The this instance type (most specific one).
            </summary>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.ReconfigurableBase"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase.ListInstancePublicProperties(System.Type)">
            <summary>
            Lists the instance's public properties.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase.Reconfigure(System.Object,System.Type)">
            <summary>
            Reconfigures as the specified like-me prototype object.
            </summary>
            <param name="likeMe">The like-me prototype to reconfigure according to.</param>
            <param name="likeMeTypeOfInterest">The like-me's type of interest.</param>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase.Equals(System.Object,System.Type)">
            <summary>
            Checks if this instance equals the specified other object in terms of the public properties' values of the other's type.
            </summary>
            <param name="other">The other.</param>
            <param name="otherType">Type of the other.</param>
            <returns><c>true</c> if not equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="E:Rollbar.Common.ReconfigurableBase.Reconfigured">
            <summary>
            Occurs when this instance reconfigured.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ReconfigurableBase.OnReconfigured(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Reconfigured" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rollbar.Common.ReflectionUtility">
            <summary>
            A utility class aiding with .NET Reflection.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllDataFields(System.Type)">
            <summary>
            Gets all data fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllStaticDataFields(System.Type)">
            <summary>
            Gets all public static fields.
            </summary>
            <param name="type">The type.</param>
            <returns>All discovered FieldInfos.</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllPublicStaticFields(System.Type)">
            <summary>
            Gets all public static fields.
            </summary>
            <param name="type">The type.</param>
            <returns>All discovered FieldInfos.</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllPublicInstanceProperties(System.Type)">
            <summary>
            Gets all public instance properties.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllPublicStaticProperties(System.Type)">
            <summary>
            Gets all public static properties.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetStaticFieldValue``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the static field value.
            </summary>
            <typeparam name="TFieldDataType">The type of the field data type.</typeparam>
            <param name="staticField">The static field.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetAllPublicStaticFieldValues``1(System.Type)">
            <summary>
            Gets all public static field values.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="type">The type.</param>
            <returns>All the field values.</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetNestedTypes(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the nested types.
            </summary>
            <param name="hostType">Type of the host.</param>
            <param name="nestedTypesBindingFlags">The nested types binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetNestedTypeByName(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the nested type by its name.
            </summary>
            <param name="hostType">Type of the host.</param>
            <param name="nestedTypeName">Name of the nested type (without its namespace).</param>
            <param name="nestedTypeBindingFlags">The nested type binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetSubClassesOf(System.Type)">
            <summary>
            Gets the sub classes of a given type 
            from the same assembly where the base type is defined.
            </summary>
            <param name="baseType">Type of the base.</param>
            <returns>Array of the derived types</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetSubClassesOf(System.Type,System.Reflection.Assembly)">
            <summary>
            Gets the sub classes of.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="searchAssembly">The search assembly.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.DoesTypeImplementInterface(System.Type,System.Type)">
            <summary>
            Does the type implement interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns><c>true</c> if implements, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetTypesHierarchy(System.Type)">
            <summary>
            Gets the types hierarchy including the provided type (if any) as the first one in the array.
            </summary>
            <param name="type">The type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetBaseTypesHierarchy(System.Type)">
            <summary>
            Gets the base types hierarchy for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetCommonHierarchyTypes(System.Type,System.Type)">
            <summary>
            Gets the common hierarchy types.
            </summary>
            <param name="lType">Type of the l.</param>
            <param name="rType">Type of the r.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetTopCommonSuperType(System.Type,System.Type)">
            <summary>
            Gets the type of the top common super.
            </summary>
            <param name="lType">Type of the left type.</param>
            <param name="rType">Type of the right type</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetImplementedInterfaceTypes(System.Type)">
            <summary>
            Gets the implemented interface types.
            </summary>
            <param name="type">The type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetCommonImplementedInterfaces(System.Type,System.Type)">
            <summary>
            Gets the common implemented interfaces among provided types.
            </summary>
            <param name="lType">Type of the left type.</param>
            <param name="rType">Type of the right type.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:Rollbar.Common.ReflectionUtility.GetCommonImplementedInterfaces(System.Type[])">
            <summary>
            Gets the common implemented interfaces among provided types.
            </summary>
            <param name="types">The types.</param>
            <returns>Type[].</returns>
        </member>
        <member name="T:Rollbar.Common.RuntimeEnvironmentUtility">
            <summary>
            A utility class aiding discovery of the current runtime environment.
            </summary>
        </member>
        <member name="M:Rollbar.Common.RuntimeEnvironmentUtility.GetTypeAssemblyVersion(System.Type)">
            <summary>
            Gets the type assembly version.
            </summary>
            <param name="theType">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.RuntimeEnvironmentUtility.GetAssemblyTargetFrameworks(System.Type)">
            <summary>
            Gets the assembly target frameworks.
            </summary>
            <param name="typeFromAssembly">The type from assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.RuntimeEnvironmentUtility.GetAssemblyTargetFrameworks(System.Reflection.Assembly)">
            <summary>
            Gets the assembly target frameworks.
            </summary>
            <param name="theAssembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.RuntimeEnvironmentUtility.GetOSDescription">
            <summary>
            Gets the OS description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.RuntimeEnvironmentUtility.GetCpuArchitecture">
            <summary>
            Gets the CPU architecture.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rollbar.Common.StreamUtil">
            <summary>
            Class StreamUtil.
            </summary>
        </member>
        <member name="M:Rollbar.Common.StreamUtil.ConvertToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Converts a stream to a string using specified encoding.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Common.StreamUtil.InterpretAsJsonObject(System.IO.Stream)">
            <summary>
            Interprets a stream as a JSON object (if any).
            </summary>
            <param name="stream">The stream.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Rollbar.Common.StringUtility">
            <summary>
            A utility type aiding in string manipulations.
            </summary>
        </member>
        <member name="T:Rollbar.Common.StringUtility.TryParseHandler`1">
            <summary>
            Delegate TryParseHandler
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if value string is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.Parse``1(System.String,Rollbar.Common.StringUtility.TryParseHandler{``0})">
            <summary>
            Either successfully parses the provided string value or returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The string value to parse.</param>
            <param name="tryParseHandler">The try parse handler.</param>
            <returns>System.Nullable&lt;T&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.ParseOrDefault``1(System.String,Rollbar.Common.StringUtility.TryParseHandler{``0},``0)">
            <summary>
            Either successfully parses the provided string value or returns specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The string value to parse.</param>
            <param name="tryParseHandler">The try parse handler.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.Combine(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines the specified substrings using the specified separator.
            </summary>
            <param name="substrings">The substrings.</param>
            <param name="substringSeparator">The substring separator.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.GetEncodingBytes(System.String,System.Text.Encoding)">
            <summary>
            Gets the encoding bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.CalculateMaxEncodingBytes(System.String,System.Text.Encoding)">
            <summary>
            Calculates the maximum encoding bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.CalculateExactEncodingBytes(System.String,System.Text.Encoding)">
            <summary>
            Calculates the exact encoding bytes.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Common.StringUtility.Truncate(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Truncates the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
            <param name="encodedBytesLimit">The encoded bytes limit.</param>
            <returns></returns>
        </member>
        <member name="T:Rollbar.Common.ValidationResult">
            <summary>
            Class ValidationResult.
            </summary>
        </member>
        <member name="F:Rollbar.Common.ValidationResult.emptyDetails">
            <summary>
            The empty details
            </summary>
        </member>
        <member name="F:Rollbar.Common.ValidationResult._validationRule">
            <summary>
            The validation rule
            </summary>
        </member>
        <member name="F:Rollbar.Common.ValidationResult._details">
            <summary>
            The details
            </summary>
        </member>
        <member name="M:Rollbar.Common.ValidationResult.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.Common.ValidationResult"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.Common.ValidationResult.#ctor(System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.ValidationResult"/> class.
            </summary>
            <param name="validationRule">The validation rule.</param>
        </member>
        <member name="M:Rollbar.Common.ValidationResult.#ctor(System.Enum,System.Collections.Generic.IEnumerable{Rollbar.Common.ValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Common.ValidationResult"/> class.
            </summary>
            <param name="validationRule">The validation rule.</param>
            <param name="details">The details.</param>
        </member>
        <member name="P:Rollbar.Common.ValidationResult.ValidationRule">
            <summary>
            Gets the validation rule.
            </summary>
            <value>The validation rule.</value>
        </member>
        <member name="P:Rollbar.Common.ValidationResult.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="M:Rollbar.Common.ValidationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Rollbar.Common.Validator">
            <summary>
            Class Validator.
            </summary>
        </member>
        <member name="M:Rollbar.Common.Validator.Validate(System.Object)">
            <summary>
            Validates the specified validation subject.
            </summary>
            <param name="validationSubject">The validation subject.</param>
            <returns>IReadOnlyCollection&lt;ValidationResult&gt; containing failed validation rules with optional details as values.</returns>
        </member>
        <member name="T:Rollbar.Common.Validator.ValidationRule">
            <summary>
            Enum ValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.Common.Validator.ValidationRule.ValidationSubjectInstanceRequired">
            <summary>
            The validation subject instance required
            </summary>
        </member>
        <member name="F:Rollbar.Common.Validator.ValidationRule.MatchValidationSubjectType">
            <summary>
            The match validation subject type
            </summary>
        </member>
        <member name="T:Rollbar.Common.Validator`1">
            <summary>
            Class Validator (with generic validation subject type).
            Implements the <see cref="T:Rollbar.Common.Validator" />
            </summary>
            <typeparam name="TValidationSubject">The type of the t validation subject.</typeparam>
            <seealso cref="T:Rollbar.Common.Validator" />
        </member>
        <member name="T:Rollbar.Common.Validator`2">
            <summary>
            Class Validator (with generic validation subject type and generic validation rule Enum).
            Implements the <see cref="T:Rollbar.Common.Validator`1" />
            </summary>
            <typeparam name="TValidationSubject">The type of the t validation subject.</typeparam>
            <typeparam name="TValidationRule">The type of the t validation rule.</typeparam>
            <seealso cref="T:Rollbar.Common.Validator`1" />
        </member>
        <member name="F:Rollbar.Common.Validator`2._validationFunctionsByRule">
            <summary>
            The validations
            </summary>
        </member>
        <member name="F:Rollbar.Common.Validator`2._validatorsByRule">
            <summary>
            The validators by rule
            </summary>
        </member>
        <member name="P:Rollbar.Common.Validator`2.DefaultValidationRulesCapacity">
            <summary>
            Gets or sets the default validation rules capacity.
            </summary>
            <value>The default validation rules capacity.</value>
        </member>
        <member name="M:Rollbar.Common.Validator`2.AddValidation(`1,System.Func{`0,System.Boolean})">
            <summary>
            Adds the validation.
            </summary>
            <param name="validationRule">The validation rule.</param>
            <param name="validationFunc">The validation function.</param>
            <returns>Validator&lt;TValidationSubject, TValidationRule&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.Validator`2.AddValidation``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},Rollbar.Common.Validator{``0})">
            <summary>
            Adds the validation.
            </summary>
            <typeparam name="TSubjectProperty">The type of the t subject property.</typeparam>
            <param name="validationRule">The validation rule.</param>
            <param name="subjectPropertyExpression">The subject property expression.</param>
            <param name="subjectPropertyValidator">The subject property validator.</param>
            <returns>Validator&lt;TValidationSubject, TValidationRule&gt;.</returns>
        </member>
        <member name="M:Rollbar.Common.Validator`2.Validate(`0)">
            <summary>
            Validates the specified validation subject.
            </summary>
            <param name="validationSubject">The validation subject.</param>
            <returns>IReadOnlyDictionary&lt;TValidationRule, ValidationResult&gt; containing failed validation rules with optional details as values.</returns>
        </member>
        <member name="M:Rollbar.Common.Validator`2.Validate(System.Object)">
            <summary>
            Validates the specified validation subject.
            </summary>
            <param name="validationSubject">The validation subject.</param>
            <returns>IReadOnlyCollection&lt;ValidationResult&gt; containing failed validation rules with optional details as values.</returns>
        </member>
        <member name="T:Rollbar.Diagnostics.Assumption">
            <summary>
            Utility class aiding in validating assumptions about arguments and their values.
            </summary>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.FailValidation(System.String,System.String)">
            <summary>
            Fails the validation.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertIsInterface``1">
            <summary>
            Asserts the  generic type parameter as an interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertTrue(System.Boolean,System.String)">
            <summary>
            Asserts the true.
            </summary>
            <param name="testedValue">if set to <c>true</c> [tested value].</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertFalse(System.Boolean,System.String)">
            <summary>
            Asserts the false.
            </summary>
            <param name="testedValue">if set to <c>true</c> [tested value].</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotEqual``1(``0,``0,System.String)">
            <summary>
            Asserts the not equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="testedValue">The tested value.</param>
            <param name="compareToValue">The compare to value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertEqual``1(``0,``0,System.String)">
            <summary>
            Asserts the equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="testedValue">The tested value.</param>
            <param name="compareToValue">The compare to value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotNull``1(``0,System.String)">
            <summary>
            Utility class for validating method parameters.
            </summary>
            		/// <summary>
            Ensures the specified value is not null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The specified value.</returns>
            <example>
            public UIElementAdapter(UIElement uiElement)
            {
            	this.uiElement = Assumption.AssertNotNull(uiElement, "uiElement");	
            }
            </example>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures the specified value is not <code>null</code> or empty (a zero length string).
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The specified value.</returns>
            <example>
            public DoSomething(string message)
            {
            	this.message = Assumption.AssertNotNullOrEmpty(message, "message");	
            }
            </example>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Ensures the specified value is not <code>null</code> or empty enumerable.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The specified value.</returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Asserts the equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures the specified value is not <code>null</code> 
            or white space.
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The specified value.</returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotEmpty(System.Guid,System.String)">
            <summary>
            Asserts that the specified value is not an empty guid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="parameterName">The name of the member.</param>
            <returns>The specified value.</returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that the specified value is greater
            than the specified expected value.
            </summary>
            <param name="value">The value to test.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">The name of the member.</param>
            <returns>
            The specified value.
            </returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts the greater than.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThan(System.DateTimeOffset,System.DateTimeOffset,System.String)">
            <summary>
            Asserts the greater than.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts the greater than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts the greater than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertGreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset,System.String)">
            <summary>
            Asserts the greater than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts the less than.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts the less than.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThan(System.DateTimeOffset,System.DateTimeOffset,System.String)">
            <summary>
            Asserts the less than.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts the less than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts the less than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertLessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset,System.String)">
            <summary>
            Asserts the less than or equal.
            </summary>
            <param name="value">The value.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Diagnostics.Assumption.AssertNotNullAndOfType``1(System.Object,System.String)">
            <summary>
            Ensures the specified value is not <code>null</code> 
            and that it is of the specified type.
            </summary>
            <param name="value">The value to test.</param> 
            <param name="parameterName">The name of the parameter.</param>
            <returns>The value to test.</returns>
            <example>
            public DoSomething(object message)
            {
            	this.message = Assumption.AssertNotNullAndOfType&lt;string&gt;(message, "message");	
            }
            </example>
        </member>
        <member name="T:Rollbar.DTOs.Body">
            <summary>
            Models Rollbar Body DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.Body.#ctor(Rollbar.DTOs.Trace)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Body"/> class.
            </summary>
            <param name="trace">The trace.</param>
        </member>
        <member name="M:Rollbar.DTOs.Body.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Body"/> class.
            </summary>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="M:Rollbar.DTOs.Body.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Body"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Rollbar.DTOs.Body.#ctor(Rollbar.DTOs.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Body"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rollbar.DTOs.Body.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Body"/> class.
            </summary>
            <param name="crashReport">The crash report.</param>
        </member>
        <member name="P:Rollbar.DTOs.Body.Telemetry">
            <summary>
            Gets the optional telemetry.
            </summary>
            <value>
            The telemetry.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Body.Trace">
            <summary>
            Gets the trace.
            </summary>
            <value>
            The trace.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Body.TraceChain">
            <summary>
            Gets the trace chain.
            </summary>
            <value>
            The trace chain.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Body.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Body.CrashReport">
            <summary>
            Gets the crash report.
            </summary>
            <value>
            The crash report.
            </value>
        </member>
        <member name="M:Rollbar.DTOs.Body.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Body.BodyValidationRule">
            <summary>
            Enum BodyValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Body.BodyValidationRule.OnlyOneBodyContentRequired">
            <summary>
            The only one body content required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Body.BodyValidationRule.ValidCrashReportIfAny">
            <summary>
            The valid crash report if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Body.BodyValidationRule.ValidMessageIfAny">
            <summary>
            The valid message if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Body.BodyValidationRule.ValidTraceIfAny">
            <summary>
            The valid trace if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Body.BodyValidationRule.ValidTraceChainIfAny">
            <summary>
            The valid trace chain if any
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.Client">
            <summary>
            Models Rollbar Client DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.HostBase" />
            <remarks>
             Optional: client
            Data about the client device this event occurred on.
            As there can be multiple client environments for a given event (i.e. Flash running inside
            an HTML page), data should be namespaced by platform.
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Client.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Client"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Client.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Client"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Client.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.CodeContext">
            <summary>
            Models Rollbar CodeContext DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="P:Rollbar.DTOs.CodeContext.Pre">
            <summary>
            Gets or sets the pre-code-context.
            </summary>
            <value>
            The pre-code-context.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.CodeContext.Post">
            <summary>
            Gets or sets the post-code-context.
            </summary>
            <value>
            The post-code-context.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.CrashReport">
            <summary>
            Models Rollbar CrashReport DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.CrashReport.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.CrashReport"/> class.
            </summary>
            <param name="report">The report.</param>
        </member>
        <member name="P:Rollbar.DTOs.CrashReport.Raw">
            <summary>
            Gets the raw.
            </summary>
            <value>
            The raw.
            </value>
        </member>
        <member name="M:Rollbar.DTOs.CrashReport.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.CrashReport.CrashReportValidationRule">
            <summary>
            Enum CrashReportValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.CrashReport.CrashReportValidationRule.ValidRaw">
            <summary>
            The valid raw
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.Data">
            <summary>
            Models Rollbar Data DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.Data.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.Data.DefaultPlatform">
            <summary>
            Gets or sets the default platform.
            </summary>
            <value>
            The default platform.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Data.DefaultLanguage">
            <summary>
            Gets or sets the default language.
            </summary>
            <value>
            The default language.
            </value>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.DTOs.Body,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
            <param name="body">The body.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.DTOs.Body)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body,Rollbar.DTOs.Request)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="body">The body.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data"/> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="body">The body.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.DTOs.Data.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body,System.Collections.Generic.IDictionary{System.String,System.Object},Rollbar.DTOs.Request)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Data" /> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="body">The body.</param>
            <param name="custom">The custom.</param>
            <param name="request">The request.</param>
        </member>
        <member name="P:Rollbar.DTOs.Data.Environment">
            <summary>
            Gets the environment (REQUIRED).
            </summary>
            <value>
            The environment.
            </value>
            <remarks>
            Required: environment
            The name of the environment in which this occurrence was seen.
            A string up to 255 characters. For best results, use "production" or "prod" for your
            production environment.
            You don't need to configure anything in the Rollbar UI for new environment names;
            we'll detect them automatically.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Body">
            <summary>
            Gets the body (REQUIRED).
            </summary>
            <value>
            The body.
            </value>
            <remarks>
            Required: body
            The main data being sent. 
            It can either be a message, an exception, or a crash report.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Level">
            <summary>
            Gets or sets the level (OPTIONAL).
            </summary>
            <value>
            The level.
            </value>
            <remarks>
            Optional: level
            The severity level. One of: "critical", "error", "warning", "info", "debug"
            Defaults to "error" for exceptions and "info" for messages.
            The level of the *first* occurrence of an item is used as the item's level.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Timestamp">
            <summary>
            Gets or sets the timestamp (OPTIONAL).
            </summary>
            <value>
            The timestamp.
            </value>
            <remarks>
            Optional: timestamp
            When this occurred, as a unix timestamp.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.CodeVersion">
            <summary>
            Gets or sets the code version (OPTIONAL).
            </summary>
            <value>
            The code version.
            </value>
            <remarks>
            Optional: code_version
            A string, up to 40 characters, describing the version of the application code
            Rollbar understands these formats:
            - semantic version (i.e. "2.1.12")
            - integer (i.e. "45")
            - git SHA (i.e. "3da541559918a808c2402bba5012f6c60b27661c")
            If you have multiple code versions that are relevant, those can be sent inside "client" and "server"
            (see those sections below)
            For most cases, just send it here.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Platform">
            <summary>
            Gets or sets the platform (OPTIONAL).
            </summary>
            <value>
            The platform.
            </value>
            <remarks>
            Optional: platform
            The platform on which this occurred. Meaningful platform names:
            "browser", "android", "ios", "flash", "client", "heroku", "google-app-engine"
            If this is a client-side event, be sure to specify the platform and use a post_client_item access token.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Language">
            <summary>
            Gets or sets the language (OPTIONAL).
            </summary>
            <value>
            The language.
            </value>
            <remarks>
            Optional: language
            The name of the language your code is written in.
            This can affect the order of the frames in the stack trace. The following languages set the most
            recent call first - 'ruby', 'javascript', 'php', 'java', 'objective-c', 'lua'
            It will also change the way the individual frames are displayed, with what is most consistent with
            users of the language.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Framework">
            <summary>
            Gets or sets the framework (OPTIONAL).
            </summary>
            <value>
            The framework.
            </value>
            <remarks>
            Optional: framework
            The name of the framework your code uses
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Context">
            <summary>
            Gets or sets the context (OPTIONAL).
            </summary>
            <value>
            The context.
            </value>
            <remarks>
            Optional: context
            An identifier for which part of your application this event came from.
            Items can be searched by context (prefix search)
            For example, in a Rails app, this could be `controller#action`.
            In a single-page javascript app, it could be the name of the current screen or route.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Request">
            <summary>
            Gets or sets the request (OPTIONAL).
            </summary>
            <value>
            The request.
            </value>
            <remarks>
            Optional: request
            Data about the request this event occurred in.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>The response.</value>
            <remarks>
            Optional: response
            Data about the relevant HTTP response (if any).
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Person">
            <summary>
            Gets or sets the person (OPTIONAL).
            </summary>
            <value>
            The person.
            </value>
            <remarks>
            Optional: person
            The user affected by this event. Will be indexed by ID, username, and email.
            People are stored in Rollbar keyed by ID. If you send a multiple different usernames/emails for the
            same ID, the last received values will overwrite earlier ones.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>
            The server.
            </value>
            <remarks>
            Optional: server
            Data about the server related to this event.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Client">
            <summary>
            Gets or sets the client (OPTIONAL).
            </summary>
            <value>
            The client.
            </value>
            <remarks>
            Optional: client
            Data about the client device this event occurred on.
            As there can be multiple client environments for a given event (i.e. Flash running inside
            an HTML page), data should be namespaced by platform.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Custom">
            <summary>
            Gets or sets the custom (OPTIONAL).
            </summary>
            <value>
            The custom.
            </value>
            <remarks>
            Optional: custom
            Any arbitrary metadata you want to send. "custom" itself should be an object.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Fingerprint">
            <summary>
            Gets or sets the fingerprint (OPTIONAL).
            </summary>
            <value>
            The fingerprint.
            </value>
            <remarks>
            Optional: fingerprint
            A string controlling how this occurrence should be grouped. Occurrences with the same
            fingerprint are grouped together. See the "Grouping" guide for more information.
            Should be a string up to 40 characters long; if longer than 40 characters, we'll use its SHA1 hash.
            If omitted, we'll determine this on the backend.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Title">
            <summary>
            Gets or sets the title (OPTIONAL).
            </summary>
            <value>
            The title.
            </value>
            <remarks>
            Optional: title
            A string that will be used as the title of the Item occurrences will be grouped into.
            Max length 255 characters.
            If omitted, we'll determine this on the backend.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Uuid">
            <summary>
            Gets or sets the UUID (OPTIONAL).
            </summary>
            <value>
            The UUID.
            </value>
            <remarks>
            Optional: uuid
            A string, up to 36 characters, that uniquely identifies this occurrence.
            While it can now be any latin1 string, this may change to be a 16 byte field in the future.
            We recommend using a UUID4 (16 random bytes).
            The UUID space is unique to each project, and can be used to look up an occurrence later.
            It is also used to detect duplicate requests. If you send the same UUID in two payloads, the second
            one will be discarded.
            While optional, it is recommended that all clients generate and provide this field
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.GuidUuid">
            <summary>
            Gets or sets the unique identifier UUID (OPTIONAL).
            </summary>
            <value>
            The unique identifier UUID.
            </value>
            <remarks>
            Optional: Guid-like uuid ("mimics" the Uuid property above)
            A string, up to 36 characters, that uniquely identifies this occurrence.
            While it can now be any latin1 string, this may change to be a 16 byte field in the future.
            We recommend using a UUID4 (16 random bytes).
            The UUID space is unique to each project, and can be used to look up an occurrence later.
            It is also used to detect duplicate requests. If you send the same UUID in two payloads, the second
            one will be discarded.
            While optional, it is recommended that all clients generate and provide this field
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Data.Notifier">
            <summary>
            Gets the notifier (OPTIONAL).
            </summary>
            <value>
            The notifier.
            </value>
            <remarks>
            Optional: notifier
            Describes the library used to send this event.
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Data.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Data.DataValidationRule">
            <summary>
            Enum DataValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.EnvironmentRequired">
            <summary>
            The environment required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.BodyRequired">
            <summary>
            The body required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.ValidBody">
            <summary>
            The valid body
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.ValidServerIfAny">
            <summary>
            The valid server if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.ValidRequestIfAny">
            <summary>
            The valid request if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.ValidPersonIfAny">
            <summary>
            The valid person if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.ValidClientIfAny">
            <summary>
            The valid client if any
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Data.DataValidationRule.NotifierRequired">
            <summary>
            The notifier required
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.DomTelemetry">
            <summary>
            Implements DOM telemetry body.
            </summary>
            <seealso cref="T:Rollbar.DTOs.TelemetryBody" />
        </member>
        <member name="T:Rollbar.DTOs.DomTelemetry.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.DomTelemetry.ReservedProperties.Element">
            <summary>
            The element
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.DomTelemetry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.DomTelemetry"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Rollbar.DTOs.DomTelemetry.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.DomTelemetry"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.DomTelemetry.Element">
            <summary>
            Gets the element.
            </summary>
            <value>
            The element.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.DtoBase">
            <summary>
            Implements an abstract DTO type base.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.TruncateStrings(System.Text.Encoding,System.Int32)">
            <summary>
            Truncates the strings.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="stringBytesLimit">The string bytes limit.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.TruncateStringValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.Text.Encoding,System.Int32)">
            <summary>
            Truncates the string values.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="encoding">The encoding.</param>
            <param name="stringBytesLimit">The string bytes limit.</param>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.TruncateStringValues(System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            Truncates the string values.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="encoding">The encoding.</param>
            <param name="stringBytesLimit">The string bytes limit.</param>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Rollbar.DTOs.DtoBase"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>IReadOnlyCollection&lt;ValidationResult&gt; containing failed validation rules.</returns>
        </member>
        <member name="M:Rollbar.DTOs.DtoBase.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rollbar.DTOs.ErrorTelemetry">
            <summary>
            Implements error telemetry body
            </summary>
            <seealso cref="T:Rollbar.DTOs.LogTelemetry" />
        </member>
        <member name="M:Rollbar.DTOs.ErrorTelemetry.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.ErrorTelemetry"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Rollbar.DTOs.ErrorTelemetry.#ctor(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.ErrorTelemetry"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Exception">
            <summary>
            Models Rollbar Exception DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Exception"/> class.
            </summary>
            <param name="class">The class.</param>
        </member>
        <member name="M:Rollbar.DTOs.Exception.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Exception"/> class.
            </summary>
            <param name="class">The class.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rollbar.DTOs.Exception.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Exception" /> class.
            </summary>
            <param name="class">The class.</param>
            <param name="message">The message.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Rollbar.DTOs.Exception.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Exception"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Rollbar.DTOs.Exception.Class">
            <summary>
            Gets the class.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Exception.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Exception.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.ExtendableDtoBase">
            <summary>
            Implements an abstract base for defining expendable DTO types.
            These types of DTOs can be extended with arbitrary extra 
            key-value pairs as needed.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String, System.Object&gt;&gt;" />
            <seealso cref="!:System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;" />
        </member>
        <member name="F:Rollbar.DTOs.ExtendableDtoBase._keyedValues">
            <summary>
            The keyed values
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.ExtendableDtoBase"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.ExtendableDtoBase.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Rollbar.DTOs.ExtendableDtoBase.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> 
            containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.ExtendableDtoBase.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> 
            containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.ExtendableDtoBase.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.ExtendableDtoBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> 
            is read-only.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> 
            contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <returns>
            true if <paramref name="item">item</paramref> is found in 
            the <see cref="T:System.Collections.Generic.ICollection`1"></see>; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> 
            contains an element with the specified key.
            </summary>
            <param name="key">
            The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> 
            contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> 
            to an <see cref="T:System.Array"></see>, starting at a particular 
            <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of 
            the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. 
            The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Remove(System.String)">
            <summary>
            Removes the element with the specified key from 
            the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; 
            otherwise, false.  
            This method also returns false if <paramref name="key">key</paramref> was not found 
            in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from 
            the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <returns>
            true if <paramref name="item">item</paramref> was successfully removed from 
            the <see cref="T:System.Collections.Generic.ICollection`1"></see>; 
            otherwise, false. 
            This method also returns false if <paramref name="item">item</paramref> is not found 
            in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, the default value 
            for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            true if the object that implements 
            <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains 
            an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.Extend(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extends this instance with the specified extra key-value pairs.
            </summary>
            <param name="extraProperties">The extra key-value pairs.</param>
        </member>
        <member name="M:Rollbar.DTOs.ExtendableDtoBase.TruncateStrings(System.Text.Encoding,System.Int32)">
            <summary>
            Truncates the strings.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="stringBytesLimit">The string bytes limit.</param>
            <returns></returns>
        </member>
        <member name="T:Rollbar.DTOs.Frame">
            <summary>
            Models Rollbar Frame DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.Frame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Frame"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Frame.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Frame" /> class.
            </summary>
            <param name="frameString">The frame string.</param>
        </member>
        <member name="M:Rollbar.DTOs.Frame.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Frame"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:Rollbar.DTOs.Frame.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.LineNo">
            <summary>
            Gets or sets the line number.
            </summary>
            <value>
            The line number.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.ColNo">
            <summary>
            Gets or sets the column number.
            </summary>
            <value>
            The column number.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.Args">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Frame.Kwargs">
            <summary>
            Gets or sets the kwargs.
            </summary>
            <value>
            The kwargs.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.HostBase">
            <summary>
            Abstract base for creating host data elements (like Server or Client)
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="T:Rollbar.DTOs.HostBase.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.HostBase.ReservedProperties.Cpu">
            <summary>
            The CPU architecture
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.HostBase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.DTOs.HostBase"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.HostBase.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.HostBase"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.HostBase.Cpu">
            <summary>
            Gets or sets the CPU architecture (OPTIONAL).
            </summary>
            <value>
            The CPU architecture.
            </value>
            <remarks>
            Optional: cpu
            A string up to 255 characters
            </remarks>
        </member>
        <member name="T:Rollbar.DTOs.LogTelemetry">
            <summary>
            Implements log telemetry body.
            </summary>
            <seealso cref="T:Rollbar.DTOs.TelemetryBody" />
        </member>
        <member name="T:Rollbar.DTOs.LogTelemetry.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.LogTelemetry.ReservedProperties.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.LogTelemetry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.LogTelemetry"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rollbar.DTOs.LogTelemetry.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.LogTelemetry"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="M:Rollbar.DTOs.LogTelemetry.#ctor(Rollbar.DTOs.TelemetryType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.LogTelemetry"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rollbar.DTOs.LogTelemetry.#ctor(Rollbar.DTOs.TelemetryType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.LogTelemetry"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.LogTelemetry.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.ManualTelemetry">
            <summary>
            Implements manual/custom telemetry body
            </summary>
            <seealso cref="T:Rollbar.DTOs.TelemetryBody" />
        </member>
        <member name="M:Rollbar.DTOs.ManualTelemetry.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.ManualTelemetry"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Message">
            <summary>
            Models Rollbar Message DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="T:Rollbar.DTOs.Message.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Message.ReservedProperties.Body">
            <summary>
            The body
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Message.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Message"/> class.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:Rollbar.DTOs.Message.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Message"/> class.
            </summary>
            <param name="body">The body.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.Message.Body">
            <summary>
            Gets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="M:Rollbar.DTOs.Message.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Message.MessageValidationRule">
            <summary>
            Enum MessageValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Message.MessageValidationRule.BodyRequired">
            <summary>
            The body required
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.NavigationTelemetry">
            <summary>
            Implements navigation telemetry body.
            </summary>
            <seealso cref="T:Rollbar.DTOs.TelemetryBody" />
        </member>
        <member name="T:Rollbar.DTOs.NavigationTelemetry.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NavigationTelemetry.ReservedProperties.From">
            <summary>
            Navigation source.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NavigationTelemetry.ReservedProperties.To">
            <summary>
            Navigation destination.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.NavigationTelemetry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NavigationTelemetry"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Rollbar.DTOs.NavigationTelemetry.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NavigationTelemetry"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.NavigationTelemetry.From">
            <summary>
            Gets navigation-from.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NavigationTelemetry.To">
            <summary>
            Gets navigation-to.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.NetworkTelemetry">
            <summary>
            Implements network telemetry body.
            </summary>
            <seealso cref="T:Rollbar.DTOs.TelemetryBody" />
        </member>
        <member name="T:Rollbar.DTOs.NetworkTelemetry.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.Subtype">
            <summary>
            The subtype
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.Method">
            <summary>
            The method
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.Url">
            <summary>
            The URL
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.StatusCode">
            <summary>
            The status code
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.StartTimestamp">
            <summary>
            The start timestamp
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.NetworkTelemetry.ReservedProperties.EndTimestamp">
            <summary>
            The end timestamp
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
            <param name="eventStart">The event start.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
            <param name="eventStart">The event start.</param>
            <param name="eventEnd">The event end.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
            <param name="eventStart">The event start.</param>
            <param name="eventEnd">The event end.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
            <param name="eventStart">The event start.</param>
            <param name="eventEnd">The event end.</param>
            <param name="statusCode">The status code.</param>
            <param name="subtype">The subtype.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.NetworkTelemetry" /> class.
            </summary>
            <param name="method">The method.</param>
            <param name="url">The URL.</param>
            <param name="eventStart">The event start.</param>
            <param name="eventEnd">The event end.</param>
            <param name="statusCode">The status code.</param>
            <param name="subtype">The subtype.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="M:Rollbar.DTOs.NetworkTelemetry.FinalizeEvent">
            <summary>
            Finalizes the event.
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.Subtype">
            <summary>
            Gets the subtype.
            </summary>
            <value>
            The subtype.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.Method">
            <summary>
            Gets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.StartTimestamp">
            <summary>
            Gets the start timestamp.
            </summary>
            <value>
            The start timestamp.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.NetworkTelemetry.EndTimestamp">
            <summary>
            Gets the end timestamp.
            </summary>
            <value>
            The end timestamp.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.Notifier">
            <summary>
            Class Notifier.
            Implements the <see cref="T:Rollbar.DTOs.ExtendableDtoBase" />
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="T:Rollbar.DTOs.Notifier.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Notifier.ReservedProperties.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Notifier.ReservedProperties.Version">
            <summary>
            The version
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Notifier.ReservedProperties.Configuration">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Notifier.notifierName">
            <summary>
            The notifier name
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Notifier.NotifierAssemblyVersion">
            <summary>
            The notifier assembly version
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Notifier.DetectNotifierAssemblyVersion">
            <summary>
            Detects the notifier assembly version.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Rollbar.DTOs.Notifier.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rollbar.DTOs.Notifier.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Rollbar.DTOs.Notifier.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:Rollbar.DTOs.Notifier.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Rollbar.DTOs.Notifier"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Notifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Notifier"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Notifier.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Notifier"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Payload">
            <summary>
            Models Rollbar Payload DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="F:Rollbar.DTOs.Payload._timeStamp">
            <summary>
            The time stamp of this instance
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Payload._payloadBundle">
            <summary>
            The payload bundle
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Payload.#ctor(System.String,Rollbar.DTOs.Data)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Payload" /> class.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Rollbar.DTOs.Payload.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="P:Rollbar.DTOs.Payload.AccessToken">
            <summary>
            Gets the access token (REQUIRED).
            </summary>
            <value>
            The access token.
            </value>
            <remarks>
            Required: access_token
            An access token with scope "post_server_item" or "post_client_item".
            A post_client_item token must be used if the "platform" is "browser", "android", "ios", "flash", or "client"
            A post_server_item token should be used for other platforms.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Payload.Data">
            <summary>
            Gets the data (REQUIRED).
            </summary>
            <value>
            The data.
            </value>
            <remarks>
            Required: data
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Payload.PayloadBundle">
            <summary>
            Gets or sets the payload bundle.
            </summary>
            <value>The payload bundle.</value>
        </member>
        <member name="M:Rollbar.DTOs.Payload.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Payload.PayloadValidationRule">
            <summary>
            Enum PayloadValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Payload.PayloadValidationRule.AccessTokenRequired">
            <summary>
            The access token required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Payload.PayloadValidationRule.DataRequired">
            <summary>
            The data required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Payload.PayloadValidationRule.ValidDataExpected">
            <summary>
            The valid data expected
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.Person">
            <summary>
            Models Rollbar Person DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
            <remarks>
            Optional: person
            The user affected by this event. Will be indexed by ID, username, and email.
            People are stored in Rollbar keyed by ID. If you send a multiple different usernames/emails for the
            same ID, the last received values will overwrite earlier ones.
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Person.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Person"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Person.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Person"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <remarks>
            Required: id
            A string up to 40 characters identifying this user in your system.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Person.Id">
            <summary>
            Gets or sets the identifier (REQUIRED).
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Person.UserName">
            <summary>
            Gets or sets the username (OPTIONAL).
            </summary>
            <value>
            The name of the user.
            </value>
            <remarks>
            Optional: username
            A string up to 255 characters
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Person.Email">
            <summary>
            Gets or sets the email (OPTIONAL).
            </summary>
            <value>
            The email.
            </value>
            <remarks>
            Optional: email
            A string up to 255 characters
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Person.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Person.PersonValidationRule">
            <summary>
            Enum PersonValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Person.PersonValidationRule.ValidIdRequired">
            <summary>
            The valid identifier required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Person.PersonValidationRule.IdMaxLengthLimit">
            <summary>
            The identifier maximum length limit
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Person.PersonValidationRule.UserNameMaxLengthLimit">
            <summary>
            The user name maximum length limit
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Person.PersonValidationRule.EmailMaxLengthLimit">
            <summary>
            The email maximum length limit
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.Request">
            <summary>
            Models Rollbar HTTP Request DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
            <remarks>
            Optional: request
            Data about the request this event occurred in.
            Can contain any arbitrary keys.
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Request.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Request"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Request.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Request"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Request.ReservedProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.Url">
            <summary>
            The URL
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.Method">
            <summary>
            The method
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.Headers">
            <summary>
            The headers
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.Params">
            <summary>
            The parameters
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.GetParams">
            <summary>
            The get-parameters
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.QueryString">
            <summary>
            The query string
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.PostParams">
            <summary>
            The post-parameters
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.PostBody">
            <summary>
            The post body
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Request.ReservedProperties.UserIp">
            <summary>
            The user IP
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.Request.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
            <remarks>
            url: full URL where this event occurred
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>
            The method.
            </value>
            <remarks>
            method: the request method
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.Headers">
            <summary>
            Gets or sets the HTTP request headers.
            </summary>
            <value>
            The headers.
            </value>
            <remarks>
            headers: object containing the request headers
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.Params">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
            <remarks>
            params: any routing parameters
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.GetParams">
            <summary>
            Gets or sets the GET-parameters.
            </summary>
            <value>
            The GET-parameters.
            </value>
            <remarks>
            GET: query string params
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.QueryString">
            <summary>
            Gets or sets the query string.
            </summary>
            <value>
            The query string.
            </value>
            <remarks>
            query_string: the raw query string
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.PostParams">
            <summary>
            Gets or sets the post-parameters.
            </summary>
            <value>
            The post-parameters.
            </value>
            <remarks>
            POST: POST params
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.PostBody">
            <summary>
            Gets or sets the post-body.
            </summary>
            <value>
            The post-body.
            </value>
            <remarks>
            body: the raw POST body
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Request.UserIp">
            <summary>
            Gets or sets the user IP.
            </summary>
            <value>
            The user IP.
            </value>
            <remarks>
            user_ip: the user's IP address as a string.
            Can also be the special value "$remote_ip", which will be replaced with the source IP of the API request.
            Will be indexed, as long as it is a valid IPv4 address.
            </remarks>
        </member>
        <member name="T:Rollbar.DTOs.Response">
            <summary>
            Class Response.
            Implements the <see cref="T:Rollbar.DTOs.ExtendableDtoBase" />
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="T:Rollbar.DTOs.Response.ReservedProperties">
            <summary>
            Class ReservedProperties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Response.ReservedProperties.StatusCode">
            <summary>
            The status code
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Response.ReservedProperties.Headers">
            <summary>
            The headers
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Response.ReservedProperties.Body">
            <summary>
            The body
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Response"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Response.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Response"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.Response.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Rollbar.DTOs.Response.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Rollbar.DTOs.Response.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:Rollbar.DTOs.Server">
            <summary>
            Models Rollbar Server DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
            <remarks>
            Optional: server
            Data about the server related to this event.
            Can contain any arbitrary keys.
            </remarks>
        </member>
        <member name="M:Rollbar.DTOs.Server.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Server"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Server.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Server"/> class.
            </summary>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="T:Rollbar.DTOs.Server.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Server.ReservedProperties.Host">
            <summary>
            The host
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Server.ReservedProperties.Root">
            <summary>
            The root
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Server.ReservedProperties.Branch">
            <summary>
            The branch
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Server.ReservedProperties.CodeVersion">
            <summary>
            The code version
            </summary>
        </member>
        <member name="P:Rollbar.DTOs.Server.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>
            The host.
            </value>
            <remarks>
            host: The server hostname. Will be indexed.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Server.Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>
            The root.
            </value>
            <remarks>
            root: Path to the application code root, not including the final slash.
            Used to collapse non-project code when displaying tracebacks.
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Server.Branch">
            <summary>
            Gets or sets the branch.
            </summary>
            <value>
            The branch.
            </value>
            <remarks>
            branch: Name of the checked-out source control branch. Defaults to "master"
            </remarks>
        </member>
        <member name="P:Rollbar.DTOs.Server.CodeVersion">
            <summary>
            Gets or sets the code version (OPTIONAL).
            </summary>
            <value>
            The code version.
            </value>
            <remarks>
            Optional: code_version
            String describing the running code version on the server
            </remarks>
        </member>
        <member name="T:Rollbar.DTOs.Telemetry">
            <summary>
            Implements Telemetry DTO
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="T:Rollbar.DTOs.Telemetry.ReservedProperties">
            <summary>
            The DTO reserved properties.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.ReservedProperties.Level">
            <summary>
            The level
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.ReservedProperties.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.ReservedProperties.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.ReservedProperties.Timestamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.ReservedProperties.Body">
            <summary>
            The body
            </summary>
        </member>
        <member name="M:Rollbar.DTOs.Telemetry.#ctor(Rollbar.DTOs.TelemetrySource,Rollbar.DTOs.TelemetryLevel,Rollbar.DTOs.TelemetryBody)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Telemetry"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Rollbar.DTOs.Telemetry.#ctor(Rollbar.DTOs.TelemetrySource,Rollbar.DTOs.TelemetryLevel,Rollbar.DTOs.TelemetryBody,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Telemetry"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
            <param name="body">The body.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.Telemetry.Level">
            <summary>
            Gets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Telemetry.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Telemetry.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Telemetry.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Telemetry.Body">
            <summary>
            Gets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="M:Rollbar.DTOs.Telemetry.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.DTOs.Telemetry.TelemetryValidationRule">
            <summary>
            Enum TelemetryValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.TelemetryValidationRule.BodyRequired">
            <summary>
            The body required
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.Telemetry.TelemetryValidationRule.ValidBodyExpected">
            <summary>
            The valid body expected
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.TelemetryBody">
            <summary>
            Base abstraction for implementing telemetry concrete bodies.
            </summary>
            <seealso cref="T:Rollbar.DTOs.ExtendableDtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.TelemetryBody.#ctor(Rollbar.DTOs.TelemetryType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.TelemetryBody"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="P:Rollbar.DTOs.TelemetryBody.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Rollbar.DTOs.TelemetryLevel">
            <summary>
            Enumerates supported telemetry levels.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryLevel.Critical">
            <summary>
            The critical
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryLevel.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryLevel.Warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryLevel.Info">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryLevel.Debug">
            <summary>
            The debug
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.TelemetrySource">
            <summary>
            Enumerates supported telemetry sources.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetrySource.Server">
            <summary>
            The server
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetrySource.Client">
            <summary>
            The client
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.TelemetryType">
            <summary>
            Enumerates supported telemetry types.
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Network">
            <summary>
            The network
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Dom">
            <summary>
            The DOM
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Navigation">
            <summary>
            The navigation
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:Rollbar.DTOs.TelemetryType.Manual">
            <summary>
            The manual
            </summary>
        </member>
        <member name="T:Rollbar.DTOs.Trace">
            <summary>
            Models Rollbar Trace DTO.
            </summary>
            <seealso cref="T:Rollbar.DTOs.DtoBase" />
        </member>
        <member name="M:Rollbar.DTOs.Trace.#ctor(Rollbar.DTOs.Frame[],Rollbar.DTOs.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Trace"/> class.
            </summary>
            <param name="frames">The frames.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Rollbar.DTOs.Trace.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DTOs.Trace"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Rollbar.DTOs.Trace.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>
            The frames.
            </value>
        </member>
        <member name="P:Rollbar.DTOs.Trace.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Rollbar.ErrorLevel">
            <summary>
            Lists all the supported Rollbar error levels.
            The members are ordered from least to most significant.
            </summary>
        </member>
        <member name="F:Rollbar.ErrorLevel.Debug">
            <summary>
            The debug log level.
            </summary>
        </member>
        <member name="F:Rollbar.ErrorLevel.Info">
            <summary>
            The informational log level.
            </summary>
        </member>
        <member name="F:Rollbar.ErrorLevel.Warning">
            <summary>
            The warning log level.
            </summary>
        </member>
        <member name="F:Rollbar.ErrorLevel.Error">
            <summary>
            The error log level.
            </summary>
        </member>
        <member name="F:Rollbar.ErrorLevel.Critical">
            <summary>
            The critical error/log level.
            </summary>
        </member>
        <member name="T:Rollbar.ILogger">
            <summary>
            
            Defines ILogger interface.
            
            NOTE: 
            
            All the logging methods of this interface imply asynchronous/non-blocking implementation.
            However, the interface defines the method (ILogger AsBlockingLogger(TimeSpan timeout))
            that returns a synchronous implementation of ILogger.
            This approach allows for easier code refactoring when switching between 
            asynchronous and synchronous uses of the logger.
            
            Normally, you would want to use asynchronous logging since it has virtually no instrumentation 
            overhead on your application execution performance at runtime. It has "fire and forget"
            approach to logging. However, in some specific situations, for example, while logging right before 
            exiting an application, you may want to use it synchronously so that the application
            does not quit before the logging completes.
            
            </summary>
        </member>
        <member name="M:Rollbar.ILogger.AsBlockingLogger(System.TimeSpan)">
            <summary>
            Returns blocking/synchronous implementation of this ILogger.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>
            Blocking (fully synchronous) instance of an ILogger. 
            It either completes logging calls within the specified timeout
            or throws a TimeoutException.
            </returns>
        </member>
        <member name="M:Rollbar.ILogger.Log(Rollbar.DTOs.Data)">
            <summary>
            Logs the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Log(Rollbar.ErrorLevel,System.Object)">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Critical(System.Object)">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Error(System.Object)">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Warning(System.Object)">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Info(System.Object)">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Debug(System.Object)">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Log(Rollbar.ErrorLevel,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Critical(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Error(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Warning(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Info(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.ILogger.Debug(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="T:Rollbar.AccessTokenQueuesMetadata">
            <summary>
            Class AccessTokenQueuesMetadata.
            Implements the <see cref="T:Rollbar.IPayloadQueuesRegistry" /> with thread-safety.
            </summary>
            <seealso cref="T:Rollbar.IPayloadQueuesRegistry" />
        </member>
        <member name="F:Rollbar.AccessTokenQueuesMetadata._queues">
            <summary>
            The queues
            </summary>
        </member>
        <member name="M:Rollbar.AccessTokenQueuesMetadata.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.AccessTokenQueuesMetadata"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.AccessTokenQueuesMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.AccessTokenQueuesMetadata"/> class.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="P:Rollbar.AccessTokenQueuesMetadata.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Rollbar.AccessTokenQueuesMetadata.NextTimeTokenUsage">
            <summary>
            Gets the next time token usage.
            </summary>
            <value>
            The next time token usage.
            </value>
            <remarks>
            This property, when has a value, places a restriction on the token usage 
            until or past the time specified by the property value.
            </remarks>
        </member>
        <member name="M:Rollbar.AccessTokenQueuesMetadata.UpdateNextTimeTokenUsage(Rollbar.RollbarRateLimit)">
            <summary>
            Updates the next time token usage.
            </summary>
            <param name="rollbarRateLimit">The rollbar rate limit.</param>
        </member>
        <member name="P:Rollbar.AccessTokenQueuesMetadata.IsTransmissionSuspended">
            <summary>
            Gets a value indicating whether this instance is transmission suspended.
            </summary>
            <value><c>true</c> if this instance is transmission suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rollbar.AccessTokenQueuesMetadata.Register(Rollbar.PayloadQueue)">
            <summary>
            Registers the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns><c>true</c> if the queue was actually reqistered during this call, <c>false</c> if the queue was already registered prior to this call.</returns>
        </member>
        <member name="M:Rollbar.AccessTokenQueuesMetadata.Unregister(Rollbar.PayloadQueue)">
            <summary>
            Unregisters the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns><c>true</c> if the queue was actually unregistered, <c>false</c> if the queue was not even registered in the first place.</returns>
        </member>
        <member name="P:Rollbar.AccessTokenQueuesMetadata.PayloadQueues">
            <summary>
            Gets the payload queues.
            </summary>
            <value>The payload queues.</value>
        </member>
        <member name="P:Rollbar.AccessTokenQueuesMetadata.PayloadQueuesCount">
            <summary>
            Gets the payload queues count.
            </summary>
            <value>The payload queues count.</value>
        </member>
        <member name="T:Rollbar.ConnectivityMonitor">
            <summary>
            Class ConnectivityMonitor.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Rollbar.ConnectivityMonitor.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.ConnectivityMonitor"/> class from being created.
            </summary>
        </member>
        <member name="T:Rollbar.ConnectivityMonitor.NestedSingleInstance">
            <summary>
            Class NestedSingleInstance. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.NestedSingleInstance.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.ConnectivityMonitor.NestedSingleInstance" /> class from being created.
            </summary>
        </member>
        <member name="F:Rollbar.ConnectivityMonitor.NestedSingleInstance.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:Rollbar.ConnectivityMonitor.IsConnectivityOn">
            <summary>
            Gets a value indicating whether this instance is connectivity on.
            </summary>
            <value><c>true</c> if this instance is connectivity on; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.OverrideAsOffline">
            <summary>
            Overrides as offline.
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.Disable">
            <summary>
            Disables this instance.
            </summary>
        </member>
        <member name="P:Rollbar.ConnectivityMonitor.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.CheckConnectivityStatus(System.Object)">
            <summary>
            Checks the connectivity status.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.DoCheckConnectivityStatus">
            <summary>
            Does the check connectivity status.
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.AdoptOfflineMonitoringInterval">
            <summary>
            Adopts the offline monitoring interval.
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.ResetMonitoringInterval">
            <summary>
            Resets the monitoring interval.
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.TestApiServer">
            <summary>
            Tests the internet ping.
            NOTE: this function will always retun 'false' when executed
            behind a web proxy server requiring configuration custom settings!!!
            </summary>
            <returns><c>true</c> if the test succeeded, <c>false</c> otherwise.</returns>
            <remarks>https://stackoverflow.com/questions/35066981/how-to-use-proxy-with-tcpclient-connectasync</remarks>
        </member>
        <member name="F:Rollbar.ConnectivityMonitor._disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rollbar.ConnectivityMonitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>This code added to correctly implement the disposable pattern.</remarks>
        </member>
        <member name="T:Rollbar.InternalRollbarError">
            <summary>
            Enum InternalRollbarError
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.GeneralError">
            <summary>
            The general error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.ConfigurationError">
            <summary>
            The configuration error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PackagingError">
            <summary>
            The packaging error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.BundlingError">
            <summary>
            The bundling error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.EnqueuingError">
            <summary>
            The enqueuing error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.DequeuingError">
            <summary>
            The dequeuing error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadCheckIgnoreError">
            <summary>
            The payload check ignore error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadTransformError">
            <summary>
            The payload transform error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadTruncationError">
            <summary>
            The payload truncation error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadValidationError">
            <summary>
            The payload validation error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadSerializationError">
            <summary>
            The payload serialization error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadScrubbingError">
            <summary>
            The payload scrubbing error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PersistentStoreContextError">
            <summary>
            The persistent store context error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PersistentPayloadRecordError">
            <summary>
            The persistent payload record error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PersistentPayloadRecordRepostError">
            <summary>
            The persistent payload record repost error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.QueueControllerError">
            <summary>
            The queue controller error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.PayloadPostError">
            <summary>
            The payload post error
            </summary>
        </member>
        <member name="F:Rollbar.InternalRollbarError.ConnectivityMonitorError">
            <summary>
            The connectivity monitor error
            </summary>
        </member>
        <member name="M:Rollbar.IPayloadQueue.Enqueue(Rollbar.PayloadBundle)">
            <summary>
            Enqueues the specified payload.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:Rollbar.IPayloadQueue.Peek">
            <summary>
            Peeks this instance.
            </summary>
            <returns>PayloadBundle, if any, otherwise null.</returns>
        </member>
        <member name="M:Rollbar.IPayloadQueue.Dequeue">
            <summary>
            Dequeues this instance.
            </summary>
            <returns>PayloadBundle, if any, otherwise null.</returns>
        </member>
        <member name="M:Rollbar.IPayloadQueue.GetPayloadCount">
            <summary>
            Gets the payload count.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.IPayloadQueue.Flush">
            <summary>
            Flushes this instance.
            </summary>
            <returns>IEnumerable&lt;PayloadBundle&gt; flushed payload bundles.</returns>
        </member>
        <member name="M:Rollbar.IPayloadQueue.GetItemsToPersist">
            <summary>
            Gets the items to persist.
            </summary>
            <returns>PayloadBundle[].</returns>
        </member>
        <member name="P:Rollbar.IPayloadQueue.AccessTokenQueuesMetadata">
            <summary>
            Gets or sets the access token queues metadata.
            </summary>
            <value>The access token queues metadata.</value>
        </member>
        <member name="P:Rollbar.IPayloadQueue.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Rollbar.IPayloadQueue.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="M:Rollbar.IPayloadQueue.UpdateClient(Rollbar.RollbarClient)">
            <summary>
            Updates the client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="P:Rollbar.IPayloadQueue.NextDequeueTime">
            <summary>
            Gets or sets the next dequeue time.
            </summary>
            <value>The next dequeue time.</value>
        </member>
        <member name="M:Rollbar.IPayloadQueue.Release">
            <summary>
            Releases this instance.
            </summary>
        </member>
        <member name="P:Rollbar.IPayloadQueue.IsReleased">
            <summary>
            Gets a value indicating whether this instance is released.
            </summary>
            <value><c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Rollbar.IPayloadQueuesRegistry">
            <summary>
            Interface IPayloadQueuesRegistry
            </summary>
        </member>
        <member name="M:Rollbar.IPayloadQueuesRegistry.Register(Rollbar.PayloadQueue)">
            <summary>
            Registers the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns><c>true</c> if the queue was actually reqistered during this call, <c>false</c> if the queue was already registered prior to this call.</returns>
        </member>
        <member name="M:Rollbar.IPayloadQueuesRegistry.Unregister(Rollbar.PayloadQueue)">
            <summary>
            Unregisters the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns><c>true</c> if the queue was actually unregistered, <c>false</c> if the queue was not even registered in the first place.</returns>
        </member>
        <member name="P:Rollbar.IPayloadQueuesRegistry.PayloadQueues">
            <summary>
            Gets the payload queues.
            </summary>
            <value>The payload queues.</value>
        </member>
        <member name="P:Rollbar.IPayloadQueuesRegistry.PayloadQueuesCount">
            <summary>
            Gets the payload queues count.
            </summary>
            <value>The payload queues count.</value>
        </member>
        <member name="T:Rollbar.PayloadBundle">
            <summary>
            Class PayloadBundle.
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._timeStamp">
            <summary>
            The time stamp
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._payloadObject">
            <summary>
            The payload object
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._level">
            <summary>
            The level
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._rollbarLogger">
            <summary>
            The rollbar logger
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._timeoutAt">
            <summary>
            The timeout at
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._signal">
            <summary>
            The signal
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._ignorable">
            <summary>
            The ignorable
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._rollbarPackage">
            <summary>
            The rollbar package
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._payload">
            <summary>
            The payload
            </summary>
        </member>
        <member name="F:Rollbar.PayloadBundle._asHttpContentToSend">
            <summary>
            As HTTP content to send
            </summary>
        </member>
        <member name="P:Rollbar.PayloadBundle.TimeoutAt">
            <summary>
            Gets the timeout at.
            </summary>
            <value>The timeout at.</value>
        </member>
        <member name="P:Rollbar.PayloadBundle.Signal">
            <summary>
            Gets the signal.
            </summary>
            <value>The signal.</value>
        </member>
        <member name="P:Rollbar.PayloadBundle.AsHttpContentToSend">
            <summary>
            Gets or sets as HTTP content to send.
            </summary>
            <value>As HTTP content to send.</value>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadBundle"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,Rollbar.IRollbarPackage,Rollbar.ErrorLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadPackage">The payload package.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,Rollbar.IRollbarPackage,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadPackage">The payload package.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,Rollbar.IRollbarPackage,Rollbar.ErrorLevel,System.Nullable{System.DateTime},System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadPackage">The payload package.</param>
            <param name="level">The level.</param>
            <param name="timeoutAt">The timeout at.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,Rollbar.IRollbarPackage,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.DateTime},System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadPackage">The payload package.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
            <param name="timeoutAt">The timeout at.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,System.Object,Rollbar.ErrorLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadObject">The payload object.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,System.Object,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadObject">The payload object.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,System.Object,Rollbar.ErrorLevel,System.Nullable{System.DateTime},System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadObject">The payload object.</param>
            <param name="level">The level.</param>
            <param name="timeoutAt">The timeout at.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:Rollbar.PayloadBundle.#ctor(Rollbar.RollbarLogger,System.Object,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.DateTime},System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadBundle" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="payloadObject">The payload object.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
            <param name="timeoutAt">The timeout at.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="P:Rollbar.PayloadBundle.Ignorable">
            <summary>
            Gets a value indicating whether this <see cref="T:Rollbar.PayloadBundle"/> is ignorable.
            </summary>
            <value><c>true</c> if ignorable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rollbar.PayloadBundle.GetPayload">
            <summary>
            Gets the payload.
            </summary>
            <returns>Payload.</returns>
        </member>
        <member name="M:Rollbar.PayloadBundle.GetPayloadData">
            <summary>
            Gets the payload data.
            </summary>
            <returns>Data.</returns>
        </member>
        <member name="M:Rollbar.PayloadBundle.GetRollbarPackage">
            <summary>
            Gets the rollbar package.
            </summary>
            <returns>IRollbarPackage.</returns>
        </member>
        <member name="M:Rollbar.PayloadBundle.CreateRollbarPackage(System.Object)">
            <summary>
            Creates the rollbar package.
            </summary>
            <returns>IRollbarPackage.</returns>
        </member>
        <member name="M:Rollbar.PayloadBundle.ApplyCustomKeyValueDecorator(Rollbar.IRollbarPackage)">
            <summary>
            Applies the custom key value decorator.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <returns>IRollbarPackage.</returns>
        </member>
        <member name="M:Rollbar.PayloadBundle.ApplyConfigPackageDecorator(Rollbar.IRollbarPackage)">
            <summary>
            Applies the configuration package decorator.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <returns>IRollbarPackage.</returns>
        </member>
        <member name="P:Rollbar.PayloadBundle.Exceptions">
            <summary>
            The bundle's package-related exceptions (if any) that happened during the package lifetime.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadBundle.Register(System.Exception)">
            <summary>
            Registers the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:Rollbar.PayloadBundle._bundleErrorCollector">
            <summary>
            The bundle error collector.
            
            NOTE: it is intended to be referenced directly only by the following methods: 
            GetRollbarPackage() and GetPrimaryErrorCollector() !!!
            </summary>
        </member>
        <member name="T:Rollbar.PayloadQueue">
            <summary>
            Class PayloadQueue.
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._syncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._queue">
            <summary>
            The queue
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._client">
            <summary>
            The client
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._isReleased">
            <summary>
            The is released
            </summary>
        </member>
        <member name="F:Rollbar.PayloadQueue._accessTokenQueuesMetadata">
            <summary>
            The access token queues metadata
            </summary>
        </member>
        <member name="M:Rollbar.PayloadQueue.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadQueue"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadQueue.#ctor(Rollbar.RollbarLogger,Rollbar.RollbarClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadQueue"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="client">The client.</param>
        </member>
        <member name="M:Rollbar.PayloadQueue.Release">
            <summary>
            Releases this instance.
            </summary>
        </member>
        <member name="P:Rollbar.PayloadQueue.IsReleased">
            <summary>
            Gets a value indicating whether this instance is released.
            </summary>
            <value><c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.PayloadQueue.NextDequeueTime">
            <summary>
            Gets or sets the next dequeue time.
            </summary>
            <value>The next dequeue time.</value>
        </member>
        <member name="P:Rollbar.PayloadQueue.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Rollbar.PayloadQueue.UpdateClient(Rollbar.RollbarClient)">
            <summary>
            Updates the client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="P:Rollbar.PayloadQueue.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="M:Rollbar.PayloadQueue.Enqueue(Rollbar.PayloadBundle)">
            <summary>
            Enqueues the specified payload.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:Rollbar.PayloadQueue.Peek">
            <summary>
            Peeks this instance.
            </summary>
            <returns>PayloadBundle, if any, otherwise null.</returns>
        </member>
        <member name="M:Rollbar.PayloadQueue.Dequeue">
            <summary>
            Dequeues this instance.
            </summary>
            <returns>PayloadBundle, if any, otherwise null.</returns>
        </member>
        <member name="M:Rollbar.PayloadQueue.GetPayloadCount">
            <summary>
            Gets the payload count.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.PayloadQueue.Flush">
            <summary>
            Flushes this instance.
            </summary>
            <returns>IEnumerable&lt;PayloadBundle&gt; flushed payload bundles.</returns>
        </member>
        <member name="P:Rollbar.PayloadQueue.AccessTokenQueuesMetadata">
            <summary>
            Gets or sets the access token queues metadata.
            </summary>
            <value>The access token queues metadata.</value>
        </member>
        <member name="M:Rollbar.PayloadQueue.GetItemsToPersist">
            <summary>
            Gets the items to persist.
            </summary>
            <returns>PayloadBundle[].</returns>
        </member>
        <member name="T:Rollbar.RollbarClient">
            <summary>
            Client for accessing the Rollbar API
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._rollbarLogger">
            <summary>
            The rollbar logger
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._httpClient">
            <summary>
            The HTTP client
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._expectedPostToApiTimeout">
            <summary>
            The expected post to API timeout
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._payloadPostUri">
            <summary>
            The payload post URI
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._payloadTruncationStrategy">
            <summary>
            The payload truncation strategy
            </summary>
        </member>
        <member name="F:Rollbar.RollbarClient._payloadScrubber">
            <summary>
            The payload scrubber
            </summary>
        </member>
        <member name="M:Rollbar.RollbarClient.#ctor(Rollbar.RollbarLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarClient" /> class.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
        </member>
        <member name="M:Rollbar.RollbarClient.#ctor(Rollbar.IRollbarConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarClient"/> class.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
        </member>
        <member name="P:Rollbar.RollbarClient.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:Rollbar.RollbarClient.EnsureHttpContentToSend(Rollbar.PayloadBundle)">
            <summary>
            Ensures the HTTP content to send.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <returns><c>true</c> if succeeds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.PostAsJson(Rollbar.PayloadBundle)">
            <summary>
            Posts as json.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <returns>RollbarResponse.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.PostAsJson(System.String,System.String)">
            <summary>
            Posts as json.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="jsonContent">Content of the json.</param>
            <returns>RollbarResponse.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.PostAsJsonAsync(Rollbar.PayloadBundle,System.Threading.CancellationToken)">
            <summary>
            post as json as an asynchronous operation.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;RollbarResponse&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.PostAsJsonAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            post as json as an asynchronous operation.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="jsonContent">Content of the json.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;RollbarResponse&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.PostAsJsonAsync(System.String,System.Net.Http.StringContent,System.Threading.CancellationToken)">
            <summary>
            post as json as an asynchronous operation.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="jsonContent">Content of the json.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;RollbarResponse&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.SerializePayloadAsJsonString(Rollbar.PayloadBundle)">
            <summary>
            Serializes the payload as json string.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.TruncatePayload(Rollbar.PayloadBundle)">
            <summary>
            Truncates the payload.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.ScrubPayload(System.String)">
            <summary>
            Scrubs the payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.ScrubHttpMessages(Rollbar.PayloadBundle)">
            <summary>
            Scrubs the HTTP messages.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.RollbarClient.ScrubHttpMessageBodyContentString(System.String,System.String,System.String,System.String[],System.String[])">
            <summary>
            Scrubs the HTTP message body content string.
            </summary>
            <param name="body">The body.</param>
            <param name="contentTypeHeaderValue">The content type header value.</param>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.RollbarErrorUtility">
            <summary>
            Class RollbarErrorUtility.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarErrorUtility.Report(Rollbar.RollbarLogger,System.Object,Rollbar.InternalRollbarError,System.String,System.Exception,Rollbar.Common.IErrorCollector)">
            <summary>
            Reports the specified rollbar logger.
            </summary>
            <param name="rollbarLogger">The rollbar logger.</param>
            <param name="dataObject">The data object.</param>
            <param name="rollbarError">The rollbar error.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="errorCollector">The error collector.</param>
        </member>
        <member name="T:Rollbar.RollbarLoggerBlockingWrapper">
            <summary>
            
            Implements disposable implementation of IRollbar.
            
            All the logging methods implemented in synchronous "blocking" fashion.
            Hence, the payload is either delivered or a method timed out when
            the methods return.
            
            </summary>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.AsBlockingLogger(System.TimeSpan)">
            <summary>
            Returns blocking/synchronous implementation of this ILogger.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Log(Rollbar.ErrorLevel,System.Object)">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Critical(System.Object)">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Error(System.Object)">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Warning(System.Object)">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Info(System.Object)">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Debug(System.Object)">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Log(Rollbar.ErrorLevel,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Critical(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Error(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Warning(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Info(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Debug(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLoggerBlockingWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This code added to correctly implement the disposable pattern.
            </remarks>
        </member>
        <member name="T:Rollbar.RollbarPackageBase">
            <summary>
            Class RollbarPackageBase.
            Implements the <see cref="T:Rollbar.IRollbarPackage" />
            Implements the <see cref="T:Rollbar.Common.IErrorCollector" />
            </summary>
            <seealso cref="T:Rollbar.IRollbarPackage" />
            <seealso cref="T:Rollbar.Common.IErrorCollector" />
        </member>
        <member name="F:Rollbar.RollbarPackageBase._mustApplySynchronously">
            <summary>
            The must apply synchronously
            </summary>
        </member>
        <member name="F:Rollbar.RollbarPackageBase._rollbarData">
            <summary>
            The rollbar data resulted from this package instance.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarPackageBase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarPackageBase"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarPackageBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarPackageBase"/> class.
            </summary>
            <param name="mustApplySynchronously">if set to <c>true</c> the strategy must be apply synchronously.</param>
        </member>
        <member name="M:Rollbar.RollbarPackageBase.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="P:Rollbar.RollbarPackageBase.MustApplySynchronously">
            <summary>
            Gets a value indicating whether to package synchronously (within the logging method call).
            The logging methods will return very quickly when this flag is off. In the off state,
            the packaging strategy will be invoked during payload transmission on a dedicated worker thread.
            </summary>
            <value><c>true</c> if needs to package synchronously; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.RollbarPackageBase.RollbarData">
            <summary>
            Gets the rollbar data packaged by this strategy (if any).
            </summary>
            <value>The rollbar data.</value>
        </member>
        <member name="M:Rollbar.RollbarPackageBase.PackageAsRollbarData">
            <summary>
            Packages as rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="P:Rollbar.RollbarPackageBase.Exceptions">
            <summary>
            The package-related exceptions (if any) that happened during the package lifetime.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:Rollbar.RollbarPackageBase.Register(System.Exception)">
            <summary>
            Registers the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rollbar.RollbarPackageDecoratorBase">
            <summary>
            Class RollbarPackageDecoratorBase.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            Implements the <see cref="T:Rollbar.IRollbarPackage" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
            <seealso cref="T:Rollbar.IRollbarPackage" />
        </member>
        <member name="F:Rollbar.RollbarPackageDecoratorBase._packageToDecorate">
            <summary>
            The strategy to decorate
            </summary>
        </member>
        <member name="F:Rollbar.RollbarPackageDecoratorBase._decoratorWasAlreadyApplied">
            <summary>
            The decorator was already applied
            </summary>
        </member>
        <member name="M:Rollbar.RollbarPackageDecoratorBase.#ctor(Rollbar.IRollbarPackage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarPackageDecoratorBase" /> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> the strategy must be apply synchronously.</param>
        </member>
        <member name="M:Rollbar.RollbarPackageDecoratorBase.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="M:Rollbar.RollbarPackageDecoratorBase.Decorate(Rollbar.DTOs.Data)">
            <summary>
            Decorates the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
        </member>
        <member name="M:Rollbar.RollbarPackageDecoratorBase.PackageAsRollbarData">
            <summary>
            Packages as rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="P:Rollbar.RollbarPackageDecoratorBase.MustApplySynchronously">
            <summary>
            Gets a value indicating whether to package synchronously (within the logging method call).
            The logging methods will return very quickly when this flag is off. In the off state,
            the packaging strategy will be invoked during payload transmission on a dedicated worker thread.
            </summary>
            <value><c>true</c> if needs to package synchronously; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.RollbarPackageDecoratorBase.RollbarData">
            <summary>
            Gets the rollbar data packaged by this strategy (if any).
            </summary>
            <value>The rollbar data.</value>
        </member>
        <member name="T:Rollbar.RollbarRateLimit">
            <summary>
            Class RollbarRateLimit.
            </summary>
        </member>
        <member name="T:Rollbar.RollbarRateLimit.RollbarRateLimitHeaders">
            <summary>
            Class RollbarTateLimitHeaders.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.RollbarRateLimitHeaders.Limit">
            <summary>
            The limit
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.RollbarRateLimitHeaders.Remaining">
            <summary>
            The remaining count until the limit is reached
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.RollbarRateLimitHeaders.Reset">
            <summary>
            The reset time for the current limit window
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.RollbarRateLimitHeaders.RemainingSeconds">
            <summary>
            The remaining seconds of the current limit window
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.WindowLimit">
            <summary>
            The window limit
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.WindowEnd">
            <summary>
            The current limit window end time
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.WindowRemainingTimeSpan">
            <summary>
            The window remaining time span
            </summary>
        </member>
        <member name="F:Rollbar.RollbarRateLimit.WindowRemaining">
            <summary>
            The window remaining count until the limit is reached
            </summary>
        </member>
        <member name="P:Rollbar.RollbarRateLimit.ClientSuspensionTimeSpan">
            <summary>
            Gets the client suspension time span.
            </summary>
            <value>The client suspension time span.</value>
        </member>
        <member name="P:Rollbar.RollbarRateLimit.ClientSuspensionEnd">
            <summary>
            Gets the client suspension end.
            </summary>
            <value>The client suspension end.</value>
        </member>
        <member name="M:Rollbar.RollbarRateLimit.#ctor(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarRateLimit"/> class.
            </summary>
            <param name="httpResponseHeaders">The HTTP response headers.</param>
        </member>
        <member name="M:Rollbar.RollbarRateLimit.#ctor(System.Net.Http.Headers.HttpHeaders)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarRateLimit"/> class.
            </summary>
            <param name="httpHeaders">The HTTP headers.</param>
        </member>
        <member name="M:Rollbar.RollbarRateLimit.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarRateLimit"/> class from being created.
            </summary>
        </member>
        <member name="T:Rollbar.RollbarResponse">
            <summary>
            Models Rollbar API response.
            </summary>
            <seealso cref="T:Rollbar.ITraceable" />
        </member>
        <member name="P:Rollbar.RollbarResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Rollbar.RollbarResponse.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Rollbar.RollbarResponse.HttpDetails">
            <summary>
            Gets or sets the HTTP details.
            </summary>
            <value>
            The HTTP details.
            </value>
        </member>
        <member name="P:Rollbar.RollbarResponse.RollbarRateLimit">
            <summary>
            Gets or sets the rollbar rate limit.
            </summary>
            <value>The rollbar rate limit.</value>
        </member>
        <member name="M:Rollbar.RollbarResponse.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarResponse.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.RollbarResult">
            <summary>
            Models Rollbar API response result.
            </summary>
            <seealso cref="T:Rollbar.ITraceable" />
        </member>
        <member name="P:Rollbar.RollbarResult.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Rollbar.RollbarResult.Uuid">
            <summary>
            Gets or sets the UUID.
            </summary>
            <value>
            The UUID.
            </value>
        </member>
        <member name="M:Rollbar.RollbarResult.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarResult.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>String rendering of this instance.</returns>
        </member>
        <member name="T:Rollbar.RollbarUtility">
            <summary>
            Class RollbarUtility.
            Aids in packaging logged objects as Rollbar DTO data structures (i.e. payloads).
            </summary>
        </member>
        <member name="M:Rollbar.RollbarUtility.PackageAsPayloadData(System.DateTime,Rollbar.IRollbarConfig,Rollbar.ErrorLevel,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Packages as payload data.
            </summary>
            <param name="utcTimestamp">The UTC timestamp of when the object-to-log was captured.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <param name="custom">The custom.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:Rollbar.RollbarUtility.PackageAsPayloadBody(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Packages as payload body.
            </summary>
            <param name="bodyObject">The body object.</param>
            <param name="custom">The custom.</param>
            <returns>Body.</returns>
        </member>
        <member name="M:Rollbar.RollbarUtility.SnapExceptionDataAsCustomData(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Snaps the exception data as custom data.
            </summary>
            <param name="e">The e.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="T:Rollbar.Instrumentation.InstrumentationCondition">
            <summary>
            Class InstrumentationCondition.
            </summary>
        </member>
        <member name="F:Rollbar.Instrumentation.InstrumentationCondition.Instrument">
            <summary>
            The instrument
            </summary>
        </member>
        <member name="T:Rollbar.Instrumentation.IPerformanceMonitor">
            <summary>
            Interface IPerformanceMonitor
            </summary>
        </member>
        <member name="M:Rollbar.Instrumentation.IPerformanceMonitor.Capture(System.TimeSpan)">
            <summary>
            Captures the specified measured time.
            </summary>
            <param name="measuredTime">The measured time.</param>
        </member>
        <member name="M:Rollbar.Instrumentation.IPerformanceMonitor.Capture(System.TimeSpan,Rollbar.Classification.IClassification)">
            <summary>
            Captures the specified measured time.
            </summary>
            <param name="measuredTime">The measured time.</param>
            <param name="measurementClassification">The measurement classification.</param>
        </member>
        <member name="T:Rollbar.Instrumentation.PerformanceTimer">
            <summary>
            Class CodePerformanceTimer.
            Implements the <see cref="T:System.Attribute" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Rollbar.Instrumentation.PerformanceTimer._timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="F:Rollbar.Instrumentation.PerformanceTimer._performanceMonitor">
            <summary>
            The performance monitor
            </summary>
        </member>
        <member name="F:Rollbar.Instrumentation.PerformanceTimer._measurementClassification">
            <summary>
            The measurement classification
            </summary>
        </member>
        <member name="M:Rollbar.Instrumentation.PerformanceTimer.#ctor(Rollbar.Instrumentation.IPerformanceMonitor,Rollbar.Classification.IClassification)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Instrumentation.PerformanceTimer"/> class.
            </summary>
            <param name="performanceMonitor">The performance monitor.</param>
            <param name="measurementClassification">The measurement classification.</param>
        </member>
        <member name="M:Rollbar.Instrumentation.PerformanceTimer.StartNew(Rollbar.Instrumentation.IPerformanceMonitor)">
            <summary>
            Creates new .
            </summary>
            <param name="performanceMonitor">The performance monitor.</param>
            <returns>PerformanceTimer.</returns>
        </member>
        <member name="M:Rollbar.Instrumentation.PerformanceTimer.StartNew(Rollbar.Instrumentation.IPerformanceMonitor,Rollbar.Classification.IClassification)">
            <summary>
            Creates new .
            </summary>
            <param name="performanceMonitor">The performance monitor.</param>
            <param name="measurementClassification">The measurement classification.</param>
            <returns>PerformanceTimer.</returns>
        </member>
        <member name="M:Rollbar.Instrumentation.PerformanceTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Rollbar.IpAddressCollectionPolicy">
            <summary>
            Enumerates all the applicable IP address collection policies.
            </summary>
        </member>
        <member name="F:Rollbar.IpAddressCollectionPolicy.Collect">
            <summary>
            Collect the IP address...
            </summary>
        </member>
        <member name="F:Rollbar.IpAddressCollectionPolicy.CollectAnonymized">
            <summary>
            Collect the IP address but anonymize it...
            </summary>
            <remarks>
            About IP Anonymization in Analytics, please, refer to:
            https://support.google.com/analytics/answer/2763052
            </remarks>
        </member>
        <member name="F:Rollbar.IpAddressCollectionPolicy.DoNotCollect">
            <summary>
            Do not collect the IP address
            </summary>
        </member>
        <member name="T:Rollbar.IRollbar">
            <summary>
            Defines IRollbar notifier interface.
            </summary>
            <seealso cref="T:Rollbar.ILogger" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Rollbar.IRollbar.Configure(Rollbar.IRollbarConfig)">
            <summary>
            Configures the using specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.IRollbar.Configure(System.String)">
            <summary>
            Configures using the specified access token.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
        </member>
        <member name="P:Rollbar.IRollbar.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Rollbar.IRollbar.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="E:Rollbar.IRollbar.InternalEvent">
            <summary>
            Occurs when a Rollbar internal event happens.
            </summary>
        </member>
        <member name="T:Rollbar.IRollbarConfig">
            <summary>
            Models Rollbar configuration interface.
            </summary>
        </member>
        <member name="P:Rollbar.IRollbarConfig.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>
            The environment.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.EndPoint">
            <summary>
            Gets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Enabled">
            <summary>
            Gets or sets a value indicating whether the Rollbar logger, configured with this <see cref="T:Rollbar.IRollbarConfig"/>, is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <remarks>
            Default: true
            </remarks>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Transmit">
            <summary>
            Gets or sets a value indicating whether the Rollbar logger will actually transmit the payloads to the Rollbar API server.
            </summary>
            <value><c>true</c> if transmit; otherwise, <c>false</c>.</value>
            <remarks>
            Should the SDK actually perform HTTP requests to Rollbar API. This is useful if you are trying to run Rollbar in dry run mode for development or tests.
            If this is false then we do all of the report processing except making the post request at the end of the pipeline.
            Default: true
            </remarks>
        </member>
        <member name="P:Rollbar.IRollbarConfig.RethrowExceptionsAfterReporting">
            <summary>
            Gets or sets a value indicating whether to rethrow exceptions after reporting them to Rollbar API.
            </summary>
            <value><c>true</c> if to rethrow exceptions after reporting them to Rollbar API; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.EnableLocalPayloadStore">
            <summary>
            Gets or sets a value indicating whether to enable local payload store.
            </summary>
            <value><c>true</c> if to enable local payload store; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.LocalPayloadStoreFileName">
            <summary>
            Gets or sets the name of the local payload store file.
            </summary>
            <value>The name of the local payload store file.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.LocalPayloadStoreLocationPath">
            <summary>
            Gets or sets the local payload store location path.
            </summary>
            <value>The local payload store location path.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>
            The log level.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ProxyAddress">
            <summary>
            Gets the proxy address.
            </summary>
            <value>
            The proxy address.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ProxyUsername">
            <summary>
            Gets the proxy username.
            </summary>
            <value>The proxy username.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ProxyPassword">
            <summary>
            Gets the proxy password.
            </summary>
            <value>The proxy password.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.PayloadPostTimeout">
            <summary>
            Gets the payload POST timeout.
            </summary>
            <value>The payload POST timeout.</value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.MaxReportsPerMinute">
            <summary>
            Gets the maximum reports per minute.
            </summary>
            <value>
            The maximum reports per minute.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ReportingQueueDepth">
            <summary>
            Gets the reporting queue depth.
            </summary>
            <value>
            The reporting queue depth.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.MaxItems">
            <summary>
            Gets the maximum items limit.
            </summary>
            <value>
            The maximum items.
            </value>
            <remarks>
            Max number of items to report per page load or per web request. 
            When this limit is reached, an additional item will be reported stating that the limit was reached. 
            Like MaxReportsPerMinute, this limit counts uncaught errors and any direct calls to Rollbar.log/debug/info/warning/error/critical().
            Default: 0 (no limit)
            </remarks>
        </member>
        <member name="P:Rollbar.IRollbarConfig.CaptureUncaughtExceptions">
            <summary>
            Gets a value indicating whether to auto-capture uncaught exceptions.
            </summary>
            <value>
              <c>true</c> if auto-capture uncaught exceptions is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ScrubFields">
            <summary>
            Gets the scrub fields.
            </summary>
            <value>
            The scrub fields.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.ScrubWhitelistFields">
            <summary>
            Gets the scrub white-list fields.
            </summary>
            <value>
            The scrub white-list fields.
            </value>
            <remarks>
            The fields mentioned in this list are guaranteed to be excluded 
            from the ScrubFields list in cases when the lists overlap.
            </remarks>
        </member>
        <member name="M:Rollbar.IRollbarConfig.GetFieldsToScrub">
            <summary>
            Gets the fields to scrub.
            </summary>
            <returns>
            Actual fields to be scrubbed based on combining the ScrubFields with the ScrubWhitelistFields.
            </returns>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Transform">
            <summary>
            Gets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Truncate">
            <summary>
            Gets the truncate.
            </summary>
            <value>
            The truncate.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.CheckIgnore">
            <summary>
            Gets the check ignore.
            </summary>
            <value>
            The check ignore.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.PersonDataCollectionPolicies">
            <summary>
            Gets or sets the person data collection policies.
            </summary>
            <value>
            The person data collection policies.
            </value>
        </member>
        <member name="P:Rollbar.IRollbarConfig.IpAddressCollectionPolicy">
            <summary>
            Gets or sets the IP address collection policy.
            </summary>
            <value>
            The IP address collection policy.
            </value>
        </member>
        <member name="T:Rollbar.IRollbarPackage">
            <summary>
            Interface IRollbarPackage
            
            Defines API for implementing packaging strategies of how to package 
            a particular object type as Rollbar Data DTO.
            An instance implementing this interface "wraps" around the object to package 
            and can be passed to most of the logging methods instead of the "raw" object.  
            Rollbar Logger, then, would use this strategy to package the object as 
            a Rollbar Data DTO according to the strategy implementation.
            </summary>
        </member>
        <member name="M:Rollbar.IRollbarPackage.PackageAsRollbarData">
            <summary>
            Packages as rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="P:Rollbar.IRollbarPackage.MustApplySynchronously">
            <summary>
            Gets a value indicating whether to package synchronously (within the logging method call).
            
            The logging methods will return very quickly when this flag is off. In the off state, 
            the packaging strategy will be invoked during payload transmission on a dedicated worker thread. 
            </summary>
            <value><c>true</c> if needs to package synchronously; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.IRollbarPackage.RollbarData">
            <summary>
            Gets the rollbar data packaged by this strategy (if any).
            </summary>
            <value>The rollbar data.</value>
        </member>
        <member name="T:Rollbar.ITraceable">
            <summary>
            Defines an interface of a traceable object.
            </summary>
        </member>
        <member name="M:Rollbar.ITraceable.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.ITraceable.TraceAsString(System.String)">
            <summary>
            Traces as a string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>String rendering of this instance.</returns>
        </member>
        <member name="T:Rollbar.NetFramework.AppConfigUtility">
            <summary>
            Class AppConfigUtility.
            It aids in configuration of Rollbar configuration objects based on content of an app.config file (if any). 
            </summary>
        </member>
        <member name="M:Rollbar.NetFramework.AppConfigUtility.LoadAppSettings(Rollbar.RollbarConfig)">
            <summary>
            Loads the application settings.
            </summary>
            <param name="rollbarConfig">The Rollbar configuration.</param>
            <returns>false when the configuration was not found, otherwise true.</returns>
        </member>
        <member name="M:Rollbar.NetFramework.AppConfigUtility.LoadAppSettings(Rollbar.RollbarConfig,Rollbar.NetFramework.RollbarConfigSection)">
            <summary>
            Loads the application settings.
            </summary>
            <param name="rollbarConfig">The configuration.</param>
            <param name="rollbarConfigSection">The application settings.</param>
            <returns>false when the configuration was not found, otherwise true.</returns>
        </member>
        <member name="M:Rollbar.NetFramework.AppConfigUtility.LoadAppSettings(Rollbar.Telemetry.TelemetryConfig)">
            <summary>
            Loads the application settings.
            </summary>
            <param name="telemetryConfig">The configuration.</param>
            <returns>false when the configuration was not found, otherwise true.</returns>
        </member>
        <member name="M:Rollbar.NetFramework.AppConfigUtility.LoadAppSettings(Rollbar.Telemetry.TelemetryConfig,Rollbar.NetFramework.RollbarTelemetryConfigSection)">
            <summary>
            Loads the application settings.
            </summary>
            <param name="telemetryConfig">The configuration.</param>
            <param name="telemetryConfigSection">The application settings.</param>
            <returns>false when the configuration was not found, otherwise true.</returns>
        </member>
        <member name="T:Rollbar.NetFramework.RollbarConfigSection">
            <summary>
            Implements Rollbar custom configuration section for .NET Framework only!
            </summary>
            <seealso cref="T:System.Configuration.ConfigurationSection" />
            <remarks>
            http://joelabrahamsson.com/creating-a-custom-configuration-section-in-net/
            https://msdn.microsoft.com/en-us/library/system.configuration.configurationsection.aspx
            https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationsection?view=netframework-4.7.1
            </remarks>
        </member>
        <member name="M:Rollbar.NetFramework.RollbarConfigSection.GetConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ScrubFields">
            <summary>
            Gets or sets the scrub fields.
            </summary>
            <value>
            The scrub fields.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ScrubWhitelistFields">
            <summary>
            Gets or sets the scrub fields.
            </summary>
            <value>
            The scrub fields.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>
            The log level.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.Enabled">
            <summary>
            Gets or sets the enabled.
            </summary>
            <value>
            The enabled.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.Transmit">
            <summary>
            Gets a value indicating whether this <see cref="T:Rollbar.NetFramework.RollbarConfigSection"/> is transmit.
            </summary>
            <value><c>null</c> if contains no value, <c>true</c> if [transmit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.RethrowExceptionsAfterReporting">
            <summary>
            Gets a value indicating whether to rethrow exceptions after reporting.
            </summary>
            <value><c>null</c> if contains no value, <c>true</c> if to rethrow exceptions after reporting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.EnableLocalPayloadStore">
            <summary>
            Gets a value indicating whether to enable local payload store.
            </summary>
            <value><c>null</c> if to enable local payload store contains no value, <c>true</c> if [enable local payload store]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.LocalPayloadStoreFileName">
            <summary>
            Gets or sets the name of the local payload store file.
            </summary>
            <value>The name of the local payload store file.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.LocalPayloadStoreLocationPath">
            <summary>
            Gets or sets the local payload store location path.
            </summary>
            <value>The local payload store location path.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.Environment">
            <summary>
            Gets or sets the environment.
            </summary>
            <value>
            The environment.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ProxyAddress">
            <summary>
            Gets or sets the proxy address.
            </summary>
            <value>
            The proxy address.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ProxyUsername">
            <summary>
            Gets the proxy username.
            </summary>
            <value>The proxy username.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ProxyPassword">
            <summary>
            Gets the proxy password.
            </summary>
            <value>The proxy password.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.PayloadPostTimeout">
            <summary>
            Gets the payload POST timeout.
            </summary>
            <value>The payload POST timeout.</value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.MaxReportsPerMinute">
            <summary>
            Gets or sets the maximum reports per minute.
            </summary>
            <value>
            The maximum reports per minute.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.ReportingQueueDepth">
            <summary>
            Gets or sets the reporting queue depth.
            </summary>
            <value>
            The reporting queue depth.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.MaxItems">
            <summary>
            Gets the maximum items limit.
            </summary>
            <value>
            The maximum items.
            </value>
            <remarks>
            Max number of items to report per page load or per web request.
            When this limit is reached, an additional item will be reported stating that the limit was reached.
            Like MaxReportsPerMinute, this limit counts uncaught errors and any direct calls to Rollbar.log/debug/info/warning/error/critical().
            Default: 0 (no limit)
            </remarks>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.CaptureUncaughtExceptions">
            <summary>
            Gets a value indicating whether to auto-capture uncaught exceptions.
            </summary>
            <value>
              <c>true</c> if auto-capture uncaught exceptions is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.PersonDataCollectionPolicies">
            <summary>
            Gets the person data collection policies.
            </summary>
            <value>
            The person data collection policies.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarConfigSection.IpAddressCollectionPolicy">
            <summary>
            Gets the IP address collection policy.
            </summary>
            <value>
            The IP address collection policy.
            </value>
        </member>
        <member name="T:Rollbar.NetFramework.RollbarTelemetryConfigSection">
            <summary>
            Implements Rollbar Telemetry custom configuration section for .NET Framework only!
            </summary>
            <seealso cref="T:System.Configuration.ConfigurationSection" />
            <remarks>
            http://joelabrahamsson.com/creating-a-custom-configuration-section-in-net/
            https://msdn.microsoft.com/en-us/library/system.configuration.configurationsection.aspx
            https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationsection?view=netframework-4.7.1
            </remarks>
        </member>
        <member name="M:Rollbar.NetFramework.RollbarTelemetryConfigSection.GetConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarTelemetryConfigSection.TelemetryEnabled">
            <summary>
            Gets the telemetry enabled.
            </summary>
            <value>
            The telemetry enabled.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarTelemetryConfigSection.TelemetryQueueDepth">
            <summary>
            Gets the telemetry queue depth.
            </summary>
            <value>
            The telemetry queue depth.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarTelemetryConfigSection.TelemetryAutoCollectionTypes">
            <summary>
            Gets the telemetry automatic collection types.
            </summary>
            <value>
            The telemetry automatic collection types.
            </value>
        </member>
        <member name="P:Rollbar.NetFramework.RollbarTelemetryConfigSection.TelemetryAutoCollectionInterval">
            <summary>
            Gets the telemetry automatic collection interval.
            </summary>
            <value>
            The telemetry automatic collection interval.
            </value>
        </member>
        <member name="T:Rollbar.NetStandard.RollbarConfigUtility">
            <summary>
            Class RollbarConfigUtility.
            </summary>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarConfigUtility.Load(Rollbar.RollbarConfig)">
            <summary>
            Loads the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <returns><c>true</c> if configuration was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarConfigUtility.Load(Rollbar.Telemetry.TelemetryConfig)">
            <summary>
            Loads the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <returns><c>true</c> if configuration was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarConfigUtility.LoadRollbarConfig">
            <summary>
            Loads the rollbar configuration.
            </summary>
            <returns>Either IRollbarConfig or null if no configuration file found.</returns>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarConfigUtility.LoadTelemetryConfig">
            <summary>
            Loads the telemetry configuration.
            </summary>
            <returns>ITelemetryConfig.</returns>
            <returns>Either IRollbarConfig or null if no configuration file found.</returns>
        </member>
        <member name="T:Rollbar.NetStandard.RollbarTraceListener">
             <summary>
             Class RollbarTraceListener.
             </summary>
             <seealso cref="T:System.Diagnostics.TraceListener" />
             <remarks>
             This class implements a Rollbar Notifier's plug-in for the standard .NET tracing infrastructure.
             It, internally, uses the RollbarLogger to asynchronously forward the "herd" tracing events to
             the Rollbar API Service.
             So, if your codebase is already using the .NET tracing extensively, you can gain Rollbar remote
             error/log monitoring benefits by simply adding RollbarTraceListener as one more trace listener.
             This listener instance can either be added via code or via app.config file. In the app.config file,
             the listener can be either configured on very basic level by specifying the access token and environment
             attributes or by using more advanced configuration parameters via dedicated Rollbar configuration
             section of app.config file.
             Since the .NET does not seem to support yet addition of trace listeners via appsettings.json file,
             this trace listener can be added only via code, but configured either via code or via appropriate
             Rollbar section of the appsettings.json file.
             </remarks>
             <example>
             
             &lt;?xml version="1.0" encoding="utf-8"?&gt;
              &lt;configuration&gt;
                &lt;!--
                &lt;configSections&gt;
                  &lt;section name = "rollbar" type="Rollbar.NetFramework.RollbarConfigSection, Rollbar"/&gt;
                &lt;/configSections&gt;
                  
                &lt;rollbar
                  accessToken = "17965fa5041749b6bf7095a190001ded"
                  environment="RollbarNetPrototypes"
                  /?&gt;
                 --?&gt;
               
                &lt;system.diagnostics>
                  &lt;trace autoflush = "true" indentsize="4"&gt;
                    &lt;listeners>
                      &lt;add name = "textFileListener"
                           type="System.Diagnostics.TextWriterTraceListener" 
                           initializeData="TextTrace.log" 
                           traceOutputOptions="ProcessId, ThreadId, Timestamp, DateTime, Callstack,LogicalOperationStack"
                           /&gt;
                      &lt;add name = "rollbarListener"
                           type="Rollbar.NetStandard.RollbarTraceListener,Rollbar" 
                           traceOutputOptions="ProcessId, ThreadId, Timestamp, DateTime, Callstack, LogicalOperationStack" 
                           rollbarAccessToken="17965fa5041749b6bf7095a190001ded" 
                           rollbarEnvironment="MyRollbarEnvironmentTag"
                           /&gt;
                      &lt;remove name = "Default"
                              /&gt;
                    &lt;/listeners&gt;
                  &lt;/trace&gt;
                &lt;/system.diagnostics&gt;
                  &lt;startup&gt;
                      &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.1"/&gt;
                  &lt;/startup&gt;
              &lt;/configuration&gt;
            
             </example>
        </member>
        <member name="P:Rollbar.NetStandard.RollbarTraceListener.InstanceCount">
            <summary>
            The instance count
            </summary>
        </member>
        <member name="P:Rollbar.NetStandard.RollbarTraceListener.Rollbar">
            <summary>
            Gets the Rollbar.
            </summary>
            <value>The rollbar.</value>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.NetStandard.RollbarTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.NetStandard.RollbarTraceListener"/> class.
            </summary>
            <param name="rollbarAccessToken">The rollbar access token.</param>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.NetStandard.RollbarTraceListener"/> class.
            </summary>
            <param name="rollbarAccessToken">The rollbar access token.</param>
            <param name="rollbarEnvironment">The rollbar environment.</param>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"></see> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"></see> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.GetRollbarTraceListenerConfig">
            <summary>
            Gets the Rollbar trace listener configuration.
            </summary>
            <returns>RollbarConfig.</returns>
        </member>
        <member name="M:Rollbar.NetStandard.RollbarTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
            <returns>A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.</returns>
        </member>
        <member name="T:Rollbar.ConfigAttributesPackageDecorator">
            <summary>
            Class ConfigAttributesPackageDecorator.
            Implements the <see cref="T:Rollbar.RollbarPackageDecoratorBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageDecoratorBase" />
        </member>
        <member name="F:Rollbar.ConfigAttributesPackageDecorator._rollbarConfig">
            <summary>
            The rollbar configuration
            </summary>
        </member>
        <member name="F:Rollbar.ConfigAttributesPackageDecorator._capturedTelemetryRecords">
            <summary>
            The captured telemetry records
            </summary>
        </member>
        <member name="M:Rollbar.ConfigAttributesPackageDecorator.#ctor(Rollbar.IRollbarPackage,Rollbar.IRollbarConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ConfigAttributesPackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
        </member>
        <member name="M:Rollbar.ConfigAttributesPackageDecorator.#ctor(Rollbar.IRollbarPackage,Rollbar.IRollbarConfig,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ConfigAttributesPackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.ConfigAttributesPackageDecorator.Decorate(Rollbar.DTOs.Data)">
            <summary>
            Decorates the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
        </member>
        <member name="T:Rollbar.CustomKeyValuePackageDecorator">
            <summary>
            Class CustomKeyValuePackageDecorator.
            Implements the <see cref="T:Rollbar.RollbarPackageDecoratorBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageDecoratorBase" />
        </member>
        <member name="F:Rollbar.CustomKeyValuePackageDecorator._custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="M:Rollbar.CustomKeyValuePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CustomKeyValuePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.CustomKeyValuePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CustomKeyValuePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="custom">The custom.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.CustomKeyValuePackageDecorator.Decorate(Rollbar.DTOs.Data)">
            <summary>
            Decorates the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
        </member>
        <member name="T:Rollbar.HttpRequestMessagePackageDecorator">
            <summary>
            Class HttpRequestMessagePackageDecorator.
            Implements the <see cref="T:Rollbar.RollbarPackageDecoratorBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageDecoratorBase" />
        </member>
        <member name="F:Rollbar.HttpRequestMessagePackageDecorator._httpRequestMessage">
            <summary>
            The HTTP request message
            </summary>
        </member>
        <member name="F:Rollbar.HttpRequestMessagePackageDecorator._rollbarConfig">
            <summary>
            The rollbar configuration
            </summary>
        </member>
        <member name="F:Rollbar.HttpRequestMessagePackageDecorator._arbitraryKeyValuePairs">
            <summary>
            The arbitrary key value pairs
            </summary>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Net.Http.HttpRequestMessage,Rollbar.IRollbarConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.HttpRequestMessagePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="httpRequestMessage">The HTTP request message.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Net.Http.HttpRequestMessage,Rollbar.IRollbarConfig,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.HttpRequestMessagePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="httpRequestMessage">The HTTP request message.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Net.Http.HttpRequestMessage,Rollbar.IRollbarConfig,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.HttpRequestMessagePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="httpRequestMessage">The HTTP request message.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.#ctor(Rollbar.IRollbarPackage,System.Net.Http.HttpRequestMessage,Rollbar.IRollbarConfig,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.HttpRequestMessagePackageDecorator"/> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="httpRequestMessage">The HTTP request message.</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="arbitraryKeyValuePairs">The arbitrary key value pairs.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.Decorate(Rollbar.DTOs.Data)">
            <summary>
            Decorates the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
        </member>
        <member name="M:Rollbar.HttpRequestMessagePackageDecorator.DecideCollectableUserIPValue(System.String,Rollbar.IpAddressCollectionPolicy)">
            <summary>
            Decides whether to collect user ip value or not.
            </summary>
            <param name="initialIPAddress">The initial ip address.</param>
            <param name="ipAddressCollectionPolicy">The ip address collection policy.</param>
            <returns>The IP value as System.String.</returns>
        </member>
        <member name="T:Rollbar.PersonPackageDecorator">
            <summary>
            Class PersonPackageDecorator.
            Implements the <see cref="T:Rollbar.RollbarPackageDecoratorBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageDecoratorBase" />
        </member>
        <member name="F:Rollbar.PersonPackageDecorator._person">
            <summary>
            The person
            </summary>
        </member>
        <member name="M:Rollbar.PersonPackageDecorator.#ctor(Rollbar.IRollbarPackage,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PersonPackageDecorator" /> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="personId">The person identifier.</param>
            <param name="personUsername">The person username.</param>
            <param name="personEmail">The person email.</param>
        </member>
        <member name="M:Rollbar.PersonPackageDecorator.#ctor(Rollbar.IRollbarPackage,Rollbar.DTOs.Person)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PersonPackageDecorator" /> class.
            </summary>
            <param name="packageToDecorate">The package to decorate.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rollbar.PersonPackageDecorator.Decorate(Rollbar.DTOs.Data)">
            <summary>
            Decorates the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
        </member>
        <member name="T:Rollbar.BodyPackage">
            <summary>
            Class BodyPackage.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
        </member>
        <member name="F:Rollbar.BodyPackage._rollbarConfig">
            <summary>
            The rollbar configuration
            </summary>
        </member>
        <member name="F:Rollbar.BodyPackage._bodyToPackage">
            <summary>
            The body to package
            </summary>
        </member>
        <member name="F:Rollbar.BodyPackage._custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="M:Rollbar.BodyPackage.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.BodyPackage"/> class.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="bodyToPackage">The body to package.</param>
        </member>
        <member name="M:Rollbar.BodyPackage.#ctor(Rollbar.IRollbarConfig,Rollbar.DTOs.Body,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.BodyPackage"/> class.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="bodyToPackage">The body to package.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.BodyPackage.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="T:Rollbar.DataPackage">
            <summary>
            Class DataPackage.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            It is essentially a no-op/pass-through packaging strategy.
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
        </member>
        <member name="F:Rollbar.DataPackage._packagedData">
            <summary>
            The packaged data
            </summary>
        </member>
        <member name="M:Rollbar.DataPackage.#ctor(Rollbar.DTOs.Data)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.DataPackage"/> class.
            </summary>
            <param name="packagedData">The packaged data.</param>
        </member>
        <member name="M:Rollbar.DataPackage.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="T:Rollbar.ExceptionPackage">
            <summary>
            Class ExceptionPackage.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
        </member>
        <member name="F:Rollbar.ExceptionPackage._exceptionToPackage">
            <summary>
            The exception to package
            </summary>
        </member>
        <member name="F:Rollbar.ExceptionPackage._rollbarDataTitle">
            <summary>
            The rollbar data title
            </summary>
        </member>
        <member name="M:Rollbar.ExceptionPackage.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ExceptionPackage"/> class.
            </summary>
            <param name="exceptionToPackage">The exception to package.</param>
        </member>
        <member name="M:Rollbar.ExceptionPackage.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ExceptionPackage"/> class.
            </summary>
            <param name="exceptionToPackage">The exception to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
        </member>
        <member name="M:Rollbar.ExceptionPackage.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ExceptionPackage"/> class.
            </summary>
            <param name="exceptionToPackage">The exception to package.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> the strategy must be apply synchronously.</param>
        </member>
        <member name="M:Rollbar.ExceptionPackage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ExceptionPackage" /> class.
            </summary>
            <param name="exceptionToPackage">The exception to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> the strategy must be apply synchronously.</param>
        </member>
        <member name="M:Rollbar.ExceptionPackage.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="T:Rollbar.MessagePackage">
            <summary>
            Class MessagePackage.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
        </member>
        <member name="F:Rollbar.MessagePackage._messageToPackage">
            <summary>
            The message to package
            </summary>
        </member>
        <member name="F:Rollbar.MessagePackage._rollbarDataTitle">
            <summary>
            The rollbar data title
            </summary>
        </member>
        <member name="F:Rollbar.MessagePackage._extraInfo">
            <summary>
            The extra information
            </summary>
        </member>
        <member name="M:Rollbar.MessagePackage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.MessagePackage"/> class.
            </summary>
            <param name="messageToPackage">The message to package.</param>
        </member>
        <member name="M:Rollbar.MessagePackage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.MessagePackage"/> class.
            </summary>
            <param name="messageToPackage">The message to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
        </member>
        <member name="M:Rollbar.MessagePackage.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.MessagePackage" /> class.
            </summary>
            <param name="messageToPackage">The message to package.</param>
            <param name="extraInfo">The extra information.</param>
        </member>
        <member name="M:Rollbar.MessagePackage.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.MessagePackage" /> class.
            </summary>
            <param name="messageToPackage">The message to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
            <param name="extraInfo">The extra information.</param>
        </member>
        <member name="M:Rollbar.MessagePackage.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="T:Rollbar.ObjectPackage">
            <summary>
            Class ObjectPackage.
            Implements the <see cref="T:Rollbar.RollbarPackageBase" />
            </summary>
            <seealso cref="T:Rollbar.RollbarPackageBase" />
        </member>
        <member name="F:Rollbar.ObjectPackage._objectToPackage">
            <summary>
            The object to package
            </summary>
        </member>
        <member name="F:Rollbar.ObjectPackage._rollbarDataTitle">
            <summary>
            The rollbar data title
            </summary>
        </member>
        <member name="F:Rollbar.ObjectPackage._custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="custom">The custom.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
            <param name="custom">The custom.</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.#ctor(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.ObjectPackage"/> class.
            </summary>
            <param name="objectToPackage">The object to package.</param>
            <param name="rollbarDataTitle">The rollbar data title.</param>
            <param name="custom">The custom.</param>
            <param name="mustApplySynchronously">if set to <c>true</c> [must apply synchronously].</param>
        </member>
        <member name="M:Rollbar.ObjectPackage.ProduceRollbarData">
            <summary>
            Produces the rollbar data.
            </summary>
            <returns>Rollbar Data DTO or null (if packaging is not applicable in some cases).</returns>
        </member>
        <member name="T:Rollbar.PayloadScrubbing.FormDataStringScrubber">
            <summary>
            Class FormDataStringScrubber.
            Implements the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
            </summary>
            <seealso cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
            <remarks>
            Performs scrubbing of form-data values as described here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type
            </remarks>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.FormDataStringScrubber._formDataBoundary">
            <summary>
            The form data boundary
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.FormDataStringScrubber"/> class.
            </summary>
            <param name="contentTypeHeaderValue">The content type header value.</param>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.FormDataStringScrubber"/> class.
            </summary>
            <param name="contentTypeHeaderValue">The content type header value.</param>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.#ctor(System.String,System.String,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.FormDataStringScrubber"/> class.
            </summary>
            <param name="contentTypeHeaderValue">The content type header value.</param>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.ExtractBaundaryValue(System.String)">
            <summary>
            Extracts the baundary value.
            </summary>
            <param name="contentTypeHeaderValue">The content type header value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.SplitIntoParts(System.String)">
            <summary>
            Splits the into parts.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>List&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.Process(System.Collections.Generic.List{System.String})">
            <summary>
            Processes the specified part.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.FormDataStringScrubber.DoScrub(System.String)">
            <summary>
            Does the scrub.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Rollbar.PayloadScrubbing.JsonStringScrubber">
            <summary>
            Class JsonStringScrubber.
            Implements the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
            </summary>
            <seealso cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
        </member>
        <member name="M:Rollbar.PayloadScrubbing.JsonStringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.JsonStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.JsonStringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.JsonStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.JsonStringScrubber.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.JsonStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.JsonStringScrubber.DoScrub(System.String)">
            <summary>
            Does the scrub.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.PayloadScrubbing.RollbarPayloadScrubber">
            <summary>
            Class RollbarPayloadScrubber.
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.scrubMask">
            <summary>
            The scrub mask
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.fieldPathRoot">
            <summary>
            The field path root
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.httpRequestBodyPath">
            <summary>
            The HTTP request body path
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.httpResponseBodyPath">
            <summary>
            The HTTP response body path
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber._payloadFieldNames">
            <summary>
            The payload field names
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber._payloadFieldPaths">
            <summary>
            The payload field paths
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber._httpRequestBodyPaths">
            <summary>
            The HTTP request body paths
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.RollbarPayloadScrubber._httpResponseBodyPaths">
            <summary>
            The HTTP response body paths
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadScrubbing.RollbarPayloadScrubber"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.RollbarPayloadScrubber"/> class.
            </summary>
            <param name="scrubFields">The scrub fields.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.FilterOutCriticalFields(System.String[],System.String[])">
            <summary>
            Filters out the critical fields (using case sensitive string comparing).
            </summary>
            <param name="inputFields">The input fields.</param>
            <param name="criticalDataFields">The critical data fields.</param>
            <returns>Filtered input fields without the critical ones.</returns>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.ScrubPayload(System.String)">
            <summary>
            Scrubs the payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.ScrubMask">
            <summary>
            Gets the scrub mask.
            </summary>
            <value>The scrub mask.</value>
        </member>
        <member name="P:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.PayloadFieldNames">
            <summary>
            Gets the payload field names.
            </summary>
            <value>The payload field names.</value>
        </member>
        <member name="P:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.PayloadFieldPaths">
            <summary>
            Gets the payload field paths.
            </summary>
            <value>The payload field paths.</value>
        </member>
        <member name="P:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.HttpRequestBodyPaths">
            <summary>
            Gets the HTTP request body paths.
            </summary>
            <value>The HTTP request body paths.</value>
        </member>
        <member name="P:Rollbar.PayloadScrubbing.RollbarPayloadScrubber.HttpResponseBodyPaths">
            <summary>
            Gets the HTTP response body paths.
            </summary>
            <value>The HTTP response body paths.</value>
        </member>
        <member name="T:Rollbar.PayloadScrubbing.StringScrubber">
            <summary>
            Class StringScrubber.
            </summary>
            <remarks>It fails safe in case (if the scrubbing strategy does not succeed)
            by returning a string value denoting the scrubbing failure instead of
            the unscrubbed input string.</remarks>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.StringScrubber.failedScrubbingMessage">
            <summary>
            The failed scrubbing message
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.StringScrubber._scrubMask">
            <summary>
            The scrub mask
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.StringScrubber._scrubFields">
            <summary>
            The scrub fields
            </summary>
        </member>
        <member name="F:Rollbar.PayloadScrubbing.StringScrubber._scrubPaths">
            <summary>
            The scrub paths
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.Scrub(System.String)">
            <summary>
            Scrubs the specified input string.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.StringScrubber.DoScrub(System.String)">
            <summary>
            Does the scrub.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.PayloadScrubbing.XmlStringScrubber">
            <summary>
            Class XmlStringScrubber.
            Implements the <see cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
            </summary>
            <seealso cref="T:Rollbar.PayloadScrubbing.StringScrubber" />
        </member>
        <member name="F:Rollbar.PayloadScrubbing.XmlStringScrubber._jsonStringScrubber">
            <summary>
            The json string scrubber
            </summary>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.XmlStringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.XmlStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.XmlStringScrubber.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.XmlStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.XmlStringScrubber.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadScrubbing.XmlStringScrubber"/> class.
            </summary>
            <param name="scrubMask">The scrub mask.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubPaths">The scrub paths.</param>
        </member>
        <member name="M:Rollbar.PayloadScrubbing.XmlStringScrubber.DoScrub(System.String)">
            <summary>
            Does the scrub.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.PayloadStore.Destination">
            <summary>
            Class Destination.
            </summary>
        </member>
        <member name="P:Rollbar.PayloadStore.Destination.ID">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.Destination.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>The endpoint.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.Destination.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.Destination.PayloadRecords">
            <summary>
            Gets or sets the payload records.
            </summary>
            <value>The payload records.</value>
        </member>
        <member name="T:Rollbar.PayloadStore.PayloadRecord">
            <summary>
            Class PayloadRecord.
            </summary>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.ID">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.PayloadJson">
            <summary>
            Gets or sets the payload json.
            </summary>
            <value>The payload json.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.ConfigJson">
            <summary>
            Gets or sets the configuration json.
            </summary>
            <value>The configuration json.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.PayloadRecord.DestinationID">
            <summary>
            Gets or sets the destination identifier.
            </summary>
            <value>The destination identifier.</value>
        </member>
        <member name="T:Rollbar.PayloadStore.StoreContext">
            <summary>
            Class StoreContext.
            Implements the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
            </summary>
            <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
        </member>
        <member name="F:Rollbar.PayloadStore.StoreContext.DefaultRollbarStoreDbFile">
            <summary>
            The default rollbar store database file
            </summary>
        </member>
        <member name="F:Rollbar.PayloadStore.StoreContext.DefaultRollbarStoreDbFileLocation">
            <summary>
            The default rollbar store database file location
            </summary>
        </member>
        <member name="P:Rollbar.PayloadStore.StoreContext.RollbarStoreDbFullName">
            <summary>
            Gets or sets the full name of the rollbar store database.
            </summary>
            <value>The full name of the rollbar store database.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.StoreContext.sqliteConnectionString">
            <summary>
            The sqlite connection string
            </summary>
        </member>
        <member name="P:Rollbar.PayloadStore.StoreContext.Destinations">
            <summary>
            Gets or sets the destinations.
            </summary>
            <value>The destinations.</value>
        </member>
        <member name="P:Rollbar.PayloadStore.StoreContext.PayloadRecords">
            <summary>
            Gets or sets the payload records.
            </summary>
            <value>The payload records.</value>
        </member>
        <member name="M:Rollbar.PayloadStore.StoreContext.MakeSureDatabaseExistsAndReady">
            <summary>
            Makes the sure database exists and ready.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadStore.StoreContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            <para>
            Override this method to configure the database (and other options) to be used for this context.
            This method is called for each instance of the context that is created.
            The base implementation does nothing.
            </para>
            <para>
            In situations where an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> may or may not have been passed
            to the constructor, you can use <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" /> to determine if
            the options have already been set, and skip some or all of the logic in
            <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
            </para>
            </summary>
            <param name="optionsBuilder">A builder used to create or modify options for this context. Databases (and other extensions)
            typically define extension methods on this object that allow you to configure the context.</param>
        </member>
        <member name="M:Rollbar.PayloadStore.StoreContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Override this method to further configure the model that was discovered by convention from the entity types
            exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
            and re-used for subsequent instances of your derived context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
            define extension methods on this object that allow you to configure aspects of the model that are specific
            to a given database.</param>
            <remarks>If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
            then this method will not be run.</remarks>
        </member>
        <member name="T:Rollbar.PayloadTruncation.FramesTruncationStrategy">
            <summary>
            Implements "middle Frames reduction" Payload truncation strategy.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase" />
        </member>
        <member name="M:Rollbar.PayloadTruncation.FramesTruncationStrategy.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadTruncation.FramesTruncationStrategy"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadTruncation.FramesTruncationStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadTruncation.FramesTruncationStrategy"/> class.
            </summary>
            <param name="totalHeadFramesToPreserve">The total head frames to preserve.</param>
            <param name="totalTailFramesToPreserve">The total tail frames to preserve.</param>
        </member>
        <member name="M:Rollbar.PayloadTruncation.FramesTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="T:Rollbar.PayloadTruncation.IPayloadTruncationStrategy">
            <summary>
            Defines an interface for a payload truncation strategy implementation.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadTruncation.IPayloadTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>Payload size (in bytes) after the truncation.</returns>
        </member>
        <member name="T:Rollbar.PayloadTruncation.IterativeTruncationStrategy">
            <summary>
            Implements "Iterative as needed" Payload truncation strategy.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase" />
        </member>
        <member name="P:Rollbar.PayloadTruncation.IterativeTruncationStrategy.MaxPayloadSizeInBytes">
            <summary>
            Gets the maximum payload size in bytes.
            A truncation strategy attempts to truncate a provided payload to lesser or equal size.
            </summary>
            <value>
            The maximum payload size in bytes.
            </value>
        </member>
        <member name="M:Rollbar.PayloadTruncation.IterativeTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="P:Rollbar.PayloadTruncation.IterativeTruncationStrategy.OrderedTruncationStrategies">
            <summary>
            Gets the ordered truncation strategies.
            </summary>
            <value>The ordered truncation strategies.</value>
        </member>
        <member name="T:Rollbar.PayloadTruncation.MinBodyTruncationStrategy">
            <summary>
            Implements "Minimal Body" Payload truncation strategy.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase" />
        </member>
        <member name="M:Rollbar.PayloadTruncation.MinBodyTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase">
            <summary>
            An abstract base for implementing Payload truncation strategies.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.IPayloadTruncationStrategy" />
        </member>
        <member name="M:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="M:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase.GetSizeInBytes(Rollbar.DTOs.Payload)">
            <summary>
            Gets the size in bytes.
            </summary>
            <param name="payload">The payload.</param>
            <returns></returns>
        </member>
        <member name="T:Rollbar.PayloadTruncation.RawTruncationStrategy">
            <summary>
            Implements "No-Op" Payload truncation strategy.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase" />
        </member>
        <member name="M:Rollbar.PayloadTruncation.RawTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="T:Rollbar.PayloadTruncation.StringsTruncationStrategy">
            <summary>
            Implements "Limited strings length" Payload truncation strategy.
            </summary>
            <seealso cref="T:Rollbar.PayloadTruncation.PayloadTruncationStrategyBase" />
        </member>
        <member name="M:Rollbar.PayloadTruncation.StringsTruncationStrategy.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PayloadTruncation.StringsTruncationStrategy"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PayloadTruncation.StringsTruncationStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadTruncation.StringsTruncationStrategy"/> class.
            </summary>
            <param name="stringBytesLimit">The string bytes limit.</param>
        </member>
        <member name="M:Rollbar.PayloadTruncation.StringsTruncationStrategy.Truncate(Rollbar.DTOs.Payload)">
            <summary>
            Truncates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>
            Payload size (in bytes) after the truncation.
            </returns>
        </member>
        <member name="T:Rollbar.PersonDataCollectionPolicies">
            <summary>
            Lists all applicable Person data collection policies.
            </summary>
        </member>
        <member name="F:Rollbar.PersonDataCollectionPolicies.None">
            <summary>
            None of the personal data gets collected...
            </summary>
        </member>
        <member name="F:Rollbar.PersonDataCollectionPolicies.Username">
            <summary>
            The Person username gets collected...
            </summary>
        </member>
        <member name="F:Rollbar.PersonDataCollectionPolicies.Email">
            <summary>
            The Person email gets collected...
            </summary>
        </member>
        <member name="T:Rollbar.PlugIns.PlugInCoreBase">
            <summary>
            Defines PlugInCoreBase abstraction.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCoreBase._rollbar">
            <summary>
            The rollbar
            </summary>
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCoreBase._rollbarLogger">
            <summary>
            The Rollbar logger
            </summary>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.PlugIns.PlugInCoreBase"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.#ctor(Rollbar.IRollbarConfig,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PlugIns.PlugInCoreBase"/> class.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="rollbarBlockingTimeout">The rollbar blocking timeout.</param>
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCoreBase.DefaultRollbarBlockingTimeout">
            <summary>
            The default RollbarLogger's blocking timeout.
            </summary>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.CreateConfig(System.String,System.String)">
            <summary>
            Creates the configuration.
            </summary>
            <param name="rollbarAccessToken">The Rollbar access token.</param>
            <param name="rollbarEnvironment">The Rollbar environment.</param>
            <returns>IRollbarConfig.</returns>
        </member>
        <member name="P:Rollbar.PlugIns.PlugInCoreBase.RollbarConfig">
            <summary>
            Gets the rollbar configuration.
            </summary>
            <value>The rollbar configuration.</value>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.ReportToRollbar(Rollbar.DTOs.Data)">
            <summary>
            Reports data to Rollbar.
            </summary>
            <param name="rollbarData">The Rollbar data.</param>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.ReportToRollbar(Rollbar.ILogger,Rollbar.DTOs.Data)">
            <summary>
            Reports data to Rollbar.
            </summary>
            <param name="logger">The logger.</param>
            <param name="rollbarData">The Rollbar data.</param>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCoreBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Rollbar.PlugIns.PlugInCore`2">
            <summary>
            Class PlugInCore.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <typeparam name="TPlugInErrorLevel">The type of the t plug in error level.</typeparam>
            <typeparam name="TPlugInEventData">The type of the t plug in event data.</typeparam>
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCore`2._customPrefix">
            <summary>
            The custom prefix for the Rollbar payload custom fields.
            </summary>
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCore`2._plugInEventDataType">
            <summary>
            The plug in event data type
            </summary>
        </member>
        <member name="F:Rollbar.PlugIns.PlugInCore`2._rollbarErrorLevelByPlugInErrorLevel">
            <summary>
            The Rollbar ErrorLevel by plug-in's error level.
            Essentially, a one-directional map from plug-in's error level value to Rollbar ErrorLevel.
            </summary>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.#ctor(System.Collections.Generic.IDictionary{`0,Rollbar.ErrorLevel},System.String,Rollbar.IRollbarConfig,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PlugIns.PlugInCore`2"/> class.
            </summary>
            <param name="rollbarErrorLevelByPlugInErrorLevel">
            The Rollbar ErrorLevel by plug-in's error level. 
            Essentially, a one-directional map from plug-in's error level value to Rollbar ErrorLevel.
            </param>
            <param name="customPrefix">
            The custom prefix for the Rollbar payload custom fields.
            </param>
            <param name="rollbarConfig">
            The Rollbar configuration.
            </param>
            <param name="rollbarBlockingTimeout">
            The RollbarLogger's blocking timeout.
            </param>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.ReportToRollbar(`1,`0)">
            <summary>
            Reports to rollbar.
            </summary>
            <param name="plugInEventData">The plug-in event data.</param>
            <param name="plugInErrorLevel">The plug-in error level.</param>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.Translate(`1,`0)">
            <summary>
            Translates the specified plug in event data into a Rollbar.DTOs.Data instance.
            </summary>
            <param name="plugInEventData">The plug in event data.</param>
            <param name="plugInErrorLevel">The plug in error level.</param>
            <returns>Rollbar.DTOs.Data instance.</returns>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.Translate(`0)">
            <summary>
            Translates the specified plug-in error level to Rollbar ErrorLevel.
            </summary>
            <param name="plugInErrorLevel">The plug-in error level.</param>
            <returns>ErrorLevel.</returns>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.ExtractMessage(`1)">
            <summary>
            Extracts the message for a Rollbar payload from the incoming plug-in's data event.
            </summary>
            <param name="plugInEventData">The plug in event data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.ExtractException(`1)">
            <summary>
            Extracts the exception for a Rollbar payload from the incoming plug-in's data event.
            </summary>
            <param name="plugInEventData">The plug in event data.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Rollbar.PlugIns.PlugInCore`2.ExtractCustomProperties(`1)">
            <summary>
            Extracts the custom properties  for a Rollbar payload from the incoming plug-in's data event.
            </summary>
            <param name="plugInEventData">The plug in event data.</param>
            <returns>Usually, either a data structure or a key-value dictionary returned as a System.Object.</returns>
        </member>
        <member name="T:Rollbar.RollbarAssistant">
            <summary>
            This is a utility class assisting in collecting extra information for logging.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Object)">
            <summary>
            Captures the state (all the data fields' values of the provided instance).
            
            It captures all the static and instance data fields (public and non-public) 
            including the inherited ones (if there is any).
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied instance object or null whenever the state capture is not applicable 
            (for example, when instance argument happened to be uninitialized)
            </returns>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Captures the state (all the data fields' values of the provided instance).
            
            It captures all the static and instance data fields (public and non-public) 
            including the inherited ones (if there is any).
            </summary>
            <param name="instance">The instance.</param>
            <param name="stateCapture">a instance of a state capture bag.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied instance object or null whenever the state capture is not applicable 
            (for example, when instance argument happened to be uninitialized)
            </returns>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Object,System.String)">
            <summary>
            Captures the state (all the data fields' values of the provided instance).
            
            It captures all the static and instance data fields (public and non-public) 
            including the inherited ones (if there is any).
            </summary>
            <param name="instance">The instance.</param>
            <param name="instanceName">Name of the instance.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied instance object or null whenever the state capture is not applicable 
            (for example, when instance argument happened to be uninitialized)
            </returns>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Captures the state (all the data fields' values of the provided instance).
            
            It captures all the static and instance data fields (public and non-public) 
            including the inherited ones (if there is any).
            </summary>
            <param name="instance">The instance.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="stateCapture">a instance of a state capture bag.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied instance object or null whenever the state capture is not applicable 
            (for example, when instance argument happened to be uninitialized)
            </returns>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Type)">
            <summary>
            Captures the state of a static type (all the data fields' values of the provided static type).
            </summary>
            <param name="staticType">Type of a static class.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied static type or null whenever the state capture is not applicable 
            (for example, when static type argument happened to represent an Enum or an interface).
            </returns>
        </member>
        <member name="M:Rollbar.RollbarAssistant.CaptureState(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Captures the state of a static type (all the data fields' values of the provided static type).
            </summary>
            <param name="staticType">Type of a static class.</param>
            <param name="stateCapture">a instance of a state capture bag.</param>
            <returns>
            either the provided instance or a new instance of a state capture bag that is a dictionary of data field name/value pairs representing 
            the captured state of the supplied static type or null whenever the state capture is not applicable 
            (for example, when static type argument happened to represent an Enum or an interface).
            </returns>
        </member>
        <member name="T:Rollbar.RollbarConfig">
            <summary>
            Class RollbarConfig.
            Implements the <see cref="!:Rollbar.Common.ReconfigurableBase&lt;Rollbar.RollbarConfig, Rollbar.IRollbarConfig&gt;" />
            Implements the <see cref="T:Rollbar.ITraceable" />
            Implements the <see cref="T:Rollbar.IRollbarConfig" />
            Implements the <see cref="!:System.IEquatable&lt;Rollbar.IRollbarConfig&gt;" />
            Implements the <see cref="T:Rollbar.Common.IValidatable" />
            </summary>
            <seealso cref="!:Rollbar.Common.ReconfigurableBase&lt;Rollbar.RollbarConfig, Rollbar.IRollbarConfig&gt;" />
            <seealso cref="T:Rollbar.ITraceable" />
            <seealso cref="T:Rollbar.IRollbarConfig" />
            <seealso cref="!:System.IEquatable&lt;Rollbar.IRollbarConfig&gt;" />
            <seealso cref="T:Rollbar.Common.IValidatable" />
        </member>
        <member name="M:Rollbar.RollbarConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarConfig"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarConfig"/> class.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="P:Rollbar.RollbarConfig.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Rollbar.RollbarConfig.Reconfigure(Rollbar.IRollbarConfig)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">The pre-configured instance to be cloned in terms of its configuration/settings.</param>
            <returns>
            Reconfigured instance.
            </returns>
        </member>
        <member name="P:Rollbar.RollbarConfig.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ScrubFields">
            <summary>
            Gets or sets the scrub fields.
            </summary>
            <value>
            The scrub fields.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ScrubWhitelistFields">
            <summary>
            Gets the scrub white-list fields.
            </summary>
            <value>
            The scrub white-list fields.
            </value>
            <remarks>
            The fields mentioned in this list are guaranteed to be excluded
            from the ScrubFields list in cases when the lists overlap.
            </remarks>
        </member>
        <member name="P:Rollbar.RollbarConfig.LogLevel">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>
            The log level.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Enabled">
            <summary>
            Gets or sets the enabled.
            </summary>
            <value>
            The enabled.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Transmit">
            <summary>
            Gets or sets a value indicating whether the Rollbar logger will actually transmit the payloads to the Rollbar API server.
            </summary>
            <value><c>null</c> if contains no value, <c>true</c> if transmit; otherwise, <c>false</c>.</value>
            <remarks>Should the SDK actually perform HTTP requests to Rollbar API. This is useful if you are trying to run Rollbar in dry run mode for development or tests.
            If this is false then we do all of the report processing except making the post request at the end of the pipeline.
            Default: true</remarks>
        </member>
        <member name="P:Rollbar.RollbarConfig.RethrowExceptionsAfterReporting">
            <summary>
            Gets or sets a value indicating whether to rethrow exceptions after reporting them to Rollbar API.
            </summary>
            <value><c>true</c> if to rethrow exceptions after reporting them to Rollbar API; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.EnableLocalPayloadStore">
            <summary>
            Gets or sets a value indicating whether to enable local payload store.
            </summary>
            <value><c>true</c> if to enable local payload store; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.LocalPayloadStoreFileName">
            <summary>
            Gets or sets the name of the local payload store file.
            </summary>
            <value>The name of the local payload store file.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.LocalPayloadStoreLocationPath">
            <summary>
            Gets or sets the local payload store location path.
            </summary>
            <value>The local payload store location path.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Environment">
            <summary>
            Gets or sets the environment.
            </summary>
            <value>
            The environment.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.CheckIgnore">
            <summary>
            Gets or sets the check ignore.
            </summary>
            <value>
            The check ignore.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Truncate">
            <summary>
            Gets or sets the truncate.
            </summary>
            <value>
            The truncate.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ProxyAddress">
            <summary>
            Gets or sets the proxy address.
            </summary>
            <value>
            The proxy address.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ProxyUsername">
            <summary>
            Gets the proxy username.
            </summary>
            <value>The proxy username.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ProxyPassword">
            <summary>
            Gets the proxy password.
            </summary>
            <value>The proxy password.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.PayloadPostTimeout">
            <summary>
            Gets or sets the payload POST timeout.
            </summary>
            <value>The payload POST timeout.</value>
        </member>
        <member name="P:Rollbar.RollbarConfig.MaxReportsPerMinute">
            <summary>
            Gets or sets the maximum reports per minute.
            </summary>
            <value>
            The maximum reports per minute.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.ReportingQueueDepth">
            <summary>
            Gets or sets the reporting queue depth.
            </summary>
            <value>
            The reporting queue depth.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.MaxItems">
            <summary>
            Gets or sets the maximum items limit.
            </summary>
            <value>
            The maximum items.
            </value>
            <remarks>
            Max number of items to report per page load or per web request.
            When this limit is reached, an additional item will be reported stating that the limit was reached.
            Like MaxReportsPerMinute, this limit counts uncaught errors and any direct calls to Rollbar.log/debug/info/warning/error/critical().
            Default: 0 (no limit)
            </remarks>
        </member>
        <member name="P:Rollbar.RollbarConfig.CaptureUncaughtExceptions">
            <summary>
            Gets or sets a value indicating whether to auto-capture uncaught exceptions.
            </summary>
            <value>
              <c>true</c> if auto-capture uncaught exceptions is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.PersonDataCollectionPolicies">
            <summary>
            Gets or sets the person data collection policies.
            </summary>
            <value>
            The person data collection policies.
            </value>
        </member>
        <member name="P:Rollbar.RollbarConfig.IpAddressCollectionPolicy">
            <summary>
            Gets or sets the IP address collection policy.
            </summary>
            <value>
            The IP address collection policy.
            </value>
        </member>
        <member name="M:Rollbar.RollbarConfig.GetLocalPayloadStoreFullPathName">
            <summary>
            Gets the full-path-name of the local payload store.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.TraceAsString(System.String)">
            <summary>
            Traces as a string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.GetFieldsToScrub">
            <summary>
            Gets the fields to scrub.
            </summary>
            <returns>
            Actual fields to be scrubbed based on combining the ScrubFields with the ScrubWhitelistFields.
            Basically this.ScrubFields "minus" this.ScrubWhitelistFields.
            </returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.Rollbar#Common#IReconfigurable{Rollbar#IRollbarConfig,Rollbar#IRollbarConfig}#Reconfigure(Rollbar.IRollbarConfig)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">The pre-configured instance to be cloned in terms of its configuration/settings.</param>
            <returns>Reconfigured instance.</returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>IReadOnlyCollection&lt;ValidationResult&gt; containing failed validation rules.</returns>
        </member>
        <member name="M:Rollbar.RollbarConfig.GetValidator">
            <summary>
            Gets the proper validator.
            </summary>
            <returns>Validator.</returns>
        </member>
        <member name="T:Rollbar.RollbarConfig.RollbarConfigValidationRule">
            <summary>
            Enum RollbarConfigValidationRule
            </summary>
        </member>
        <member name="F:Rollbar.RollbarConfig.RollbarConfigValidationRule.ValidEndPointRequired">
            <summary>
            The valid end point required
            </summary>
        </member>
        <member name="F:Rollbar.RollbarConfig.RollbarConfigValidationRule.ValidAccessTokenRequired">
            <summary>
            The valid access token required
            </summary>
        </member>
        <member name="F:Rollbar.RollbarConfig.RollbarConfigValidationRule.ValidEnvironmentRequired">
            <summary>
            The valid environment required
            </summary>
        </member>
        <member name="F:Rollbar.RollbarConfig.RollbarConfigValidationRule.ValidPersonIfAny">
            <summary>
            The valid person (if any)
            </summary>
        </member>
        <member name="T:Rollbar.RollbarDataScrubbingHelper">
            <summary>
            Class RollbarDataScrubbingHelper.
            </summary>
            <remarks>
            This type is intended to be extended (via the C# type extension methods)
            by the optional Rollbar extension components with other relevant getter methods
            defining other relevant common data fields to scrub.
            </remarks>
        </member>
        <member name="P:Rollbar.RollbarDataScrubbingHelper.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarQueueController" /> class from being created.
            </summary>
        </member>
        <member name="T:Rollbar.RollbarDataScrubbingHelper.NestedSingleInstance">
            <summary>
            Class NestedSingleInstance. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.NestedSingleInstance.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarDataScrubbingHelper.NestedSingleInstance" /> class from being created.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarDataScrubbingHelper.NestedSingleInstance.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.Combine(System.Collections.Generic.IEnumerable{System.Collections.Generic.ISet{System.String}})">
            <summary>
            Combines the specified data field sets.
            </summary>
            <param name="dataFieldSets">The data field sets.</param>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.Combine(System.Collections.Generic.ISet{System.String}[])">
            <summary>
            Combines the specified data field sets.
            </summary>
            <param name="dataFieldSets">The data field sets.</param>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.Remove(System.Collections.Generic.ISet{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the specified fields from the initial data field set.
            </summary>
            <param name="initialDataFieldSet">The initial data field set.</param>
            <param name="dataFieldsToRemove">The data fields to remove.</param>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.GetDefaultFields">
            <summary>
            Gets the default fields.
            </summary>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.GetCommonPasswordFields">
            <summary>
            Gets the common password fields.
            </summary>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.GetCommonCreditCardNumberFields">
            <summary>
            Gets the common credit card number fields.
            </summary>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.GetCommonCreditCardCvvFields">
            <summary>
            Gets the common credit card CVV fields.
            </summary>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Rollbar.RollbarDataScrubbingHelper.GetCommonHttpHeaderFields">
            <summary>
            Gets the common HTTP header fields.
            </summary>
            <returns>ISet&lt;System.String&gt;.</returns>
        </member>
        <member name="T:Rollbar.RollbarException">
            <summary>
            Class RollbarException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="F:Rollbar.RollbarException._rollbarError">
            <summary>
            The rollbar error
            </summary>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException" /> class.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor(Rollbar.InternalRollbarError)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException" /> class.
            </summary>
            <param name="rollbarError">The rollbar error.</param>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor(Rollbar.InternalRollbarError,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException"/> class.
            </summary>
            <param name="rollbarError">The rollbar error.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor(Rollbar.InternalRollbarError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException"/> class.
            </summary>
            <param name="rollbarError">The rollbar error.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor(Rollbar.InternalRollbarError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException" /> class.
            </summary>
            <param name="rollbarError">The rollbar error.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Rollbar.RollbarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Rollbar.RollbarException.RollbarError">
            <summary>
            Gets the rollbar error.
            </summary>
            <value>The rollbar error.</value>
        </member>
        <member name="T:Rollbar.RollbarFactory">
            <summary>
            RollbarFactory utility class.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarFactory.CreateNew">
            <summary>
            Creates the new instance of IRollbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.RollbarFactory.CreateNew(Rollbar.IRollbarConfig)">
            <summary>
            Creates the new instance of IRollbar.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.RollbarFactory.CreateNew(System.Boolean)">
            <summary>
            Creates the new instance of IRollbar.
            </summary>
            <param name="isSingleton">if set to <c>true</c> [is singleton].</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="M:Rollbar.RollbarFactory.CreateNew(System.Boolean,Rollbar.IRollbarConfig)">
            <summary>
            Creates the new instance of IRollbar.
            </summary>
            <param name="isSingleton">if set to <c>true</c> [is singleton].</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="M:Rollbar.RollbarFactory.CreateProper(Rollbar.IRollbarConfig,System.Nullable{System.TimeSpan})">
            <summary>
            Creates the proper.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
            <param name="rollbarBlockingLoggingTimeout">The rollbar blocking logging timeout.</param>
        </member>
        <member name="T:Rollbar.CommunicationErrorEventArgs">
            <summary>
            Models a communication error event.
            </summary>
            <seealso cref="T:Rollbar.RollbarEventArgs" />
        </member>
        <member name="M:Rollbar.CommunicationErrorEventArgs.#ctor(Rollbar.RollbarLogger,System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CommunicationErrorEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="error">The error.</param>
            <param name="retriesLeft">The retries left.</param>
        </member>
        <member name="M:Rollbar.CommunicationErrorEventArgs.#ctor(Rollbar.RollbarLogger,Rollbar.DTOs.Payload,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CommunicationErrorEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="error">The error.</param>
            <param name="retriesLeft">The retries left.</param>
        </member>
        <member name="P:Rollbar.CommunicationErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Rollbar.CommunicationErrorEventArgs.RetriesLeft">
            <summary>
            Gets the retries left.
            </summary>
            <value>
            The retries left.
            </value>
        </member>
        <member name="M:Rollbar.CommunicationErrorEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.CommunicationEventArgs">
            <summary>
            Models a communication event.
            </summary>
            <seealso cref="T:Rollbar.RollbarEventArgs" />
        </member>
        <member name="M:Rollbar.CommunicationEventArgs.#ctor(Rollbar.RollbarLogger,System.String,Rollbar.RollbarResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CommunicationEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Rollbar.CommunicationEventArgs.#ctor(Rollbar.RollbarLogger,Rollbar.DTOs.Payload,Rollbar.RollbarResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.CommunicationEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="response">The response.</param>
        </member>
        <member name="P:Rollbar.CommunicationEventArgs.Response">
            <summary>
            Gets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="M:Rollbar.CommunicationEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.InternalErrorEventArgs">
            <summary>
            Models an internal event.
            </summary>
            <seealso cref="T:Rollbar.RollbarEventArgs" />
        </member>
        <member name="P:Rollbar.InternalErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Rollbar.InternalErrorEventArgs.Details">
            <summary>
            Gets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="M:Rollbar.InternalErrorEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.PayloadDropEventArgs">
            <summary>
            Class PayloadDropEventArgs.
            Implements the <see cref="T:Rollbar.RollbarEventArgs" />
            </summary>
            <seealso cref="T:Rollbar.RollbarEventArgs" />
        </member>
        <member name="T:Rollbar.PayloadDropEventArgs.DropReason">
            <summary>
            Enum DropReason
            </summary>
        </member>
        <member name="F:Rollbar.PayloadDropEventArgs.DropReason.IgnorablePayload">
            <summary>
            The ignorable payload
            </summary>
        </member>
        <member name="F:Rollbar.PayloadDropEventArgs.DropReason.TokenSuspension">
            <summary>
            The token suspension
            </summary>
        </member>
        <member name="F:Rollbar.PayloadDropEventArgs.DropReason.AllTransmissionRetriesFailed">
            <summary>
            All transmission retries failed
            </summary>
        </member>
        <member name="F:Rollbar.PayloadDropEventArgs.DropReason.RollbarQueueControllerFlushedQueues">
            <summary>
            The rollbar queue controller flushed queues
            </summary>
        </member>
        <member name="F:Rollbar.PayloadDropEventArgs.DropReason.InvalidPayload">
            <summary>
            The invalid payload
            </summary>
        </member>
        <member name="M:Rollbar.PayloadDropEventArgs.#ctor(Rollbar.RollbarLogger,Rollbar.DTOs.Payload,Rollbar.PayloadDropEventArgs.DropReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.PayloadDropEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="dropReason">The drop reason.</param>
        </member>
        <member name="P:Rollbar.PayloadDropEventArgs.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="M:Rollbar.PayloadDropEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>String rendering of this instance.</returns>
        </member>
        <member name="T:Rollbar.RollbarApiErrorEventArgs">
            <summary>
            Models a Rollbar API error event.
            </summary>
            <seealso cref="T:Rollbar.CommunicationEventArgs" />
        </member>
        <member name="T:Rollbar.RollbarApiErrorEventArgs.RollbarError">
            <summary>
            Known error codes.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.None">
            <summary>
            Not an error.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.BadRequest">
            <summary>
            The bad request
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.AccessDenied">
            <summary>
            The access denied
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.NotFound">
            <summary>
            Resource not found
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.RequestEntityTooLarge">
            <summary>
            The request entity too large
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.UnprocessableEntity">
            <summary>
            The unprocessable entity
            </summary>
        </member>
        <member name="F:Rollbar.RollbarApiErrorEventArgs.RollbarError.TooManyRequests">
            <summary>
            Too many requests
            </summary>
        </member>
        <member name="T:Rollbar.RollbarApiErrorEventArgs.RollbarErrorDetails">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rollbar.RollbarApiErrorEventArgs.RollbarErrorDetails.#ctor(Rollbar.RollbarApiErrorEventArgs.RollbarError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarApiErrorEventArgs.RollbarErrorDetails"/> class.
            </summary>
            <param name="error">The error.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Rollbar.RollbarApiErrorEventArgs.RollbarErrorDetails.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Rollbar.RollbarApiErrorEventArgs.RollbarErrorDetails.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rollbar.RollbarApiErrorEventArgs.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Rollbar.RollbarApiErrorEventArgs.ErrorType">
            <summary>
            Gets the type of the error.
            </summary>
            <value>
            The type of the error.
            </value>
        </member>
        <member name="P:Rollbar.RollbarApiErrorEventArgs.ErrorDescription">
            <summary>
            Gets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="M:Rollbar.RollbarApiErrorEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.RollbarEventArgs">
            <summary>
            An abstract base for implementing concrete Rollbar EventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
            <seealso cref="T:Rollbar.ITraceable" />
        </member>
        <member name="M:Rollbar.RollbarEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarEventArgs"/> class from being created.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarEventArgs.#ctor(Rollbar.RollbarLogger,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="P:Rollbar.RollbarEventArgs.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Rollbar.RollbarEventArgs.Payload">
            <summary>
            Gets the payload.
            </summary>
            <value>
            The payload.
            </value>
        </member>
        <member name="P:Rollbar.RollbarEventArgs.EventTimestamp">
            <summary>
            Gets the event timestamp.
            </summary>
            <value>The event timestamp.</value>
        </member>
        <member name="M:Rollbar.RollbarEventArgs.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.RollbarEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="T:Rollbar.TransmissionOmittedEventArgs">
            <summary>
            Class TransmissionOmittedEventArgs.
            Implements the <see cref="T:Rollbar.RollbarEventArgs" />
            </summary>
            <seealso cref="T:Rollbar.RollbarEventArgs" />
        </member>
        <member name="M:Rollbar.TransmissionOmittedEventArgs.#ctor(Rollbar.RollbarLogger,Rollbar.DTOs.Payload)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.TransmissionOmittedEventArgs"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:Rollbar.TransmissionOmittedEventArgs.TraceAsString(System.String)">
            <summary>
            Traces as string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>String rendering of this instance.</returns>
        </member>
        <member name="T:Rollbar.RollbarLocator">
            <summary>
            Singleton-like locator of the single shared instance of IRollbar component.
            </summary>
        </member>
        <member name="P:Rollbar.RollbarLocator.RollbarInstance">
            <summary>
            Gets the singleton-like IRollbar instance.
            </summary>
            <value>
            The single shared IRollbar instance.
            </value>
        </member>
        <member name="T:Rollbar.RollbarLogger">
            <summary>
            Implements disposable implementation of IRollbar.
            All the logging methods implemented in async "fire-and-forget" fashion.
            Hence, the payload is not yet delivered to the Rollbar API service when
            the methods return.
            </summary>
            <seealso cref="T:Rollbar.IRollbar" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Rollbar.RollbarLogger._config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="F:Rollbar.RollbarLogger._payloadQueue">
            <summary>
            The payload queue
            </summary>
        </member>
        <member name="E:Rollbar.RollbarLogger.InternalEvent">
            <summary>
            Occurs when a Rollbar internal event happens.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarLogger" /> class.
            </summary>
            <param name="isSingleton">if set to <c>true</c> [is singleton].</param>
        </member>
        <member name="M:Rollbar.RollbarLogger.#ctor(System.Boolean,Rollbar.IRollbarConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.RollbarLogger" /> class.
            </summary>
            <param name="isSingleton">if set to <c>true</c> [is singleton].</param>
            <param name="rollbarConfig">The rollbar configuration.</param>
        </member>
        <member name="P:Rollbar.RollbarLogger.IsSingleton">
            <summary>
            Gets a value indicating whether this instance is singleton.
            </summary>
            <value><c>true</c> if this instance is singleton; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rollbar.RollbarLogger.Queue">
            <summary>
            Gets the queue.
            </summary>
            <value>The queue.</value>
        </member>
        <member name="P:Rollbar.RollbarLogger.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Rollbar.RollbarLogger.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:Rollbar.RollbarLogger.Configure(Rollbar.IRollbarConfig)">
            <summary>
            Configures the using specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Configure(System.String)">
            <summary>
            Configures using the specified access token.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.AsBlockingLogger(System.TimeSpan)">
            <summary>
            Returns blocking/synchronous implementation of this ILogger.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>Blocking (fully synchronous) instance of an ILogger.
            It either completes logging calls within the specified timeout
            or throws a TimeoutException.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Log(Rollbar.ErrorLevel,System.Object)">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Critical(System.Object)">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Error(System.Object)">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Warning(System.Object)">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Info(System.Object)">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Debug(System.Object)">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Log(Rollbar.DTOs.Data)">
            <summary>
            Logs the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Log(Rollbar.ErrorLevel,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Critical(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Error(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Warning(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Info(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Debug(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="P:Rollbar.RollbarLogger.Rollbar#IRollbar#Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Rollbar.RollbarLogger.Rollbar#IRollbar#Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#IRollbar#Configure(Rollbar.IRollbarConfig)">
            <summary>
            Configures the using specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#IRollbar#Configure(System.String)">
            <summary>
            Configures using the specified access token.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>IRollbar.</returns>
        </member>
        <member name="E:Rollbar.RollbarLogger.Rollbar#IRollbar#InternalEvent">
            <summary>
            Occurs when a Rollbar internal event happens.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#AsBlockingLogger(System.TimeSpan)">
            <summary>
            Returns blocking/synchronous implementation of this ILogger.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>Blocking (fully synchronous) instance of an ILogger.
            It either completes logging calls within the specified timeout
            or throws a TimeoutException.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Log(Rollbar.DTOs.Data)">
            <summary>
            Logs the specified rollbar data.
            </summary>
            <param name="rollbarData">The rollbar data.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Log(Rollbar.ErrorLevel,System.Object)">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Critical(System.Object)">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Error(System.Object)">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Warning(System.Object)">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Info(System.Object)">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Debug(System.Object)">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Log(Rollbar.ErrorLevel,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs using the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Critical(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as critical.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Error(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as error.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Warning(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as warning.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Info(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as info.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.Rollbar#ILogger#Debug(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs the specified object as debug.
            </summary>
            <param name="obj">The object.</param>
            <param name="custom">The custom data.</param>
            <returns>Instance of the same ILogger that was used for this call.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarLogger.Enqueue(System.Object,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.TimeSpan},System.Threading.SemaphoreSlim)">
            <summary>
            Enqueues the specified data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
            <param name="timeout">The timeout.</param>
            <param name="signal">The signal.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.EnqueueData(System.Object,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.TimeSpan},System.Threading.SemaphoreSlim)">
            <summary>
            Enqueues the data.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
            <param name="timeout">The timeout.</param>
            <param name="signal">The signal.</param>
            <returns>PayloadBundle.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.CreatePayloadBundle(System.Object,Rollbar.ErrorLevel,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.TimeSpan},System.Threading.SemaphoreSlim)">
            <summary>
            Creates the payload bundle.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="level">The level.</param>
            <param name="custom">The custom.</param>
            <param name="timeout">The timeout.</param>
            <param name="signal">The signal.</param>
            <returns>PayloadBundle.</returns>
        </member>
        <member name="M:Rollbar.RollbarLogger.OnRollbarEvent(Rollbar.RollbarEventArgs)">
            <summary>
            Handles the <see cref="E:RollbarEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:Rollbar.RollbarEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rollbar.RollbarLogger.ValidateConfiguration(Rollbar.IRollbarConfig)">
            <summary>
            Validates the configuration.
            </summary>
            <param name="rollbarConfig">The rollbar configuration.</param>
        </member>
        <member name="F:Rollbar.RollbarLogger._disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:Rollbar.RollbarLogger.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rollbar.RollbarLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>This code added to correctly implement the disposable pattern.</remarks>
        </member>
        <member name="T:Rollbar.RollbarQueueController">
            <summary>
            RollbarQueueController singleton.
            It keeps track of payload queues of every instance of RollbarLogger.
            It is also responsible for async processing of queues on its own worker thread
            (including retries as necessary).
            It makes sure that Rollbar access token rate limits handled properly.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Rollbar.RollbarQueueController.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:Rollbar.RollbarQueueController.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarQueueController" /> class from being created.
            </summary>
        </member>
        <member name="T:Rollbar.RollbarQueueController.NestedSingleInstance">
            <summary>
            Class NestedSingleInstance. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.NestedSingleInstance.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.RollbarQueueController.NestedSingleInstance"/> class from being created.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.NestedSingleInstance.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.traceSource">
            <summary>
            The trace source
            </summary>
        </member>
        <member name="T:Rollbar.RollbarQueueController.PayloadTraceSources">
            <summary>
            Enum PayloadTraceSources
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.PayloadTraceSources.RollbarTransmittedPayloads">
            <summary>
            The rollbar transmitted payloads
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.PayloadTraceSources.RollbarOmittedPayloads">
            <summary>
            The rollbar omitted payloads
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.transmittedPayloadsTraceSource">
            <summary>
            The transmitted payloads trace source
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.omittedPayloadsTraceSource">
            <summary>
            The omitted payloads trace source
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._sleepInterval">
            <summary>
            The sleep interval
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._storeContext">
            <summary>
            The store context (the payload persistence infrastructure)
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._httpClientsByProxySettings">
            <summary>
            The HTTP clients by proxy settings
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ProvideHttpClient(System.String,System.String,System.String)">
            <summary>
            Provides the HTTP client.
            </summary>
            <param name="proxyAddress">The proxy address.</param>
            <param name="proxyUsername">The proxy username.</param>
            <param name="proxyPassword">The proxy password.</param>
            <returns>HttpClient.</returns>
        </member>
        <member name="E:Rollbar.RollbarQueueController.InternalEvent">
            <summary>
            Occurs after a Rollbar internal event happens.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Register(Rollbar.PayloadQueue)">
            <summary>
            Registers the specified queue.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Unregister(Rollbar.PayloadQueue)">
            <summary>
            Unregisters the specified queue.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetQueuesCount(System.String)">
            <summary>
            Gets the queues count.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetQueues(System.String)">
            <summary>
            Gets the queues.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>IEnumerable&lt;PayloadQueue&gt;.</returns>
        </member>
        <member name="F:Rollbar.RollbarQueueController._syncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._rollbarCommThread">
            <summary>
            The rollbar comm thread
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._allQueues">
            <summary>
            All queues
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._queuesByAccessToken">
            <summary>
            The queues by access token
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._useLocalPayloadStore">
            <summary>
            Flags the use of local payload store
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.KeepProcessingAllQueues(System.Object)">
            <summary>
            Keeps the processing all queues.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ProcessPersistentStoreOnce">
            <summary>
            Processes the persistent store once.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.staleRecordAge">
            <summary>
            The stale record age
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ProcessPersistentStoreOnce(Rollbar.PayloadStore.Destination)">
            <summary>
            Processes the persistent store once.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.TryPosting(Rollbar.PayloadStore.PayloadRecord)">
            <summary>
            Tries the posting.
            </summary>
            <param name="payloadRecord">The payload record.</param>
            <returns>RollbarResponse.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ProcessAllQueuesOnce">
            <summary>
            Processes all queues once.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ProcessQueues(Rollbar.AccessTokenQueuesMetadata)">
            <summary>
            Processes the queues.
            </summary>
            <param name="tokenMetadata">The token metadata.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Persist(Rollbar.PayloadQueue)">
            <summary>
            Persists the specified payload queue.
            </summary>
            <param name="payloadQueue">The payload queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.BuildPayloadRecord(Rollbar.PayloadBundle,Rollbar.PayloadQueue)">
            <summary>
            Builds the payload record.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <param name="payloadQueue">The payload queue.</param>
            <returns>PayloadRecord.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.ObeyPayloadTimeout(Rollbar.PayloadBundle,Rollbar.PayloadQueue)">
            <summary>
            Obeys the payload timeout.
            </summary>
            <param name="payloadBundle">The payload bundle.</param>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetFirstTransmittableBundle(Rollbar.PayloadQueue)">
            <summary>
            Gets the first transmittabl bundle.
            </summary>
            <param name="queue">The queue.</param>
            <returns>PayloadBundle.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Process(Rollbar.PayloadQueue,Rollbar.RollbarResponse@)">
            <summary>
            Processes the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <param name="response">The response.</param>
            <returns>PayloadBundle.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Config_Reconfigured(System.Object,System.EventArgs)">
            <summary>
            Handles the Reconfigured event of the Config control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.IndexByToken(Rollbar.PayloadQueue)">
            <summary>
            Indexes the by token.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.DropIndexByToken(Rollbar.PayloadQueue)">
            <summary>
            Drops the index by token.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.OnRollbarEvent(Rollbar.RollbarEventArgs)">
            <summary>
            Handles the <see cref="E:RollbarEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:Rollbar.RollbarEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetTotalPayloadCount">
            <summary>
            Gets the total payload count across all the queues.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetPayloadCount(System.String)">
            <summary>
            Gets the payload count.
            </summary>
            <param name="accessToken">Converts to ken.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetPayloadCount(Rollbar.IRollbar)">
            <summary>
            Gets the payload count.
            </summary>
            <param name="rollbar">The rollbar.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetRecommendedTimeout(System.String)">
            <summary>
            Gets the recommended timeout.
            </summary>
            <param name="accessToken">The Rollbar access token.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetRecommendedTimeout(Rollbar.IRollbar)">
            <summary>
            Gets the recommended timeout.
            </summary>
            <param name="rollbar">The rollbar.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.GetRecommendedTimeout">
            <summary>
            Gets the recommended timeout.
            </summary>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:Rollbar.RollbarQueueController.FlushQueues">
            <summary>
            Flushes the queues.
            All current payloads in every queue get removed (without transmitting them to the Rollbar API).
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController._cancellationTokenSource">
            <summary>
            The cancellation token source
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.CompleteProcessing">
            <summary>
            Completes the processing.
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Stop(System.Boolean)">
            <summary>
            Stops the queues processing.
            </summary>
        </member>
        <member name="F:Rollbar.RollbarQueueController.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rollbar.RollbarQueueController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>This code added to correctly implement the disposable pattern.</remarks>
        </member>
        <member name="T:Rollbar.Serialization.Json.DictionaryConverter">
            <summary>
            DictionaryConverter simplifies Json de/serialization of .NET Dictionaries.
            </summary>
            <seealso cref="!:Json.JsonConverter&lt;System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;&gt;" />
        </member>
        <member name="P:Rollbar.Serialization.Json.DictionaryConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rollbar.Serialization.Json.DictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Collections.Generic.IDictionary{System.String,System.Object},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">This library is currently not configured to fetch data from Rollbar</exception>
        </member>
        <member name="M:Rollbar.Serialization.Json.DictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:Rollbar.Serialization.Json.ErrorLevelConverter">
            <summary>
            ErrorLevelConverter simplifies ErrorLevel Json de/serialization.
            </summary>
            <seealso cref="!:Rollbar.Serialization.Json.JsonConverter&lt;Rollbar.ErrorLevel&gt;" />
        </member>
        <member name="M:Rollbar.Serialization.Json.ErrorLevelConverter.WriteJson(Newtonsoft.Json.JsonWriter,Rollbar.ErrorLevel,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.ErrorLevelConverter.ReadJson(Newtonsoft.Json.JsonReader,Rollbar.ErrorLevel,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">
            </exception>
        </member>
        <member name="T:Rollbar.Serialization.Json.JsonConverter`1">
            <summary>
            Abstract base for implementing Json converters.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException"></exception>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">
            </exception>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,`0,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rollbar.Serialization.Json.JsonScrubber">
            <summary>
            A utility class aiding in scrubbing Json data fields.
            </summary>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.CreateJsonObject(System.String)">
            <summary>
            Creates the Json object.
            </summary>
            <param name="jsonData">The json data.</param>
            <returns>JObject.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.GetChildPropertyByName(Newtonsoft.Json.Linq.JContainer,System.String)">
            <summary>
            Gets the child Json property by name.
            </summary>
            <param name="root">The root.</param>
            <param name="childPropertyName">Name of the child property.</param>
            <returns>JProperty.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByName(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their names.
            </summary>
            <param name="jsonData">The json data.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubMask">The scrub mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByName(Newtonsoft.Json.Linq.JToken,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their names.
            </summary>
            <param name="json">The json.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByName(Newtonsoft.Json.Linq.JProperty,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their name.
            </summary>
            <param name="json">The json.</param>
            <param name="scrubFields">The scrub fields.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByPaths(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their full names/paths.
            </summary>
            <param name="jsonData">The json data.</param>
            <param name="scrubFieldsPaths">The scrub fields paths.</param>
            <param name="scrubMask">The scrub mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByPaths(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their full names/paths.
            </summary>
            <param name="jsonData">The json data.</param>
            <param name="scrubFieldsPaths">The scrub fields paths.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonFieldsByPaths(Newtonsoft.Json.Linq.JProperty,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Scrubs the json fields by their full names/paths.
            </summary>
            <param name="jsonData">The json data.</param>
            <param name="scrubFieldsPaths">The scrub fields paths.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonPath(Newtonsoft.Json.Linq.JProperty,System.String,System.String)">
            <summary>
            Scrubs the json path.
            </summary>
            <param name="jsonProperty">The json property.</param>
            <param name="scrubPath">The scrub path.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonScrubber.ScrubJsonPath(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Scrubs the json path.
            </summary>
            <param name="jsonData">The json data.</param>
            <param name="scrubPath">The scrub path.</param>
            <param name="scrubMask">The scrub mask.</param>
        </member>
        <member name="T:Rollbar.Serialization.Json.JsonUtil">
            <summary>
            Class JsonUtil.
            </summary>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonUtil.InterpretAsJsonObject(System.String)">
            <summary>
            Interprets as json object.
            </summary>
            <param name="jsonString">The json string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonUtil.IsValidJson(System.String)">
            <summary>
            Determines whether [is valid json] [the specified string value].
            </summary>
            <param name="stringValue">The string value.</param>
            <returns><c>true</c> if the string value is valid JSON; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonUtil.TryAsValidJson(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries as valid json.
            </summary>
            <param name="stringValue">The string value.</param>
            <param name="jsonToken">The json token.</param>
            <returns><c>true</c> if the string value is a valid JSON string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rollbar.Serialization.Json.JsonUtil.SerializeAsJsonString(System.Object)">
            <summary>
            Serializes as a JSON string.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Rollbar.Telemetry.ITelemetryCollector">
            <summary>
            Defines interface of Rollbar telemetry collector.
            </summary>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryCollector.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.Capture(Rollbar.DTOs.Telemetry)">
            <summary>
            Captures the specified telemetry.
            </summary>
            <param name="telemetry">The telemetry.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.GetItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.GetQueueContent">
            <summary>
            Gets the content of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryCollector.QueueDepth">
            <summary>
            Gets the queue depth.
            </summary>
            <value>
            The queue depth.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.FlushQueue">
            <summary>
            Flushes the queue.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.StartAutocollection">
            <summary>
            Starts the auto-collection.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.ITelemetryCollector.StopAutocollection(System.Boolean)">
            <summary>
            Stops the auto-collection.
            </summary>
            <param name="immediate">if set to <c>true</c> [immediate].</param>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryCollector.IsAutocollecting">
            <summary>
            Gets a value indicating whether this instance is auto-collecting.
            </summary>
            <value>
              <c>true</c> if this instance is auto-collecting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rollbar.Telemetry.ITelemetryConfig">
            <summary>
            Defines telemetry configuration interface.
            </summary>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryConfig.TelemetryEnabled">
            <summary>
            Gets a value indicating whether telemetry is enabled.
            </summary>
            <value>
              <c>true</c> if telemetry is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryConfig.TelemetryQueueDepth">
            <summary>
            Gets the telemetry queue depth.
            </summary>
            <value>
            The telemetry queue depth.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryConfig.TelemetryAutoCollectionTypes">
            <summary>
            Gets the telemetry automatic collection types.
            </summary>
            <value>
            The telemetry automatic collection types.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.ITelemetryConfig.TelemetryAutoCollectionInterval">
            <summary>
            Gets the telemetry automatic collection interval.
            </summary>
            <value>
            The telemetry automatic collection interval.
            </value>
        </member>
        <member name="T:Rollbar.Telemetry.TelemetryAutoCollectionSettings">
            <summary>
            Enum TelemetryAutoCollectionSettings
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryAutoCollectionSettings.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryAutoCollectionSettings.ProcessCpuUtilization">
            <summary>
            The process cpu utilization
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryAutoCollectionSettings.ProcessMemoryUtilization">
            <summary>
            The process memory utilization
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryAutoCollectionSettings.MachineCpuUtilization">
            <summary>
            The machine cpu utilization
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryAutoCollectionSettings.MachineMemoryUtilization">
            <summary>
            The machine memory utilization
            </summary>
        </member>
        <member name="T:Rollbar.Telemetry.TelemetryCollector">
            <summary>
            Implements Rollbar telemetry collector service.
            </summary>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryCollector.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rollbar.Telemetry.TelemetryCollector"/> class from being created.
            </summary>
        </member>
        <member name="F:Rollbar.Telemetry.TelemetryCollector.NestedSingleInstance.Instance">
            <summary>
            The singleton-like instance of the service.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.Capture(Rollbar.DTOs.Telemetry)">
            <summary>
            Captures the specified telemetry.
            </summary>
            <param name="telemetry">The telemetry.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.Rollbar#Telemetry#ITelemetryCollector#Capture(Rollbar.DTOs.Telemetry)">
            <summary>
            Captures the specified telemetry.
            </summary>
            <param name="telemetry">The telemetry.</param>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.GetItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.GetQueueContent">
            <summary>
            Gets the content of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.FlushQueue">
            <summary>
            Flushes the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryCollector.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.StartAutocollection">
            <summary>
            Starts the auto-collection.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.StopAutocollection(System.Boolean)">
            <summary>
            Stops the auto-collection.
            </summary>
            <param name="immediate">if set to <c>true</c> [immediate].</param>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryCollector.IsAutocollecting">
            <summary>
            Gets a value indicating whether this instance is auto-collecting.
            </summary>
            <value>
              <c>true</c> if this instance is auto-collecting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryCollector.QueueDepth">
            <summary>
            Gets the queue depth.
            </summary>
            <value>
            The queue depth.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryCollector.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
            <remarks>
            This code added to correctly implement the disposable pattern.
            </remarks>
        </member>
        <member name="T:Rollbar.Telemetry.TelemetryConfig">
            <summary>
            ReconfigurableBase
            </summary>
            <seealso cref="!:Rollbar.Common.ReconfigurableBase&lt;Rollbar.Telemetry.TelemetryConfig, Rollbar.Telemetry.ITelemetryConfig&gt;" />
            <seealso cref="T:Rollbar.Telemetry.ITelemetryConfig" />
            <seealso cref="T:Rollbar.ITraceable" />
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Telemetry.TelemetryConfig"/> class.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Telemetry.TelemetryConfig"/> class.
            </summary>
            <param name="telemetryEnabled">if set to <c>true</c> [telemetry enabled].</param>
            <param name="telemetryQueueDepth">The telemetry queue depth.</param>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.#ctor(System.Boolean,System.Int32,Rollbar.DTOs.TelemetryType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Telemetry.TelemetryConfig" /> class.
            </summary>
            <param name="telemetryEnabled">if set to <c>true</c> [telemetry enabled].</param>
            <param name="telemetryQueueDepth">The telemetry queue depth.</param>
            <param name="telemetryAutoCollectionTypes">The telemetry automatic collection types.</param>
            <param name="telemetryCollectionInterval">The telemetry collection interval.</param>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryConfig.TelemetryEnabled">
            <summary>
            Gets a value indicating whether telemetry is enabled.
            </summary>
            <value>
            <c>true</c> if telemetry is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryConfig.TelemetryQueueDepth">
            <summary>
            Gets the telemetry queue depth.
            </summary>
            <value>
            The telemetry queue depth.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryConfig.TelemetryAutoCollectionTypes">
            <summary>
            Gets the telemetry automatic collection types.
            </summary>
            <value>
            The telemetry automatic collection types.
            </value>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryConfig.TelemetryAutoCollectionInterval">
            <summary>
            Gets the telemetry automatic collection interval.
            </summary>
            <value>
            The telemetry automatic collection interval.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.TraceAsString">
            <summary>
            Traces as string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.TraceAsString(System.String)">
            <summary>
            Traces as a string.
            </summary>
            <param name="indent">The indent.</param>
            <returns>
            String rendering of this instance.
            </returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryConfig.Rollbar#Common#IReconfigurable{Rollbar#Telemetry#ITelemetryConfig,Rollbar#Telemetry#ITelemetryConfig}#Reconfigure(Rollbar.Telemetry.ITelemetryConfig)">
            <summary>
            Reconfigures this object similar to the specified one.
            </summary>
            <param name="likeMe">The pre-configured instance to be cloned in terms of its configuration/settings.</param>
            <returns>Reconfigured instance.</returns>
        </member>
        <member name="T:Rollbar.Telemetry.TelemetryQueue">
            <summary>
            Fixed depth queue of telemetry items.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rollbar.Telemetry.TelemetryQueue"/> class.
            </summary>
        </member>
        <member name="P:Rollbar.Telemetry.TelemetryQueue.QueueDepth">
            <summary>
            Gets or sets the queue depth.
            </summary>
            <value>
            The queue depth.
            </value>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.GetQueueContent">
            <summary>
            Gets the content of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.Enqueue(Rollbar.DTOs.Telemetry)">
            <summary>
            Enqueues the specified telemetry.
            </summary>
            <param name="telemetry">The telemetry.</param>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.GetItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.Peek">
            <summary>
            Peeks this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rollbar.Telemetry.TelemetryQueue.Dequeue">
            <summary>
            Dequeues this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rollbar.Telemetry.TelemetryUtility">
            <summary>
            TODO: complete the implementation...
            </summary>
        </member>
        <member name="T:Xamarin.iOS.Foundation.PreserveAttribute">
            <summary>
            
            This attribute could be used for decorating some classes or their members
            in order to prevent removal of unused members (that in fact could be still 
            used by the Reflection) by the mtouch's Linker during the optimization phase.
            
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>
            When building your application, Visual Studio for Mac or Visual Studio calls a tool called mtouch 
            that includes a linker for managed code. It is used to remove from the class libraries the features 
            that the application is not using. The goal is to reduce the size of the application, 
            which will ship with only the necessary bits.
            
            The linker uses static analysis to determine the different code paths that your application is 
            susceptible to follow.It's a bit heavy as it has to go through every detail of each assembly, 
            to make sure that nothing discoverable is removed. It is not enabled by default on the simulator 
            builds to speed up the build time while debugging. However since it produces smaller applications 
            it can speed up AOT compilation and uploading to the device, all devices (Release) builds are using 
            the linker by default.
            
            As the linker is a static tool, it can not mark for inclusion types and methods that are called 
            through reflection, or dynamically instantiated.Several options exists to workaround this limitation.
            Use of PreserveAttribute is one of them.
            
            For more detail regarding the use of this attribute, please, refer to:
            https://docs.microsoft.com/en-us/xamarin/ios/deploy-test/linker?tabs=vsmac
            </remarks>
        </member>
        <member name="P:Xamarin.iOS.Foundation.PreserveAttribute.AllMembers">
            <summary>
            Signifies whether all members of the decorated type should be preserved. 
            Default value is true.
            </summary>
        </member>
        <member name="P:Xamarin.iOS.Foundation.PreserveAttribute.Conditional">
            <summary>
            Signifies that the decorated member should be preserved only 
            if the containing type was preserved.
            </summary>
        </member>
    </members>
</doc>
